/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

#include <functional>
#include <map>
#include <memory>
#include <optional>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>

#include "encode.hpp"
#include "object.hpp"

/* {{ "*" + "/" }}
{%- if namespace %}
{%- for n in namespace.split("::") %}
namespace {{ n }} {
{%- endfor %}
{%- endif %}
{{ "/" + "*" }} */

using std::string_literals::operator""s;

// EncoderState
EncoderState::EncoderState() {}
EncoderState::~EncoderState() {}

std::string EncoderState::getObjectId(SHACLObject const& obj) {
    if (obj._id.isSet()) {
        return obj._id.get();
    }

    auto const key = getObjectKey(obj);
    auto it = mIdMap.find(key);
    if (it != mIdMap.end()) {
        return it->second;
    }

    auto const id = "_:"s + std::to_string(mIdMap.size());
    mIdMap.insert({key, id});
    return id;
}

bool EncoderState::objectIsRefed(SHACLObject const& obj) const {
    auto it = mIsRefed.find(getObjectKey(obj));
    return it != mIsRefed.end();
}

void EncoderState::addRefed(std::shared_ptr<SHACLObject> obj) {
    mRefed.insert(obj);
    mIsRefed.insert(getObjectKey(*obj.get()));
}

bool EncoderState::objectIsWritten(SHACLObject const& obj) const {
    auto it = mWritten.find(getObjectKey(obj));
    return it != mWritten.end();
}

void EncoderState::addWritten(SHACLObject const& obj) {
    mWritten.insert(getObjectKey(obj));
}

void EncoderState::removeWritten(SHACLObject const& obj) {
    mWritten.erase(getObjectKey(obj));
}

EncoderState::objectKey EncoderState::getObjectKey(
    SHACLObject const& obj) const {
    return reinterpret_cast<uintptr_t>(&obj);
}

// ElementEncoder
ElementEncoder::ElementEncoder(EncoderState& state) : mState(state) {}
ElementEncoder::~ElementEncoder() {}

// ValueEncoder
ValueEncoder::ValueEncoder(EncoderState& state) : ElementEncoder(state) {}
ValueEncoder::~ValueEncoder() {}

// ObjectEncoder
ObjectEncoder::ObjectEncoder(EncoderState& state) : ElementEncoder(state) {}
ObjectEncoder::~ObjectEncoder() {}

// ListEncoder
ListEncoder::ListEncoder(EncoderState& state) : ElementEncoder(state) {}
ListEncoder::~ListEncoder() {}

/* {{ "*" + "/" }}
{%- if namespace %}
{%- for n in namespace.split("::") %}
}
{%- endfor %}
{%- endif %}
{{ "/" + "*" }} */

