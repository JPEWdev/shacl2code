/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

#include <functional>
#include <string>

#include "errorhandler.hpp"
#include "exceptions.hpp"
#include "objectpath.hpp"

/* {{ "*" + "/" }}
{%- if namespace %}
{%- for n in namespace.split("::") %}
namespace {{ n }} {
{%- endfor %}
{%- endif %}
{{ "/" + "*" }} */

using std::string_literals::operator""s;

// DefaultErrorHanlder
DefaultErrorHandler::DefaultErrorHandler() {}
DefaultErrorHandler::~DefaultErrorHandler() {}

void DefaultErrorHandler::handleValidationError(std::string const& message,
                                                ObjectPath const& path) {
    throw ValidationError(message, path.getPathString());
}

void DefaultErrorHandler::handleDeserializeError(std::string const& message,
                                                 ObjectPath const& path) {
    throw DeserializeError(message, path.getPathString());
}

DefaultErrorHandler DefaultErrorHandler::handler;

// NoopErrorHanlder
NoopErrorHandler::NoopErrorHandler() {}
NoopErrorHandler::~NoopErrorHandler() {}

void NoopErrorHandler::handleValidationError(std::string const& message,
                                             ObjectPath const& path) {}

void NoopErrorHandler::handleDeserializeError(std::string const& message,
                                              ObjectPath const& path) {}

NoopErrorHandler NoopErrorHandler::handler;

/* {{ "*" + "/" }}
{%- if namespace %}
{%- for n in namespace.split("::") %}
}
{%- endfor %}
{%- endif %}
{{ "/" + "*" }} */
