/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

/* {{ guard_begin }} */

#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

#include "property.hpp"
#include "propertyvalue.hpp"

/* {{ api_def_begin }} */
/* {{ ns_begin }} */

class LinkState;
class ObjectDecoder;
class ObjectEncoder;
class ObjectPath;
class TypeBase;
class ValueDecoder;
class ValueEncoder;
class WalkCallback;

/**
 * @brief SHACL Object
 *
 * Base SHACL Object that all generated classes are derived from
 */
class EXPORT SHACLObject {
   private:
    /**
     * @brief ID property configuration
     *
     * Config class for a SHACLObject identifier property
     */
    class IDPropConfig : public StringProperty {
       public:
        IDPropConfig(SHACLObject const* owner);
        virtual ~IDPropConfig();

        bool validateValue(std::string const& value, ErrorHandler& errorHandler,
                           ObjectPath& path) const override;

        void encode(ValueEncoder& encoder, std::string const& value,
                    ErrorHandler& errorHandler,
                    ObjectPath& path) const override;

       private:
        SHACLObject const* mOwner;
    };

   public:
    /// Alias for the parameter that desribes the type IRIs an object can have
    using TypeIRIs =
        std::optional<std::pair<std::string, std::optional<std::string>>>;

    /// Destructor
    virtual ~SHACLObject();

    SHACLObject(SHACLObject const& other) = delete;
    SHACLObject& operator=(SHACLObject const& other) = delete;
    SHACLObject(SHACLObject&& other) = delete;
    SHACLObject& operator=(SHACLObject&& other) = delete;

    /**
     * @brief Validate object
     *
     * Validates all the properties in the object, including checking
     * cardinality, etc. If this passes, the object is fully valid and should
     * pass SHACL validation
     *
     * @param[in] errorHandler  The ErrorHandler to use if validation errors
     *                          are found
     * @param path              The ObjectPath of the object
     *
     * @returns true if the object is valid, and false if not
     */
    bool validate(ErrorHandler& errorHandler, ObjectPath& path) const;

    /**
     * @brief Get the type
     *
     * @returns The TypeBase for the type of the object
     */
    TypeBase const& getType() const;

    /**
     * @brief Get the type IRI
     *
     * @returns the fully qualified type IRI for the object. This may not match
     * the TypeBase IRI, e.g. if the object is extensible
     */
    std::string const& getTypeIRI() const;

    /**
     * @brief Get compact type IRI
     *
     * @returns the compacted type IRI or an empty optional if the object does
     * not have a compact type IRI. This may not match the TypeBase compact
     * IRI, e.g. if the object is extensible
     */
    std::optional<std::string> const& getCompactTypeIRI() const;

    /**
     * @brief Encode object
     *
     * Encodes the object to an output using the provided ValueEncoder
     *
     * @param[in] encoder       The ValueEncoder to use to write the object
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          encoding errors
     * @param path              The ObjectPath of the object
     */
    void encode(ValueEncoder& encoder, ErrorHandler& errorHandler,
                ObjectPath& path) const;

    /**
     * @brief Link object
     *
     * Links all properties of the object, replacing any string references to
     * IRIs with pointers to object instances with that IRI if one exists
     *
     * @param[in] state The LinkState to use while linking
     */
    void link(LinkState& state);

    /**
     * @brief Walk object
     *
     * Walks the object and all its properties, invoking the callbacks for
     * each
     *
     * @param[in] callbacks The Callbacks to invoke when visiting the object or
     *                      any of its properties
     * @param path          The ObjectPath of the object
     */
    void walk(WalkCallback const& callbacks, ObjectPath& path) const;

    /**
     * @brief Decode object
     *
     * Decodes an object using the provided ObjectDecoder, and returns a
     * pointer to it.
     *
     * The actual object type will be determined by looking up the type IRI of
     * the serialized object in the type registry, then creating an object of
     * that type. If @p type is not nullptr, the created object will be
     * validated to ensure it is of that type, or a descendant of that type
     *
     * @param[in] decoder       The ObjectDecoder to decode the object
     * @param[in] type          The TypeBase of the expected type
     * @param[in] errorHandler  The ErrorHandler to use to report any errors
     * @param path              The ObjectPath of the object
     *
     * @returns A pointer to the created object, or nullptr if object could not
     * be decoded
     */
    static std::shared_ptr<SHACLObject> decode(ObjectDecoder& decoder,
                                               TypeBase const* type,
                                               ErrorHandler& errorHandler,
                                               ObjectPath& path);

    /**
     * @brief Chained set
     *
     * Chained set can be used to set multiple properties at once in an object
     * using a pointer to the member property. For example:
     *
     * @code
     *  auto r = make_obj<MyObject>
     *  r->set<&SHACLObject::_id>("_:foo").set<MyObject::_foo>(1);
     * @endcode
     */
    template <auto P, typename T>
    auto& set(T const& value) {
        return setHelper<P>(*this, value);
    }

    /**
     * @brief Chained add
     *
     * Chained add can be used to add a value to multiple list properties at
     * once in an object using a pointer to the member property. For example:
     *
     * @code
     *  auto r = make_obj<MyObject>
     *  r->add<&MyObject::_list1>("_:foo").add<MyObject::_list2>(1);
     * @endcode
     */
    template <auto P, typename T>
    auto& add(T const& value) {
        return addHelper<P>(*this, value);
    }

    // Properties

    /**
     * @brief Object ID
     *
     * The ID of object as a fully qualified IRI
     */
    PropertyValue<std::string, IDPropConfig> _id;

   protected:
    /// Constructor
    SHACLObject(TypeBase const* type, TypeIRIs const& typeIRIs = {});

    /**
     * @brief Encode properties
     *
     * Encodes the properties of the object using the provided ObjectEncoder
     *
     * @param[in] encoder       The ObjectEncoder to use to write the
     *                          properties
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          encoding errors
     * @param path              The ObjectPath of the object
     */
    virtual void encodeProperties(ObjectEncoder& encoder,
                                  ErrorHandler& errorHandler,
                                  ObjectPath& path) const;

    /**
     * @brief Handle unknown decoded property
     *
     * If a property with an unknown IRI (or compact IRI) is encountered while
     * decoding an object, this will be called to handle it.
     *
     * Unless overridden, this will call
     * {{nsprefix}}::ErrorHandler::handleDeserializeError on @p errorHandler
     *
     * @param[in] name          The IRI of the unknown property (fully
     *                          qualified or compact)
     * @param[in] decoder       The decoder to use to read the value of the
     *                          property
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          decoding errors
     * @param path              The ObjectPath of the object
     */
    virtual void handleUnknownDecodeProperty(std::string const& name,
                                             ValueDecoder& decoder,
                                             ErrorHandler& errorHandler,
                                             ObjectPath& path);

    /// @copydoc {{ nsprefix }}::SHACLObject::link()
    virtual void linkProperties(LinkState& state);

    /**
     * @brief Chained set helper
     *
     * Helper to implement chained set in a SHACLObject derived class
     *
     * This can be called by derived objects to implement their own type-safe
     * chained set() like so:
     *
     * @code
     *  template<auto P, typename T>
     *  auto& set(T const& value) {
     *      return SHACLObject::set<P>(*this, value);
     *  }
     * @endcode
     *
     * @tparam P    Pointer to member property, which must be derived from
     *              PropertyValue
     * @tparam C    Class type of object to invoke property change on. Must be
     *              derived from SHACLObject
     * @tparam T    Value type to set. Must match the value type of @p P
     */
    template <auto P, class C, typename T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, C>::value>>
    static C& setHelper(C& o, T const& value) {
        (o.*P).set(value);
        return o;
    }

    /**
     * @brief Chained add helper
     *
     * This can be called by derived objects to implement their own type-safe
     * chained add() like so:
     *
     * @code
     *  template<auto P, typename T>
     *  auto& add(T const& value) {
     *      return SHACLObject::add<P>(*this, value);
     *  }
     * @endcode
     *
     * @tparam P    Pointer to member property, which must be derived from
     *              ListPropertyValue
     * @tparam C    Class type of object to invoke property change on. Must be
     *              derived from SHACLObject
     * @tparam T    Value type to add. Must match the value type of @p P
     */
    template <auto P, class C, typename T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, C>::value>>
    static C& addHelper(C& o, T const& value) {
        (o.*P).add(value);
        return o;
    }

   private:
    TypeBase const* mType;
    TypeIRIs mTypeIRIs;
    std::vector<PropertyValueCommon*> mProperties;

    LOCAL static TypeBase const* getIRIType(std::string const& iri);

    LOCAL static std::unordered_map<std::string, TypeBase const*>&
    getIRITypeRegistry();

    LOCAL static std::unordered_map<std::string, TypeBase const*>&
    getCompactTypeRegistry();

    // PropertyValueCommon can register new properties
    friend PropertyValueCommon::PropertyValueCommon(
        SHACLObject* owner, std::string const& iri,
        std::optional<std::string> const& compact);

    // TypeBase can register new types
    friend TypeBase;
    // friend TypeBase::TypeBase(std::string&& typeIRI,
    //                          std::optional<std::string>&& compactTypeIRI);
};

/* {{ api_def_end }} */
/* {{ ns_end }} */
/* {{ guard_end }} */

