/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

/* {{ guard_begin }} */

#include <memory>
#include <set>
#include <string>
#include <unordered_map>
#include <vector>

/* {{ api_def_begin }} */
/* {{ ns_begin }} */

class ErrorHandler;
class ListDecoder;
class ListEncoder;
class ObjectDecoder;
class ObjectPath;
class SHACLObject;
class WalkCallback;

template <class C>
class Ref;

/**
 * @brief A collection of SHACLObject
 *
 * The Object Set represents a set of objects that exist together (e.g. a
 * "Document"). When serializing, all objects in the SHACLObjectSet will be
 * serialized together.
 */
class EXPORT SHACLObjectSet {
   public:
    /// Alias for the pointer type
    using ptr = std::shared_ptr<SHACLObject>;

    /// Constructor
    SHACLObjectSet();

    /// Destructor
    virtual ~SHACLObjectSet();

    /**
     * @brief Add object to Object Set
     *
     * Adds a SHACLObject to the object set (by a reference)
     *
     * All objects added to the object set with this API are "root objects"
     * and are guaranteed to always exist in the object set and be written
     * out when encoding. All transitive object will only be written out if
     * they are referenced directly or indirectly by one of these root
     * objects.
     *
     * @note Objects added this way are added to the search index (@see
     * createIndex), but not recursively so "indirect" objects referenced by
     * the added object may not be visible until createIndex is called
     */
    void add(Ref<SHACLObject> const& ref);

    /**
     * @brief (Re)create object index
     *
     * Recursively walks through all objects in the object set and invokes
     * addIndex on them.
     *
     * Any existing indexes are deleted before being recreated
     *
     * The index affects may search operations
     *
     * Derived classes may override this to create new custom index, but
     * should always end with a call to the parent function
     */
    virtual void createIndex();

    /**
     * @brief Link object set
     *
     * Links the objects in the object set such that any reference to a
     * string IRI is replaced with a reference to the actual object if an
     * object with that IRI is found in the object set.
     *
     * Any objects with blank node IRIs have their IRIs erased.
     *
     * If multiple objects with the same IRI are found, only one is kept in
     * the object set and the rest are discarded
     *
     * @returns The set of IRIs that were "missing" (e.g. referenced by an
     * object, but no matching object was found in the object set)
     *
     * @note This will recreate the object set index first
     */
    std::set<std::string> const& link();

    /**
     * @brief Find object by ID
     *
     * Finds an object in the object set by ID
     *
     * @param[in] id    The IRI to search for
     * @param[in] dflt  The value to return if object matching @p id is
     * found
     *
     * @returns a std::shared_ptr to the object in the object set index that
     * matches @p id, or @p dflt if no match was found
     *
     * @note This function will only return objects in the index
     * @see createIndex
     */
    ptr findById(std::string const& id, ptr const& dflt = nullptr) const;

    /**
     * @brief Find objects matching type
     *
     * @returns All objects in the object set index that have type @p id
     *
     * @note This function will only return objects in the index
     * @see createIndex
     */
    std::set<ptr> const& findByType(std::string const& id) const;

    /**
     * @brief Begin iterating object
     *
     * Iterates through root object objects (those directly added with add)
     * in the object set
     */
    std::set<ptr>::const_iterator begin() const { return mObjects.begin(); }

    /**
     * @brief End iterating object
     *
     * Iterates through root object objects (those directly added with add)
     * in the object set
     */
    std::set<ptr>::const_iterator end() const { return mObjects.end(); }

    /**
     * @brief Encode object set
     *
     * Encode the objects in an object set, writing them to the output
     * ListEncoder
     */
    void encode(ListEncoder& encoder, ErrorHandler& errorHandler) const;

    /**
     * @brief Decode object set
     *
     * Decodes objects from the ListDecoder into the object set. The
     * ListDecoder must be a list of valid objects.
     */
    void decode(ListDecoder& decoder, ErrorHandler& errorHandler,
                ObjectPath& path);

    /**
     * @brief Decode single object
     *
     * Decodes a single object from the ObjectDecoder into the object set.
     */
    void decode(ObjectDecoder& decoder, ErrorHandler& errorHandler,
                ObjectPath& path);

    /**
     * @brief Walk Objects
     *
     * Walks all objects in the object set
     */
    void walk(WalkCallback const& callbacks) const;

    /**
     * @brief Check objects
     *
     * Checks all objects in ObjectSet
     *
     * @param errorHandler  The ErrorHandler to use to report any errors
     *
     * @returns true if the ObjectSet is valid, and false if not
     */
    bool checkAll(ErrorHandler& errorHandler) const;

    /**
     * @brief Context URLs
     *
     * The Context URLs used by this object set
     */
    static const std::vector<std::string> ContextURLs;

   protected:
    /**
     * @brief Add object to index
     *
     * Adds the object to all appropriate indexes
     *
     * Derived classes may override to add the object to custom index, but
     * should always invoke the parent call
     */
    virtual void addIndex(ptr const& obj);

   private:
    std::set<ptr> mObjects;
    std::unordered_map<std::string, std::set<ptr>> mObjByType;
    std::unordered_map<std::string, ptr> mObjById;
    std::set<std::string> mMissingIds;

    /**
     * @brief Internal Link
     *
     * Links the object set without re-creating the index first
     */
    LOCAL std::set<std::string> const& internalLink();

    LOCAL void decodeObject(ObjectDecoder& decoder, ErrorHandler& errorHandler,
                            ObjectPath& path);
};

/* {{ api_def_end }} */
/* {{ ns_end }} */
/* {{ guard_end }} */
