/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

/* {{ guard_begin }} */

#include <functional>
#include <optional>
#include <regex>
#include <string>
#include <unordered_set>
#include <vector>

#include "datetime.hpp"

/* {{ api_def_begin }} */
/* {{ ns_begin }} */

class ErrorHandler;
class LinkState;
class ObjectPath;
class SHACLExtensibleObjectBase;
class ValueDecoder;
class ValueEncoder;
class WalkCallback;

/**
 * @brief Base class for tracking the context of a property
 */
class EXPORT PropertyContext {
   public:
    /// Alias for the type of the context
    using Context = std::vector<std::pair<std::string, std::string>>;

    /// Constructor
    PropertyContext(Context&& = {});

    // Destructor
    virtual ~PropertyContext();

    /**
     * @brief Compact value
     *
     * @param[in] value The fully qualified IRI to compact
     *
     * @returns The compacted string for @p value based on the context. If
     * there is no compacted version of @p value, the optional will be empty
     */
    std::optional<std::string> compactValue(std::string const& value) const;

    /**
     * @brief Expand value
     *
     * @param[in] value The compacted value to expand to a fully qualified
     *                  IRI
     *
     * @returns The fully qualified IRI value for the compact string @p
     * value based on the context. If there is no expanded version of @p
     * value, the optional will be empty
     */
    std::optional<std::string> expandValue(std::string const& value) const;

   private:
    std::vector<std::pair<std::string, std::string>> mContext;
};

/**
 * @brief Regular Expression Property
 *
 * A property that can validate a string with a regular expression
 */
class EXPORT RegexProperty {
   public:
    /// Constructor
    RegexProperty(std::optional<std::regex>&& regex = {});

    /// Destructor
    virtual ~RegexProperty();

   protected:
    /**
     * @brief Check Decoded String
     *
     * Reads a string value from a ValueDecoder and validates if it is valid
     * for the property.
     *
     * @param[in] decoder       The ValueDecoder to read the string from
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the value is valid (or not a string), and false if not
     */
    bool checkDecodeString(ValueDecoder& decoder, ErrorHandler& errorHandler,
                           ObjectPath& path) const;

    /**
     * @brief Validate String Value
     *
     * Validates a string value as if it were the value of the property
     *
     * @param[in] value         The string to validate
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the string is valid, and false if not
     */
    bool validateString(std::string const& value, ErrorHandler& errorHandler,
                        ObjectPath& path) const;

   private:
    std::optional<std::regex> mRegex;
};

/**
 * @brief Base property class
 *
 * The template abstract base class for a property definition
 *
 * @tparam C    The data type for the value that the property describes
 */
template <typename C>
class Property : public PropertyContext, public RegexProperty {
   public:
    /// Constructor
    Property(std::optional<std::regex>&& regex = {},
             PropertyContext::Context&& context = {})
        : PropertyContext(std::move(context)),
          RegexProperty(std::move(regex)) {}

    /// Destructor
    virtual ~Property() {}

    Property(Property const& other) = delete;
    Property& operator=(Property const& other) = delete;
    Property(Property&& other) = delete;
    Property& operator=(Property&& other) = delete;

    /**
     * @brief Validate value
     *
     * @param[in] value         The value to validate
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the value is valid, and false if not
     */
    virtual bool validateValue(C const& value, ErrorHandler& errorHandler,
                               ObjectPath& path) const {
        return validateString(toString(value), errorHandler, path);
    }

    /**
     * @brief String representation of a value
     *
     * @returns A string representation of the value
     */
    virtual std::string toString(C const& value) const = 0;

    /**
     * @brief Encode value
     *
     * @param[in] encoder       The ValueEncoder to use to write the value
     * @param[in] value         The value to encode
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     */
    virtual void encode(ValueEncoder& encoder, C const& value,
                        ErrorHandler& errorHandler, ObjectPath& path) const = 0;

    /**
     * @brief Decode value
     *
     * @param[in] decoder       The ValueDecoder from which to read the value
     * @param[in] errorHandler  The ErrorHandler to use to report an decoding
     *                          or validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns An optional with the value of decoded item or empty if the
     * value could not be decoded
     */
    virtual std::optional<C> decode(ValueDecoder& decoder,
                                    ErrorHandler& errorHandler,
                                    ObjectPath& path) const = 0;

    /**
     * @brief Walk value
     *
     * Walks the value
     *
     * @param[in] callback  The callbacks to invoke when walking
     * @param[in] value     The value to walk
     * @param path          The ObjectPath to the value
     */
    virtual void walk(
        WalkCallback const& callback,
        std::optional<std::reference_wrapper<C const>> const& value,
        ObjectPath& path) const = 0;

    /**
     * @brief Link value
     *
     * Links the value. If the value refers to a string IRI and an object
     * exists with that IRI, it will be replaced with a pointer to the actual
     * object instance
     *
     * @param[in] state     The LinkState
     * @param[inout] value  The value to link. Will be updated if the value is
     *                      linked to an actual object instance
     */
    virtual void link(LinkState& state, C& value) const {
        // Do nothing by default. Most properties don't need to do anything to
        // link
    }
};

/**
 * @brief Definition for a string property
 */
class EXPORT StringProperty : public Property<std::string> {
   public:
    /// Constructor
    StringProperty(std::optional<std::regex>&& regex = {},
                   PropertyContext::Context&& context = {});

    /// Destructor
    virtual ~StringProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(std::string const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(std::string const& value) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, std::string const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<std::string> decode(ValueDecoder& decoder,
                                      ErrorHandler& errorHandler,
                                      ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(
        WalkCallback const& callback,
        std::optional<std::reference_wrapper<std::string const>> const& value,
        ObjectPath& path) const override;
};

/**
 * @brief Definition for an integer property
 */
class EXPORT IntegerProperty : public Property<int> {
   public:
    /// Constructor
    IntegerProperty(std::optional<std::regex>&& regex = {},
                    std::optional<int>&& min = {},
                    std::optional<int>&& max = {});

    /// Destructor
    virtual ~IntegerProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(int const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(int const& value) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, int const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<int> decode(ValueDecoder& decoder, ErrorHandler& errorHandler,
                              ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(WalkCallback const& callback,
              std::optional<std::reference_wrapper<int const>> const& value,
              ObjectPath& path) const override;

   private:
    std::optional<int> mMin;
    std::optional<int> mMax;
};

/**
 * @brief Definition for a boolean property
 */
class EXPORT BooleanProperty : public Property<bool> {
   public:
    /// Constructor
    BooleanProperty(std::optional<std::regex>&& regex = {});

    /// Destructor
    virtual ~BooleanProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(bool const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(bool const& value) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, bool const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<bool> decode(ValueDecoder& decoder,
                               ErrorHandler& errorHandler,
                               ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(WalkCallback const& callback,
              std::optional<std::reference_wrapper<bool const>> const& value,
              ObjectPath& path) const override;
};

/**
 * @brief Definition for a floating point number property
 */
class EXPORT DoubleProperty : public Property<double> {
   public:
    /// Constructor
    DoubleProperty(std::optional<std::regex>&& regex = {},
                   std::optional<double>&& min = {},
                   std::optional<double>&& max = {});

    /// Destructor
    virtual ~DoubleProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(double const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(double const& value) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, double const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<double> decode(ValueDecoder& decoder,
                                 ErrorHandler& errorHandler,
                                 ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(WalkCallback const& callback,
              std::optional<std::reference_wrapper<double const>> const& value,
              ObjectPath& path) const override;

   private:
    std::optional<double> mMin;
    std::optional<double> mMax;
};

/**
 * @brief Definition for a DateTime property
 */
class EXPORT DateTimeProperty : public Property<DateTime> {
   public:
    /// Constructor
    DateTimeProperty(std::optional<std::regex>&& regex = {});

    /// Destructor
    virtual ~DateTimeProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(DateTime const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(DateTime const& value) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, DateTime const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<DateTime> decode(ValueDecoder& decoder,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(
        WalkCallback const& callback,
        std::optional<std::reference_wrapper<DateTime const>> const& value,
        ObjectPath& path) const override;
};

/**
 * @brief Definition for a DateTimeStamp property
 */
class EXPORT DateTimeStampProperty : public DateTimeProperty {
   public:
    /// Constructor
    DateTimeStampProperty(std::optional<std::regex>&& regex = {});

    /// Destructor
    virtual ~DateTimeStampProperty();

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<DateTime> decode(ValueDecoder& decoder,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const override;
};

/**
 * @brief Definition for an enum property
 */
class EXPORT EnumProperty : public StringProperty {
   public:
    /// Constructor
    EnumProperty(std::optional<std::regex>&& regex = {},
                 std::unordered_set<std::string>&& values = {},
                 PropertyContext::Context&& context = {});

    /// Destructor
    virtual ~EnumProperty();

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(std::string const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, std::string const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<std::string> decode(ValueDecoder& decoder,
                                      ErrorHandler& errorHandler,
                                      ObjectPath& path) const override;

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(
        WalkCallback const& callback,
        std::optional<std::reference_wrapper<std::string const>> const& value,
        ObjectPath& path) const override;

   private:
    std::unordered_set<std::string> mValues;
};

/**
 * @brief Definition for a URI property
 */
class EXPORT AnyURIProperty : public StringProperty {
   public:
    /// Constructor
    AnyURIProperty(std::optional<std::regex>&& regex = {});

    /// Destructor
    virtual ~AnyURIProperty();

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(
        WalkCallback const& callback,
        std::optional<std::reference_wrapper<std::string const>> const& value,
        ObjectPath& path) const override;
};

/* {{ api_def_end }} */
/* {{ ns_end }} */
/* {{ guard_end }} */

