/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

/* {{ guard_begin }} */

#include <memory>
#include <optional>
#include <string>

#include "errorhandler.hpp"
#include "objectpath.hpp"
#include "ref.hpp"
#include "refproperty.hpp"

/* {{ api_def_begin }} */
/* {{ ns_begin }} */

class SHACLObject;
class ValueEncoder;
class WalkCallback;

/**
 * @brief The abstract base class for the value of a property
 */
class EXPORT PropertyValueCommon {
   public:
    /// Constructor
    PropertyValueCommon(SHACLObject* owner, std::string const& iri,
                        std::optional<std::string> const& compact = {});

    /// Destructor
    virtual ~PropertyValueCommon();

    PropertyValueCommon() = delete;
    PropertyValueCommon(PropertyValueCommon const& other) = delete;
    PropertyValueCommon& operator=(PropertyValueCommon const& other) = delete;
    PropertyValueCommon(PropertyValueCommon&& other) = delete;
    PropertyValueCommon& operator=(PropertyValueCommon&& other) = delete;

    /**
     * @brief Get property IRI
     *
     * @returns The fully qualified IRI of the property
     */
    std::string const& getIRI() const;

    /**
     * @brief Get compacted IRI
     *
     * @returns The compacted string representation of the IRI. If the IRI
     * has no compact representation, then the optional will be empty
     */
    std::optional<std::string> const& getCompactIRI() const;

    /**
     * @brief Check string against property IRIs
     *
     * @param[in] s     The string to check against the property IRIs
     *
     * @returns true if the property IRI or compact IRI matches the string
     */
    bool matchesIRI(std::string const& s) const;

    /**
     * @brief Encode property
     *
     * @param[in] encoder       The ValueEncoder to use when writing the
     *                          property
     * @param[in] errorHandler  The ErrorHandler to use to report any encoding
     *                          errors
     * @param path              The ObjectPath of the property
     *
     * Encodes the property
     */
    virtual void encode(ValueEncoder& encoder, ErrorHandler& errorHandler,
                        ObjectPath& path) const = 0;

    /**
     * @brief Decode property
     *
     * @param[in] decoder       The ValueDecoder to use when decoding the
     *                          property
     * @param[in] errorHandler  The ErrorHandler to use to report and decoding
     *                          errors
     * @param path              The ObjectPath of the property
     *
     * Decodes the property
     */
    virtual void decode(ValueDecoder& decoder, ErrorHandler& errorHandler,
                        ObjectPath& path) = 0;

    /**
     * @brief Should property be elided when encoding?
     *
     * An elided property will not appear in the output
     *
     * @returns true if the property should be elided when encoding
     */
    virtual bool elide() const = 0;

    /**
     * @brief Link the property
     *
     * Links the property, replacing string IRI references with references
     * to actual object instances
     */
    virtual void link(LinkState& state) = 0;

    /**
     * @brief Walk property
     *
     * Walks the property, invoking the callback for with its value
     */
    virtual void walk(WalkCallback const& callback, ObjectPath& path) const = 0;

    /**
     * @brief Check current value of the property
     *
     * Checks the value of the property.
     *
     * @param[in] errorHandler  The ErrorHandler to use if any validation
     *                          errors are encountered
     * @param path              The ObjectPath of the property
     *
     * @returns true if the property is valid and false if not
     */
    virtual bool check(ErrorHandler& errorHandler, ObjectPath& path) const = 0;

   private:
    std::string mIRI;
    std::optional<std::string> mCompactIRI;
};

/**
 * @brief Scalar property class
 *
 * Template class for a scalar property
 *
 * @tparam C    The data type of the property
 * @tparam PROP The Property class that defines the properties of the value.
 *              Must derive from Property<C>
 */
template <typename C, class PROP>
class PropertyValue : public PropertyValueCommon {
    static_assert(std::is_base_of<Property<C>, PROP>::value,
                  "template class C must inherit from Property<C>");

   public:
    /// Constructor
    template <typename... Args>
    PropertyValue(SHACLObject* owner, std::string const& iri,
                  std::optional<std::string> const& compact = {},
                  bool mandatory = false, Args&&... args)
        : PropertyValueCommon(owner, iri, compact),
          mConfig(std::forward<Args>(args)...),
          mMandatory(mandatory) {}

    /// Destructor
    virtual ~PropertyValue() {}

    /**
     * @brief Get value or default
     *
     * @param[in] alt   The value to return if the property is not set
     *
     * @returns the value of the property if the property is set, or @p alt
     * if the property is not set
     */
    C const& value_or(C const& alt) {
        if (isSet()) {
            return *mValue.get();
        }
        return alt;
    }

    /**
     * @brief Get property value
     *
     * Gets the property of the value, if set
     *
     * @returns The value of the property
     *
     * @throws std::bad_optional_access if the property is not set
     */
    C const& get() const {
        if (!isSet()) {
            throw std::bad_optional_access();
        }

        return *mValue.get();
    }

    /**
     * @brief Set property value
     *
     * Sets the value of the property the provided value
     *
     * @param[in] value     The value to set
     *
     * @throws ValidationError if the provided value is not valid for the
     * property
     */
    void set(C const& value) {
        ObjectPath path;
        set(value, DefaultErrorHandler::handler, path);
    }

    /**
     * @brief Move value into property
     *
     * Moves the value into the property
     *
     * @param[in] value     The value to move
     *
     * @throws ValidationError if the provided value is not valid for the
     * property
     */
    void set(C&& value) {
        ObjectPath path;
        set(value, DefaultErrorHandler::handler, path);
    }

    /**
     * @brief Is property Set?
     *
     * @returns true if the property has a value set, and false if not
     */
    bool isSet() const { return mValue.get(); }

    /**
     * @brief Clear property
     *
     * Clears out the value of the property so it is no longer set
     */
    void clear() { mValue.reset(); }

    /**
     * @brief Assign new value
     *
     * Assigns a new value to the property
     */
    PropertyValue& operator=(C const& value) {
        set(value);
        return *this;
    }

    /**
     * @brief Move value into the property
     *
     * Moves the value into the property
     */
    PropertyValue& operator=(C&& value) {
        set(std::move(value));
        return *this;
    }

    /**
     * @brief Assign from another property
     *
     * Assigns this property to have the same value as another property
     */
    PropertyValue& operator=(PropertyValue const& prop) {
        if (&prop == this) {
            return *this;
        }

        if (prop.isSet()) {
            set(prop.get());
        } else {
            clear();
        }
        return *this;
    }

    /**
     * @brief Get pointer to value
     *
     * @returns the pointer to value of the property, or nullptr if the
     * property is not set
     */
    C const* operator->() const { return mValue.get(); }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::encode()
    void encode(ValueEncoder& encoder, ErrorHandler& errorHandler,
                ObjectPath& path) const override {
        mConfig.encode(encoder, get(), errorHandler, path);
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::decode()
    void decode(ValueDecoder& decoder, ErrorHandler& errorHandler,
                ObjectPath& path) override {
        auto v = mConfig.decode(decoder, errorHandler, path);
        if (v.has_value()) {
            set(v.value(), errorHandler, path);
        } else {
            clear();
        }
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::elide()
    bool elide() const override { return !isSet(); }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::link()
    void link(LinkState& state) override {
        if (isSet()) {
            mConfig.link(state, *mValue.get());
        }
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::walk()
    void walk(WalkCallback const& callback, ObjectPath& path) const override {
        if (isSet()) {
            mConfig.walk(callback, std::cref(get()), path);
        } else {
            mConfig.walk(callback, {}, path);
        }
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::check()
    bool check(ErrorHandler& errorHandler, ObjectPath& path) const override {
        bool valid = true;

        if (mMandatory && !isSet()) {
            errorHandler.handleValidationError(
                getIRI() + std::string(" is required"), path);
            valid = false;
        }

        if (isSet() && !mConfig.validateValue(get(), errorHandler, path)) {
            valid = false;
        }

        return valid;
    }

    /**
     * @brief Validate value
     *
     * Validates if it value is correct for the property
     *
     * @param[in] v             The value to validate
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the value is valid for the property, and false if not
     */
    bool validateValue(C const& v, ErrorHandler& errorHandler,
                       ObjectPath& path) {
        return mConfig.validateValue(v, errorHandler, path);
    }

   private:
    std::unique_ptr<C> mValue;
    PROP mConfig;
    bool mMandatory;

    void set(C const& value, ErrorHandler& errorHandler, ObjectPath& path) {
        if (mConfig.validateValue(value, errorHandler, path)) {
            mValue.reset();
            mValue = std::make_unique<C>(value);
        }
    }

    void set(C&& value, ErrorHandler& errorHandler, ObjectPath& path) {
        if (mConfig.validateValue(value, errorHandler, path)) {
            mValue.reset();
            mValue = std::make_unique<C>(std::move(value));
        }
    }
};

/**
 * @brief Object reference property
 *
 * A short hand property for dealing with objects. Combines the API of the
 * Ref and the PropertyValue into a single class to make it a lot less
 * verbose to deal with
 *
 * @tparam C    The type of the value. Must derive from SHACLObject
 */
template <class C>
class RefPropertyValue : public PropertyValue<Ref<C>, RefProperty<C>> {
   public:
    /// Constructor
    template <typename... Args>
    RefPropertyValue(SHACLObject* owner, std::string const& iri,
                     std::optional<std::string> const& compact = {},
                     bool mandatory = false, Args&&... args)
        : PropertyValue<Ref<C>, RefProperty<C>>(owner, iri, compact, mandatory,
                                                std::forward<Args>(args)...) {}

    /// Destructor
    virtual ~RefPropertyValue() {}

    /**
     * @brief Does the property reference an object instance?
     *
     * @returns true if the property is set and references an object
     * instance
     */
    bool isObj() const { return this->isSet() && this->get().isObj(); }

    /**
     * @brief Does the property refer to an object by IRI string
     *
     * @returns true if the property is set and contains a string IRI
     * reference to an object
     */
    bool isIRI() const { return this->isSet() && this->get().isIRI(); }

    /**
     * @brief Get Pointer to object instance
     *
     * @returns The pointer to the object, or nullptr if the property does
     * not reference an object
     *
     * @see Ref<T>::get()
     */
    C* operator->() const {
        if (!isObj()) {
            return nullptr;
        }
        return this->get().obj().get();
    }

    /**
     * @brief Convert property to a reference of another type
     *
     * Converts the property to a reference of another type
     *
     * @returns A new reference to the object of the new type
     *
     * @throws std::bad_cast if the property is not set
     *
     * @see Ref<T>::asTypeRef()
     */
    template <class T>
    Ref<T> asTypeRef() const {
        if (!this->isSet()) {
            throw std::bad_cast();
        }
        return this->get().asTypeRef();
    }

    /**
     * @brief Check property object type
     *
     * Checks if the property references an object of a specific type.
     *
     * @returns true if the property is set and references an object of a
     * specific type
     *
     * @see Ref<T>::isType()
     */
    template <class T>
    bool isType() const {
        if (!this->isSet()) {
            return false;
        }
        return this->get().isType();
    }

    /**
     * @brief Get pointer to object
     *
     * @returns A shared pointer to object instance referenced by the
     * property if it references an object instance, otherwise nullptr
     *
     * @see Ref<T>::obj()
     */
    std::shared_ptr<C> obj() const {
        if (!isObj()) {
            return nullptr;
        }
        return this->get().obj();
    }

    /**
     * @brief Get IRI string
     *
     * @returns the string IRI referenced by the property, or an empty
     * string if property does not contain a string IRI
     *
     * @see Ref<T>::iri()
     */
    std::string iri() const {
        if (!isIRI()) {
            return "";
        }
        return this->get().iri();
    }

    /**
     * @brief Assign Reference
     *
     * Assigns a new reference to the property
     */
    RefPropertyValue& operator=(Ref<C> const& value) {
        this->set(value);
        return *this;
    }

    /**
     * @brief Move reference into property
     *
     * Moves a reference into the property
     */
    RefPropertyValue& operator=(Ref<C>&& value) {
        this->set(std::move(value));
        return *this;
    }

    /**
     * @brief Assign string
     *
     * Assigns a string reference to the property
     */
    RefPropertyValue& operator=(std::string const& value) {
        this->set(value);
        return *this;
    }

    /**
     * @brief Assign object pointer
     *
     * Assigns an object pointer to the property
     */
    RefPropertyValue& operator=(std::shared_ptr<C> const& value) {
        this->set(value);
        return *this;
    }
};

/**
 * @brief List property class
 *
 * Template class for a list property
 *
 * Items that are inserted using the list API (e.g.
 * {{ nsprefix }}::ListPropertyValue::insert(),
 * {{ nsprefix }}::ListPropertyValue::push_back(),
 * {{ nsprefix }}::ListPropertyValue::add()
 * will be validated at the time of insertion. However, if an item is modified
 * via an iterator, {{ nsprefix }}::ListPropertyValue::at() or
 * {{ nsprefix }}::ListPropertyValue::operator[],
 * Its new value will not be validated when it is changed. Validation can be
 * performed manually using {{ nsprefix }}::ListPropertyValue::validateValue().
 * Validation will also occur when encoding.
 *
 * @tparam C    The data type for the list items
 * @tparam PROP The Property class that defines the properties of the value.
 *              Must derive from Property<C>
 */
template <typename C, class PROP>
class ListPropertyValue : public PropertyValueCommon {
    static_assert(std::is_base_of<Property<C>, PROP>::value,
                  "template class C must inherit from Property<C>");

   public:
    /// Alias for the container type
    using container = std::vector<C>;

    /// Value contained by the list
    using value_type = C;

    /// Allocator type
    using allocator_type = typename container::allocator_type;

    /// Size type
    using size_type = typename container::size_type;

    /// Iterator difference type
    using difference_type = typename container::difference_type;

    /// Reference type
    using reference = C&;

    /// Const reference type
    using const_reference = C const&;

    /// Pointer type
    using pointer = C*;

    /// Const pointer type
    using const_pointer = C const*;

    /// Forward iterator
    using iterator = typename container::iterator;

    /// Reverse iterator
    using reverse_iterator = typename container::reverse_iterator;

    /// Forward constant iterator
    using const_iterator = typename container::const_iterator;

    /// Reverse constant iterator
    using const_reverse_iterator = typename container::const_reverse_iterator;

    /// Constructor
    template <typename... Args>
    ListPropertyValue(SHACLObject* owner, std::string const& iri,
                      std::optional<std::string> const& compact = {},
                      std::optional<std::size_t> const& minCount = {},
                      std::optional<std::size_t> const& maxCount = {},
                      Args&&... args)
        : PropertyValueCommon(owner, iri, compact),
          mConfig(std::forward<Args>(args)...),
          mMinCount(minCount),
          mMaxCount(maxCount) {}

    /// Destructor
    virtual ~ListPropertyValue() {}

    /**
     * @brief Assign initializer list
     *
     * Replaces the list items with the ones from @p ilist after validating
     * them
     *
     * @throws ValidationError if any items in the list are not valid
     */
    ListPropertyValue& operator=(std::initializer_list<C> ilist) {
        ObjectPath path;
        path.foreachItem(ilist, [&](C const& v) {
            validateValue(v, DefaultErrorHandler::handler, path);
        });

        mValue = ilist;
        return *this;
    }

    /**
     * @brief Assign list property
     *
     * Replaces the list items with the ones from @p other after validating
     * them
     *
     * @throws ValidationError if any items in the list are not valid
     */
    ListPropertyValue& operator=(ListPropertyValue const& other) {
        if (&other == this) {
            return *this;
        }

        ObjectPath path;
        path.foreachItem(other, [&](C const& v) {
            validateValue(v, DefaultErrorHandler::handler, path);
        });

        mValue = other.mValue;
        return *this;
    }

    /**
     * @brief Clear out list
     *
     * Removes all items from the list
     */
    void clear() { mValue.clear(); }

    /**
     * @brief Is empty?
     *
     * @returns true if the list has no items, and false otherwise
     */
    bool empty() const { return mValue.empty(); }

    /**
     * @brief Append item to list
     *
     * Appends the item to the list
     */
    void push_back(C const& val) { add(val); }

    /**
     * @brief Add item to list
     *
     * Adds an item to the list at an unspecified position
     */
    void add(C const& value) {
        ObjectPath path;
        add(value, DefaultErrorHandler::handler, path);
    }

    /**
     * @brief Get number of elements in the list
     *
     * @returns the number of items in the list
     */
    size_type size() const { return mValue.size(); }

    /// Forward iterator start
    auto begin() { return mValue.begin(); }

    /// Forward iterator end
    auto end() { return mValue.end(); }

    /// Forward iterator begin (constant)
    auto begin() const { return mValue.begin(); }

    /// Forward iterator end (constant)
    auto end() const { return mValue.end(); }

    /// Reverse iterator begin
    auto rbegin() { return mValue.rbegin(); }

    /// Reverse iterator end
    auto rend() { return mValue.rend(); }

    /// Reverse iterator begin (constant)
    auto rbegin() const { return mValue.rbegin(); }

    /// Reverse iterator end (constant)
    auto rend() const { return mValue.rend(); }

    /// Constant forward iterator begin
    auto cbegin() const { return mValue.cbegin(); }

    /// Constant forward iterator end
    auto cend() const { return mValue.cend(); }

    /// Constant reverse iterator begin
    auto crbegin() const { return mValue.crbegin(); }

    /// Constant reverse iterator end
    auto crend() const { return mValue.crend(); }

    /// First item in list
    auto front() { return mValue.front(); }

    /// First item in list (const)
    auto front() const { return mValue.front(); }

    /// Last item in list
    auto back() { return mValue.back(); }

    /// Last item in list (const)
    auto back() const { return mValue.back(); }

    /**
     * @brief Insert item at iterator position
     *
     * Inserts a new item in the list before @p position
     */
    auto insert(const_iterator position, C const& v) {
        ObjectPath path;
        validateValue(v, DefaultErrorHandler::handler, path);
        return mValue.insert(position, v);
    }

    /**
     * @brief Insert item at iterator position
     *
     * Moves an item into the list before @p position
     */
    auto insert(const_iterator position, C&& val) {
        ObjectPath path;
        validateValue(val, DefaultErrorHandler::handler, path);
        return mValue.insert(position, val);
    }

    /**
     * @brief Insert repeating item
     *
     * Inserts @p count copies of the item before @p position
     */
    auto insert(const_iterator position, size_type count, C const& val) {
        ObjectPath path;
        validateValue(val, DefaultErrorHandler::handler, path);
        return mValue.insert(position, count, val);
    }

    /**
     * @brief Insert items
     *
     * Inserts a list of new items before @p position
     */
    auto insert(const_iterator position, std::initializer_list<C> ilist) {
        ObjectPath path;
        path.foreachItem(ilist, [&](C const& v) {
            validateValue(v, DefaultErrorHandler::handler, path);
        });
        return mValue.insert(position, ilist);
    }

    /**
     * @brief Erase item at iterator position
     *
     * Erases the item referenced by the iterator
     */
    template <typename ITER>
    auto erase(ITER pos) {
        return mValue.erase(pos);
    }

    /**
     * @brief Erase items in range
     *
     * Removes items between [@p first and @p last)
     */
    template <typename ITER>
    auto erase(ITER first, ITER last) {
        return mValue.erase(first, last);
    }

    /**
     * @brief Get item at position
     *
     * @param[in] n     Index to get item from
     *
     * @returns The item at index @p n
     */
    auto at(size_type n) const { return mValue.at(n); }

    /**
     * @brief Get item at position
     *
     * @param[in] n     Index to get item from
     *
     * @returns The item at index @p n
     */
    auto at(size_type n) { return mValue.at(n); }

    /**
     * @brief Get item at position
     *
     * @param[in] n     Index to get item from
     *
     * @returns The item at index @p n
     */
    auto operator[](size_type n) const { return mValue[n]; }

    /**
     * @brief Get item at position
     *
     * @param[in] n     Index to get item from
     *
     * @returns The item at index @p n
     */
    auto operator[](size_type n) { return mValue[n]; }

    /**
     * @brief Validate value
     *
     * Validates if it value is correct for the list
     *
     * @param[in] v             The value to validate
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the value is valid for the property, and false if not
     */
    bool validateValue(C const& v, ErrorHandler& errorHandler,
                       ObjectPath& path) const {
        return mConfig.validateValue(v, errorHandler, path);
    }

    /**
     * @brief Validate iterator value
     *
     * Validates the value of an iterator
     *
     * @param[in] position      The iterator position to validate
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the value
     *
     * @returns true if the value is valid for the property, and false if not
     */
    bool validateValue(const_iterator position, ErrorHandler& errorHandler,
                       ObjectPath& path) const {
        return validateValue(*position, errorHandler, path);
    }

    /**
     * @brief Validate value range
     *
     * Validates all items from [@p first to @p last)
     *
     * @param[in] first         The starting position to validate (inclusive)
     * @param[in] last          The ending position to validate (exclusive)
     * @param[in] errorHandler  The ErrorHandler to use to report any
     *                          validation errors
     * @param path              The ObjectPath of the list
     *
     * @returns true if the values are valid for the property, and false if not
     */
    bool validateValue(const_iterator first, const_iterator last,
                       ErrorHandler& errorHandler, ObjectPath& path) const {
        bool valid = true;

        path.foreachItem(first, last, [&](C const& v) {
            if (!validateValue(v, errorHandler, path)) {
                valid = false;
            }
        });

        return valid;
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::encode()
    void encode(ValueEncoder& encoder, ErrorHandler& errorHandler,
                ObjectPath& path) const override {
        encoder.writeList([&](ListEncoder& listEncoder) {
            path.foreachItem(*this, [&](C const& v) {
                listEncoder.writeItem([&](ValueEncoder& e) {
                    mConfig.encode(e, v, errorHandler, path);
                });
            });
        });
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::decode()
    void decode(ValueDecoder& decoder, ErrorHandler& errorHandler,
                ObjectPath& path) override {
        clear();
        auto ret = decoder.readList([&](ListDecoder& list_decoder) {
            path.foreachListDecoder(
                list_decoder, [&](ValueDecoder& value_decoder) {
                    auto v = mConfig.decode(value_decoder, errorHandler, path);
                    if (v.has_value()) {
                        add(v.value(), errorHandler, path);
                    }
                });
        });

        if (!ret) {
            errorHandler.handleDeserializeError("Not a list", path);
        }
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::elide()
    bool elide() const override { return !size(); }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::link()
    void link(LinkState& state) override {
        for (auto&& v : mValue) {
            mConfig.link(state, v);
        }
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::walk()
    void walk(WalkCallback const& callback, ObjectPath& path) const override {
        path.foreachItem(*this, [&](C const& v) {
            mConfig.walk(callback, std::cref<C>(v), path);
        });
    }

    /// @copydoc {{ nsprefix }}::PropertyValueCommon::check()
    bool check(ErrorHandler& errorHandler, ObjectPath& path) const override {
        bool valid = true;

        if (mMinCount.has_value()) {
            if (size() < mMinCount.value()) {
                errorHandler.handleValidationError(
                    getIRI() + std::string(" requires at least ") +
                        std::to_string(mMinCount.value()) +
                        std::string(" elements"),
                    path);
                valid = false;
            }
        }

        if (mMaxCount.has_value()) {
            if (size() > mMaxCount.value()) {
                errorHandler.handleValidationError(
                    getIRI() + std::string(" cannot have more than ") +
                        std::to_string(mMaxCount.value()) +
                        std::string(" elements"),
                    path);
                valid = false;
            }
        }

        if (!validateValue(begin(), end(), errorHandler, path)) {
            valid = false;
        }

        return valid;
    }

   private:
    container mValue;
    PROP mConfig;
    std::optional<std::size_t> mMinCount;
    std::optional<std::size_t> mMaxCount;

    void add(C const& val, ErrorHandler& errorHandler, ObjectPath& path) {
        if (validateValue(val, errorHandler, path)) {
            mValue.push_back(val);
        }
    }
};

/**
 * @brief List of references property
 *
 * A short hand property for dealing with lists of objects. Combines the API
 * of the Ref and the PropertyValue into a single class to make it a lot
 * less verbose to deal with
 *
 * @tparam C    The type of the value. Must derive from SHACLObject
 */
template <class C>
class RefListPropertyValue : public ListPropertyValue<Ref<C>, RefProperty<C>> {
   public:
    /// Constructor
    template <typename... Args>
    RefListPropertyValue(SHACLObject* owner, std::string const& iri,
                         std::optional<std::string> const& compact = {},
                         std::optional<std::size_t> const& minCount = {},
                         std::optional<std::size_t> const& maxCount = {},
                         Args&&... args)
        : ListPropertyValue<Ref<C>, RefProperty<C>>(
              owner, iri, compact, minCount, maxCount,
              std::forward<Args>(args)...) {}

    /// Destructor
    virtual ~RefListPropertyValue() {}
};

/* {{ api_def_end }} */
/* {{ ns_end }} */
/* {{ guard_end }} */

