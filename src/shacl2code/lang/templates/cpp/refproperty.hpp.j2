/**
 * {#
vim: ft=cpp
#}@file
 *
 * Generated C++ bindings from a SHACL model
 *
 * {{ disclaimer }}
 *
 * SPDX-License-Identifier: MIT
 */

/* {{ guard_begin }} */

#include <optional>
#include <regex>
#include <string>

#include "decode.hpp"
#include "encode.hpp"
#include "errorhandler.hpp"
#include "link.hpp"
#include "namedindividual.hpp"
#include "property.hpp"
#include "ref.hpp"
#include "util.hpp"
#include "walk.hpp"

/* {{ api_def_begin }} */
/* {{ ns_begin }} */

class ObjectDecoder;
class ObjectPath;
class SHACLObject;
class TypeBase;

/**
 * @brief RefProperty helper class
 *
 * Helper class to work around forward declarations.
 *
 * @note Do not directly use this class
 */
class EXPORT RefPropertyHelper {
   public:
    /**
     * @brief Decode SHACL Object
     *
     * Helper to decode a SHACLObject
     */
    static std::shared_ptr<SHACLObject> decodeSHACLObject(
        ObjectDecoder& decoder, TypeBase const* type,
        ErrorHandler& errorHandler, ObjectPath& path);

    /**
     * @brief Walk SHACL Object
     *
     * Helper to walk a SHACLObject
     */
    static void walkSHACLObject(SHACLObject const* object,
                                WalkCallback const& callback, ObjectPath& path);
};

/**
 * @brief Definition for a property that references another object
 *
 * @tparam C    The class type of the property. Must be derived from
 *              SHACLObject
 */
template <class C>
class RefProperty : public Property<Ref<C>>, private RefPropertyHelper {
   public:
    /// Constructor
    RefProperty(std::optional<std::regex>&& regex = {},
                PropertyContext::Context&& context = {})
        : Property<Ref<C>>(std::move(regex), std::move(context)) {}

    /// Destructor
    virtual ~RefProperty() {}

    /// @copydoc {{ nsprefix }}::Property::validateValue()
    bool validateValue(Ref<C> const& value, ErrorHandler& errorHandler,
                       ObjectPath& path) const override {
        bool valid = Property<Ref<C>>::validateValue(value, errorHandler, path);

        if (value.isIRI()) {
            if (!isIRI(value.iri()) && !isBlankNode(value.iri())) {
                errorHandler.handleValidationError(
                    std::string("Value '") + value.iri() +
                        std::string("' is not a blank node or IRI"),
                    path);
                valid = false;
            }

            auto const* named = NamedIndividual::getFromIRI(value.iri());
            if (named && !named->getType()->isSubClassOf(&C::Type)) {
                errorHandler.handleValidationError(
                    std::string("Named individual '") + value.iri() +
                        std::string("' is not of correct type"),
                    path);
                valid = false;
            }
        }

        return valid;
    }

    /// @copydoc {{ nsprefix }}::Property::toString()
    std::string toString(Ref<C> const& value) const override {
        if (value.isObj()) {
            return "";
        }
        return value.iri();
    }

    /// @copydoc {{ nsprefix }}::Property::encode()
    void encode(ValueEncoder& encoder, Ref<C> const& value,
                ErrorHandler& errorHandler, ObjectPath& path) const override {
        if (value.isObj()) {
            value.obj()->encode(encoder, errorHandler, path);
        } else {
            encoder.writeIRI(value.iri(), this->compactValue(value.iri()));
        }
    }

    /// @copydoc {{ nsprefix }}::Property::decode()
    std::optional<Ref<C>> decode(ValueDecoder& decoder,
                                 ErrorHandler& errorHandler,
                                 ObjectPath& path) const override {
        auto iri = decoder.readIRI();
        if (iri) {
            return Ref<C>(this->expandValue(iri.value()).value_or(iri.value()));
        }

        std::shared_ptr<SHACLObject> obj = nullptr;
        bool ret = decoder.readObject([&](ObjectDecoder& obj_decoder) {
            obj = decodeSHACLObject(obj_decoder, &C::Type, errorHandler, path);
        });

        if (!ret) {
            errorHandler.handleDeserializeError("Object expected", path);
        }

        if (!ret || !obj) {
            return {};
        }

        Ref<SHACLObject> r(std::move(obj));
        return r.asTypeRef<C>();
    }

    /// @copydoc {{ nsprefix }}::Property::walk()
    void walk(WalkCallback const& callback,
              std::optional<std::reference_wrapper<Ref<C> const>> const& value,
              ObjectPath& path) const override {
        if (!value) {
            callback.refProp(path, {});
            return;
        }

        std::optional<Ref<SHACLObject>> r(value.value().get());
        bool recurse = callback.refProp(path, r);
        if (recurse && r.value().isObj()) {
            walkSHACLObject(r.value().obj().get(), callback, path);
        }
    }

    /// @copydoc {{ nsprefix }}::Property::link()
    void link(LinkState& state, Ref<C>& value) const override {
        linkRef(state, value);
    }

   private:
    // Extensible objects need to link, so allow them to access this static
    // helper
    friend SHACLExtensibleObjectBase;

    static void linkRef(LinkState& state, Ref<C>& ref) {
        if (state.objectSet) {
            if (ref.isIRI()) {
                // Convert String to object
                auto o = state.findObjById(ref.iri());

                if (o) {
                    ref = std::move(Ref<C>::fromType(o));
                } else if (state.missing) {
                    state.missing->insert(ref.iri());
                }
            } else {
                // Deduplicate object
                if (ref->_id.isSet() && !ref->_id->empty()) {
                    auto o = state.findObjById(ref->_id.get());
                    if (o) {
                        ref = std::move(Ref<C>::fromType(o));
                    }
                }
            }
        }

        // Recurse
        if (ref.isObj()) {
            ref->link(state);
        }
    }
};

/* {{ api_def_end }} */
/* {{ ns_end }} */
/* {{ guard_end }} */

