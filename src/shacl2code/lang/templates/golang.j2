// package spdx_v3_0 provides structs for SPDX 3.0
//
// {{ disclaimer }}
//
// SPDX-License-Identifier: MIT

{# helpful macros #}

{%- macro array(prop) %}
{%- if prop.max_count and prop.max_count >= 1 -%}
[]
{%- endif %}
{%- endmacro %}

{%- macro struct_props(class) %}
    {%- for parent in class.parent_ids %}
    {{ struct_props(classes.get(parent)) }}
    {%- endfor %}

        // ---------- {{ type_name(class.clsname) }} --------
    {%- for prop in class.properties %}
        {%- if include_prop(classes,class,prop) %}
        {{ struct_prop(prop) }}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{%- macro struct_funcs(base,class) %}
{%- for parent in class.parent_ids %}
{{ struct_funcs(base,classes.get(parent)) }}
{%- endfor %}

// ---------- {{ type_name(class.clsname) }} --------
{%- for prop in class.properties %}
{%- if include_prop(classes,class,prop) %}

{{ struct_getter(base,prop) }}

{{ struct_setter(base,prop) }}
{%- endif %}
{%- endfor %}
{%- endmacro %}

{%- macro interface_props(class) -%}
    {%- for parent in class.parent_ids %}
        {{ interface_name(classes.get(parent)) }}
    {%- endfor %}

    {%- for prop in class.properties %}
        {%- if include_prop(classes,class,prop) %}

{{ comment("        // ", struct_prop(prop), prop.comment) }}
        {{ interface_getter(prop) }}

        {{ interface_setter(prop) }}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{%- macro interface_constructor(class) %}
func New{{ interface_name(class) }}() {{ interface_name(class) }} {
    return &{{ struct_name(class) }}{}
}
{%- endmacro %}

{%- macro datatype(prop) %}
{%- if prop.class_id -%}
{{ export(classes.get(prop.class_id).clsname) }}
{%- else -%}
{{ DATATYPES[prop.datatype] }}
{%- endif %}
{%- endmacro %}

{%- macro interface(class) -%}
type {{ export(class.clsname) }} interface {
{%- for prop in class.properties %}
	{{ export(prop.varname) }}() {{ array(prop) }}{{ datatype(prop) }}
{%- endfor %}
}
{% endmacro %}

{%- macro struct(class) -%}
type {{ export(class.clsname) }} struct {
{%- for prop in class.properties %}
}
{%- endfor %}
{%- endmacro %}

package spdx_v3_0

// XSD types that don't have a Go equivalent
type PInt uint

func (p PInt) Check() PInt {
	if p == 0 {
		panic("0 Assignment not allowed for PInt")
	}
	return p
}

type DateTime string

type DateTimeStamp string

// Named Individuals handling

{%- for class in classes %}
{%- if class.named_individuals %}

type {{ type_name(class.clsname) }} string
var (
{%- for ind in class.named_individuals %}
    {{ type_name(class.clsname) }}{{ type_name(ind.varname) }} {{ type_name(class.clsname) }} = "{{ ind._id }}"
{%- endfor %}
)
{%- endif %}
{%- endfor %}

{% set
DATATYPES = {
    "http://www.w3.org/2001/XMLSchema#string": "string",
    "http://www.w3.org/2001/XMLSchema#anyURI": "string",
    "http://www.w3.org/2001/XMLSchema#integer": "int",
    "http://www.w3.org/2001/XMLSchema#positiveInteger": "PInt",
    "http://www.w3.org/2001/XMLSchema#nonNegativeInteger": "uint",
    "http://www.w3.org/2001/XMLSchema#boolean": "bool",
    "http://www.w3.org/2001/XMLSchema#decimal": "float64",
    "http://www.w3.org/2001/XMLSchema#dateTime": "DateTime",
    "http://www.w3.org/2001/XMLSchema#dateTimeStamp": "DateTimeStamp",
}
%}

{#var CONTEXT_URLS  [{{ context.urls|length }}]string = [{{ context.urls|length }}]string{#}
{#	{%- for url in context.urls %}"{{ url }}"{{ ',' if not loop.last }}{%- endfor %}}#}
{##}
{#// CLASSES AND INTERFACES#}

{%- for class in classes %}
{%- if not class.named_individuals %}
type {{ interface_name(class) }} interface {
    {{ interface_props(class) }}
}
{%- if not class.is_abstract %}

type {{ struct_name(class) }} struct {
{#-	{%- if class.parent_ids %}#}
{#-	{%- for parent in class.parent_ids %}#}
{#-	{{ export(classes.get(parent).clsname) }}#}
{#-	{%- endfor %}#}
{#-	{%- endif %}#}
	{{ struct_props(class) }}
{#-	{%- if class.named_individuals %}#}
{#-	ObjectRef {{ export(class.clsname) }}Ref#}
{#-	{%- endif %}#}
}

{{ interface_constructor(class) }}

{{ struct_funcs(class,class) }}
{%- endif %}
{%- endif %}
{%- endfor %}
