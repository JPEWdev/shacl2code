// package spdx_v3_0 provides structs for SPDX 3.0
//
// {{ disclaimer }}
//
// SPDX-License-Identifier: MIT

{# helpful macros #}

{%- macro array(prop) %}
{%- if prop.max_count and prop.max_count >= 1 -%}
[]
{%- endif -%}
{%- endmacro %}

{%- macro many(prop) %}
{%- if prop.max_count and prop.max_count >= 1 -%}
...
{%- endif -%}
{%- endmacro %}

{%- macro prop_type(prop) %}
{%- if prop.class_id -%}
{{ type_name(classes.get(prop.class_id).clsname) }}
{%- else -%}
{{ DATATYPES[prop.datatype] }}
{%- endif %}
{%- endmacro %}

{%- macro namedind(class) %}
type {{ type_name(class.clsname) }} struct {
	ObjRef {{ type_name(class.clsname) }}Ref
}
{%- endmacro %}

{%- macro interface(class) %}
type {{ type_name(class.clsname) }} interface {
	{% for parent in class.parent_ids %}
	{{ type_name(classes.get(parent).clsname) }}
	{% endfor %}
        {% for prop in class.properties %}
	{{ interface_method(prop.varname) }}() {{ array(prop) }}{{ prop_type(prop) }}
	Set{{ interface_method(prop.varname) }}(p {{ many(prop) }}{{ prop_type(prop) }}) error
	{% endfor %}
}
{%- endmacro %}

{%- macro struct(class) %}
type {{ struct_name(class.clsname) }} struct {
	{% for parent in class.parent_ids %}
	//-----------{{ type_name(classes.get(parent).clsname) }}--------
	{% for prop in classes.get(parent).properties %}
	{{ struct_prop_name(prop.varname) }} {{ array(prop) }}{{ prop_type(prop) }}
	{% endfor %}
	{% endfor %}
	{% if not class.named_individuals %}
	{% for prop in class.properties %}
	{{ struct_prop_name(prop.varname) }} {{ array(prop) }}{{ prop_type(prop) }}
	{% endfor %}
	{% endif %}
}
{%- endmacro %}

{%- macro constructor(class) %}
func New{{ type_name(class.clsname) }}() {{ type_name(class.clsname) }} {
    return &{{ struct_name(class.clsname) }}{}
}
{%- endmacro %}

{%- macro func(class) %}
{%- for prop in class.properties %}
func (o * {{ type_name(class.clsname) }}) {{ interface_method(prop.varname) }}() {{ prop_type(prop) }}{
        return o.{{ struct_prop_name(prop.varname) }}
}

func (o *{{ type_name(class.clsname) }}) Set{{ interface_method(prop.varname) }}(v {{ prop_type(prop) }}) error {
        o.{{ struct_prop_name(prop.varname) }} = v
        return nil
}
{%- endfor %}
{%- endmacro %}

{# go file content #}
package spdx_v{{ module }}

// NAMED INDIVIDUALS

{%- for class in classes %}
{%- if class.named_individuals %}
type {{ type_name(class.clsname) }}Ref string
var (
{%- for ind in class.named_individuals %}
    {{ type_name(class.clsname) }}{{ ind.varname }} {{ type_name(class.clsname) }}Ref = "{{ ind._id }}"
{%- endfor %}
)
{%- endif %}
{%- endfor %}

// INTERFACES

{% for class in classes %}
{% if class.named_individuals %}
{{ namedind(class) }}
{% else %}
{{ interface(class) }}
{% endif %}
{% endfor %}

// STRUCTS AND CONSTRUCTORS

{% for class in concrete_classes %}
{{ struct(class) }}
{{ constructor(class) }}
{% endfor %}

// IMPLEMENTATIONS

{% for class in concrete_classes %}
{{ func(class) }}
{% endfor %}
