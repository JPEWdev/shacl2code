// package spdx_v3_0 provides structs for SPDX 3.0
//
// {{ disclaimer }}
//
// SPDX-License-Identifier: MIT

{# helpful macros #}

{%- macro array(prop) %}
{%- if prop.max_count and prop.max_count >= 1 -%}
[]
{%- endif %}
{%- endmacro %}

{%- macro datatype(prop) %}
{%- if prop.class_id -%}
{{ export(classes.get(prop.class_id).clsname) }}
{%- else -%}
{{ DATATYPES[prop.datatype] }}
{%- endif %}
{%- endmacro %}

{% macro interface(class) -%}
type {{ export(class.clsname) }} interface {
{%- for prop in class.properties %}
	{{ export(prop.varname) }}() {{ array(prop) }}{{ datatype(prop) }}
{%- endfor %}
}
{% endmacro %}

{% macro struct(class) -%}
type {{ export(class.clsname) }} struct {
{%- for prop in class.properties %}
}
{%- endmacro %}

package spdx_v3_0

import "github.com/orsinium-labs/enum"

// XSD types that don't have a Go equivalent
type PInt uint

func (p PInt) Check() PInt {
	if p == 0 {
		panic("0 Assignment not allowed for PInt")
	}
	return p
}

type DateTime string

type DateTimeStamp string

// Named Individuals handling

{%- for class in classes %}
{%- if class.named_individuals %}
type {{ export(class.clsname) }}Ref enum.Member[string]
var (
{% for ind in class.named_individuals %}
	{{ export(class.clsname) }}{{ export(ind.varname) }} = {{ export(class.clsname) }}Ref{"{{ ind._id }}"}
{% endfor %}
)
{%- endif %}
{%- endfor %}

{% set
DATATYPES = {
    "http://www.w3.org/2001/XMLSchema#string": "string",
    "http://www.w3.org/2001/XMLSchema#anyURI": "string",
    "http://www.w3.org/2001/XMLSchema#integer": "int",
    "http://www.w3.org/2001/XMLSchema#positiveInteger": "PInt",
    "http://www.w3.org/2001/XMLSchema#nonNegativeInteger": "uint",
    "http://www.w3.org/2001/XMLSchema#boolean": "bool",
    "http://www.w3.org/2001/XMLSchema#decimal": "float64",
    "http://www.w3.org/2001/XMLSchema#dateTime": "DateTime",
    "http://www.w3.org/2001/XMLSchema#dateTimeStamp": "DateTimeStamp",
}
%}

var CONTEXT_URLS  [{{ context.urls|length }}]string = [{{ context.urls|length }}]string{
	{%- for url in context.urls %}"{{ url }}"{{ ',' if not loop.last }}{%- endfor %}}

// CLASSES AND INTERFACES

{%- for class in classes %}
// {{ export(class.clsname) }} provides the {{ export(class.clsname) }} class in the Model
type {{ export(class.clsname) }} struct {
	{%- if class.parent_ids %}
	{%- for parent in class.parent_ids %}
	{{ export(classes.get(parent).clsname) }}
	{%- endfor %}
	{%- endif %}
	{%- for prop in class.properties %}
	{{ export(prop.varname) }} {% if prop.max_count is None or prop.max_count >= 1 %}[]{% endif %}{% if prop.class_id %}{{ export(classes.get(prop.class_id).clsname) }}{% else %}{{ DATATYPES[prop.datatype] }}{% endif %}
	{%- endfor %}
	{%- if class.named_individuals %}
	ObjectRef {{ export(class.clsname) }}Ref
	{%- endif %}
}
{%- endfor %}
