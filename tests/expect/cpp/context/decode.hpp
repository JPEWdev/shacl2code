/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_DECODE_HPP
#define _SHACL2CODE_TEST_CONTEXT_DECODE_HPP

/* */

#include <cstdint>
#include <functional>
#include <optional>
#include <string>

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

class SHACLObjectSet;
class DateTime;
class ObjectDecoder;
class ListDecoder;

/**
 * @brief Decoder state
 *
 * The decoder state tracks the state of decoding into a SHACLObjectSet.
 * Decoders should make a new DecoderState object each time a new encoding
 * is started. It must be passed along to each ElementDecoder derived class
 * that is created
 */
class EXPORT DecoderState {
   public:
    /// Constructor
    DecoderState(SHACLObjectSet* objectSet = nullptr);

    /// Destructor
    virtual ~DecoderState();

    DecoderState(DecoderState const& other) = delete;
    DecoderState& operator=(DecoderState const& other) = delete;
    DecoderState(DecoderState&& other) = delete;
    DecoderState& operator=(DecoderState&& other) = delete;

    /**
     * @brief Get object set
     *
     * @returns The SHACLObjectSet being encoded
     */
    SHACLObjectSet* getObjectSet() const { return mObjectSet; }

   private:
    SHACLObjectSet* mObjectSet;
};

/**
 * @brief Element decoder
 *
 * The base class for all Decoders. Handles the common API shared be all
 * Decoders
 */
class EXPORT ElementDecoder {
   public:
   public:
    /**
     * @brief Constructor
     *
     * Creates a new ElementDecoder
     *
     * @note The ElementDencoder will keep the reference to the DecoderState,
     * so the state must exist at least as long as the Encoder
     */
    ElementDecoder(DecoderState& state);

    /// Destructor
    virtual ~ElementDecoder();

    ElementDecoder(ElementDecoder const& other) = delete;
    ElementDecoder& operator=(ElementDecoder const& other) = delete;
    ElementDecoder(ElementDecoder&& other) = delete;
    ElementDecoder& operator=(ElementDecoder&& other) = delete;

    /**
     * @brief Get state
     *
     * @returns the DecoderState for the decoder
     */
    DecoderState& getState() const { return mState; }

   private:
    DecoderState& mState;
};

/**
 * @brief Decodes a value
 *
 * Represents a value seen while decoding from the input.  A single read API
 * will be called for each ElementDecoder encountered while decoding
 */
class EXPORT ValueDecoder : public ElementDecoder {
   public:
    /**
     * @brief Decode data type
     *
     * The type of data that can be decoded using a ValueDecoder
     *
     * @note A given concrete implementation of a decoder may not be able to
     * differentiate between all of these type and may only return a subset
     */
    enum class Type : std::uint8_t {
        /// The type of data is unknown
        Unknown,
        /// The type of data is a string
        String,
        /// The type of data is a DateTime
        DateTime,
        /// The type of data is an Integer
        Integer,
        /// The type of data is an IRI
        IRI,
        /// The type of data is an Enum
        Enum,
        /// The type of data is a Boolean
        Bool,
        /// The type of data is a floating point number
        Float,
        /// The type of data is an Object
        Object,
        /// The type of data is a List
        List,
    };

    /// Constructor
    ValueDecoder(DecoderState& state);

    /// Destructor
    virtual ~ValueDecoder();

    /**
     * @brief Get value type
     *
     * @returns the type of the value
     */
    virtual Type getType() const = 0;

    /**
     * @brief Read a string
     *
     * @returns The value as a string. If the value is not a string, the
     * optional will be empty
     */
    virtual std::optional<std::string> readString() = 0;

    /**
     * @brief Read DateTime
     *
     * @returns The value as a DateTime with optional timezone. If the value is
     * not a DateTime, the optional will be empty
     */
    virtual std::optional<DateTime> readDateTime() = 0;

    /**
     * @brief Read DateTime stamp
     *
     * @returns The value as a DateTime with timezone. If the value is not a
     * DateTime with timezone, the optional will be empty
     */
    virtual std::optional<DateTime> readDateTimeStamp() = 0;

    /**
     * @brief Read integer
     *
     * @returns The value as an integer. If the value is not an integer, the
     * optional will be empty
     */
    virtual std::optional<int> readInteger() = 0;

    /**
     * @brief Read IRI
     *
     * @returns The value as a string IRI. If the value is not an IRI, the
     * optional will be empty
     */
    virtual std::optional<std::string> readIRI() = 0;

    /**
     * @brief Read enum
     *
     * @returns The value as a string Enum. If the value is not an Enum, the
     * optional will be empty
     */
    virtual std::optional<std::string> readEnum() = 0;

    /**
     * @brief Read boolean
     *
     * @returns The value as a boolean. If the value is not a boolean, the
     * optional will be empty
     */
    virtual std::optional<bool> readBool() = 0;

    /**
     * @brief Read float
     *
     * @returns The value as a floating point number. If the value is not a
     * floating point number, the optional will be empty
     */
    virtual std::optional<double> readFloat() = 0;

    /**
     * @brief Read an object
     *
     * Reads the value as an object and invokes @p f to decode it
     *
     * @param[in] f     The function to invoke with a new ObjectDecoder to
     *                  decode the object
     *
     * @returns `true` if the value was an object and @p f was invoked,
     * otherwise `false`
     */
    virtual bool readObject(std::function<void(ObjectDecoder&)> const& f) = 0;

    /**
     * @brief Read list
     *
     * Reads the value as a list and invokes @p f to decode it
     *
     * @param[in] f     The function to invoke with a new ListDecoder to
     *                  decode the list
     *
     * @returns `true` if the value was a list and @p f was invoked,
     * otherwise `false`
     */
    virtual bool readList(std::function<void(ListDecoder&)> const& f) = 0;
};

/**
 * @brief Decoder for an object
 */
class EXPORT ObjectDecoder : public ElementDecoder {
   public:
    /// Constructor
    ObjectDecoder(DecoderState& state);

    /// Destructor
    virtual ~ObjectDecoder();

    /**
     * @brief Read object type
     *
     * @returns The type of object, which may be a fully qualified IRI, a
     * blank node, or a compacted type string. If no type can be found for
     * the object, the optional will be empty
     */
    virtual std::optional<std::string> readType() = 0;

    /**
     * @brief Read object properties
     *
     * Invokes @p f for each property found in the object
     *
     * @param[in] f     Invoked for each object property found while
     * decoding the object. The property IRI and a new ValueDecoder are
     *                      passed as parameters. The property IRI may be a
     * fully qualified IRI, or a compacted IRI string.
     */
    virtual void readProperties(
        std::function<void(std::string const&, ValueDecoder&)> const& f) = 0;
};

/**
 * @brief Decoder for a list
 */
class EXPORT ListDecoder : public ElementDecoder {
   public:
    /// Constructor
    ListDecoder(DecoderState& state);

    /// Destructor
    virtual ~ListDecoder();

    /**
     * @brief Read list items
     *
     * Invokes @p f for each item in the list
     *
     * @param[in] f     Invoked with a new ValueDecoder for each item found
     *                  in the list
     */
    virtual void readItems(std::function<void(ValueDecoder&)> const& f) = 0;
};

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_DECODE_HPP
/* */
