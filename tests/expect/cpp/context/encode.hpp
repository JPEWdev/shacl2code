/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_ENCODE_HPP
#define _SHACL2CODE_TEST_CONTEXT_ENCODE_HPP

/* */

#include <functional>
#include <map>
#include <memory>
#include <optional>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

class SHACLObject;
class ObjectEncoder;
class ListEncoder;
class DateTime;

/**
 * @brief Encoding state
 *
 * The encoder state tracks the state of encoding a SHACLObjectSet.
 * Encoders should make a new EncoderState object each time a new encoding
 * is started. It must be passed along to each ElementEncoder derived class
 * that is created
 */
class EXPORT EncoderState {
   public:
    /**
     * @brief Constructor
     *
     * Creates a new EncoderState
     */
    EncoderState();

    /**
     * @brief Destructor
     *
     * Destroys the EncoderState
     */
    virtual ~EncoderState();

    EncoderState(EncoderState const& other) = delete;
    EncoderState& operator=(EncoderState const& other) = delete;
    EncoderState(EncoderState&& other) = delete;
    EncoderState& operator=(EncoderState&& other) = delete;

    /**
     * @brief Get object encoding ID
     *
     * Determines what ID should be used to serialize an object. If the
     * object has a non-blank node ID assigned by the user, it will be
     * returned. Otherwise, the object will be assigned a new blank node ID.
     *
     * @returns the ID with which the object should be serialized
     */
    std::string getObjectId(SHACLObject const& obj);

    /**
     * @brief Is object referenced?
     *
     * @returns true if the object has been marked as "referenced"
     *
     * @see addRefed()
     *
     */
    bool objectIsRefed(SHACLObject const& obj) const;

    /**
     * @brief Add object as referenced
     *
     * Marks a object as "referenced", meaning it will be in the top level
     * of the encoded output and referenced elsewhere by IRI. Any unrefed
     * objects will be encoded inline
     */
    void addRefed(std::shared_ptr<SHACLObject> obj);

    /**
     * @brief Get refed objects
     *
     * @returns the set of all referenced objects so that they can be
     * written to the top level of the output
     */
    std::set<std::shared_ptr<SHACLObject>> const& getRefed() const {
        return mRefed;
    }

    /**
     * @brief Object is written?
     *
     * @returns true if this object has already been written to the output
     *
     * @see addWritten()
     * @see removeWritten()
     */
    bool objectIsWritten(SHACLObject const& obj) const;

    /**
     * @brief Mark object as written
     *
     * Marks the object as having been written to the output. If an object
     * has already been written, any references to it by any other object
     * will use the objects IRI instead of directly encoding it.
     */
    void addWritten(SHACLObject const& obj);

    /**
     * @brief Unmark object as written
     *
     * Unmarks as object as having been written
     */
    void removeWritten(SHACLObject const& obj);

   private:
    using objectKey = uintptr_t;

    /**
     * @brief Get object key
     *
     * Given a SHACLObject, returns the key that should be used to refer to
     * it in various internal containers
     *
     * @returns The key for the object
     */
    LOCAL objectKey getObjectKey(SHACLObject const& obj) const;

    std::map<objectKey, std::string> mIdMap;
    std::set<std::shared_ptr<SHACLObject>> mRefed;
    std::unordered_set<objectKey> mIsRefed;
    std::unordered_set<objectKey> mWritten;
};

/**
 * @brief Element encoder
 *
 * The base class for all encoders. Handles the common API used by all
 * Encoders
 */
class EXPORT ElementEncoder {
   public:
    /**
     * @brief Constructor
     *
     * Creates a new ElementEncoder
     *
     * @note The ElementEncoder will keep the reference to the EncoderState, so
     * the state must exist at least as long as the Encoder
     */
    ElementEncoder(EncoderState& state);

    /// Destructor
    virtual ~ElementEncoder();

    ElementEncoder(ElementEncoder const& other) = delete;
    ElementEncoder& operator=(ElementEncoder const& other) = delete;
    ElementEncoder(ElementEncoder&& other) = delete;
    ElementEncoder& operator=(ElementEncoder&& other) = delete;

    /**
     * @brief Get encoder state
     *
     * @returns the EncoderState for the encoder
     */
    EncoderState& getState() const { return mState; }

   private:
    EncoderState& mState;
};

/**
 * @brief Encode a value in the output
 *
 * Encodes a value in the output. A single write API will be called to
 * encode a value for each ValueEncoder encountered while encoding.
 *
 * For complex types like lists or objects, writeList or writeObject
 * can be used.
 */
class EXPORT ValueEncoder : public ElementEncoder {
   public:
    /// Constructor
    ValueEncoder(EncoderState& state);

    /// Destructor
    virtual ~ValueEncoder();

    /**
     * @brief Write a string value
     *
     * Encodes a string value in the output
     */
    virtual void writeString(std::string const& value) = 0;

    /**
     * @brief Write a DateTime
     *
     * Encodes a DateTime value in the output
     */
    virtual void writeDateTime(DateTime const& value) = 0;

    /**
     * @brief Write an integer value
     *
     * Encodes an integer value in the output
     */
    virtual void writeInteger(int value) = 0;

    /**
     * @brief Write IRI
     *
     * Encodes an IRI in the output. Note that the string will be either a
     * fully qualified IRI or a blank node ID. If "compact` is provided and
     * the serialization supports compacted IRIs, it should be preferred to
     * the full IRI
     */
    virtual void writeIRI(std::string const& value,
                          std::optional<std::string> const& compact = {}) = 0;

    /**
     * @brief Write enum value IRI
     *
     * Encodes an enum value IRI in the output. Note that the string will be
     * a fully qualified IRI. If "compact" is provided and the serialization
     * supports compacted IRIs, it should be preferred to the full IRI.
     */
    virtual void writeEnum(std::string const& value,
                           std::optional<std::string> const& compact = {}) = 0;

    /**
     * @brief Write boolean
     *
     * Encodes a boolean value in the output
     */
    virtual void writeBool(bool value) = 0;

    /**
     * @brief Write float
     *
     * Encodes a floating point number in the output
     */
    virtual void writeFloat(double value) = 0;

    /**
     * @brief Write object
     *
     * Writes an object in the output. The function @p f will be invoked
     * with a new ObjectEncoder to encode the contents of the object
     *
     * @param[in] o     The object to encode
     * @param[in] id    The ID to use when encoding the object. This will
     *                  always be a valid ID (either an IRI or a blank
     * node), and should be used by the encoder instead of querying the
     * object for its ID
     * @param[in] needs_id  If `true`, the encoder must write an ID for the
     *                      object. If `false` then the encoder may omit the
     * ID (if possible)
     * @param[in] f     Function called by the encoder to encoder the
     * content of the object
     *
     * @see ObjectEncoder
     */
    virtual void writeObject(SHACLObject const& o, std::string const& id,
                             bool needs_id,
                             std::function<void(ObjectEncoder&)> const& f) = 0;

    /**
     * @brief Write list
     *
     * Invokes @p f with a new ListEncoder to write the list contents
     */
    virtual void writeList(std::function<void(ListEncoder&)> const& f) = 0;
};

/**
 * @brief Object encoder
 *
 * Encapsulates the encoding of an object to the output
 */
class EXPORT ObjectEncoder : public ElementEncoder {
   public:
    /// Constructor
    ObjectEncoder(EncoderState& state);

    /// Destructor
    virtual ~ObjectEncoder();

    /**
     * @brief Write object property
     *
     * Invokes the function @p f with a new ValueEncoder to write a property
     * for the current object
     *
     * @param[in] iri       The fully qualified IRI of the property
     * @param[in] compact   The optional compact encoding of the property
     * IRI. This should be preferred to the @p iri (if possible)
     * @param[in] f         Function called with a new ValueEncoder to
     * encode the value of the property
     */
    virtual void writeProperty(std::string const& iri,
                               std::optional<std::string> const& compact,
                               std::function<void(ValueEncoder&)> const& f) = 0;
};

/**
 * @brief List encoder
 *
 * Encapsulates the encoding of a list to the output
 */
class EXPORT ListEncoder : public ElementEncoder {
   public:
    /// Constructor
    ListEncoder(EncoderState& state);

    /// Destructor
    virtual ~ListEncoder();

    /**
     * @brief Write List Item
     *
     * Invokes @p f with a new ValueEncoder to encode an item in the list.
     * Each time writeItem is invoked, a new element will be added to the
     * encoded list
     */
    virtual void writeItem(std::function<void(ValueEncoder&)> const& f) = 0;
};

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_ENCODE_HPP
/* */
