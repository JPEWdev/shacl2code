/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_EXCEPTIONS_HPP
#define _SHACL2CODE_TEST_CONTEXT_EXCEPTIONS_HPP

/* */

#include <exception>
#include <string>

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

/**
 * @brief Path Error
 *
 * Base class for exceptions that should include the path to the object that
 * generated the failure
 */
class EXPORT PathError : public std::exception {
   public:
    /**
     * @brief Constructor
     *
     * Creates a new PathError with the provided message and path
     */
    PathError(std::string const& message, std::string const& path)
        : mMessage(message),
          mPath(path),
          mWhat(path + std::string(": ") + message) {}

    /**
     * @brief Get message
     *
     * @returns The error message with path
     */
    const char* what() const noexcept override { return mWhat.c_str(); }

    /**
     * @brief Get message
     *
     * @returns The error message without the path
     */
    std::string const& getMessage() const noexcept { return mMessage; }

    /**
     * @brief Get path
     *
     * @returns The property path of the error
     */
    std::string const& getPath() const noexcept { return mPath; }

   private:
    std::string mMessage;
    std::string mPath;
    std::string mWhat;
};

/**
 * @brief Value validation error
 *
 * This exception is raised when an invalid value is assigned to a
 * SHACLObject class property
 */
class EXPORT ValidationError : public PathError {
   public:
    /**
     * @brief Constructor
     *
     * Creates a new ValidationError with the provided message
     */
    ValidationError(std::string const& message, std::string const& path)
        : PathError(message, path) {}
};

/**
 * @brief Deserialization error
 *
 * This exception is raised when there is a problem deserializing
 */
class EXPORT DeserializeError : public PathError {
   public:
    /**
     * @brief Constructor
     *
     * Creates a new DeserializeError with the provided message
     */
    DeserializeError(std::string const& message, std::string const& path)
        : PathError(message, path) {}
};

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_EXCEPTIONS_HPP
/* */
