/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_EXTENSIBLE_HPP
#define _SHACL2CODE_TEST_CONTEXT_EXTENSIBLE_HPP

/* */

#include <map>
#include <string>
#include <variant>
#include <vector>

#include "datetime.hpp"
#include "object.hpp"
#include "ref.hpp"
#include "type.hpp"

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

class ObjectEncoder;
class ErrorHandler;
class ObjectPath;

/**
 * @brief Any property type
 *
 * Represents a property value of any possible type
 */
typedef std::variant<std::string, int, double, DateTime, Ref<SHACLObject>>
    Variant;

/**
 * @brief Base class for extensible objects
 *
 * Implements the extra APIs that need to be called by an extensible class
 *
 * @note This should not be used directy; instead the SHACLExtensibleObject
 * template class should be used
 */
class EXPORT SHACLExtensibleObjectBase {
   protected:
    /// Constructor
    SHACLExtensibleObjectBase();

    /// Destructor
    virtual ~SHACLExtensibleObjectBase();

    /**
     * @brief Get extensible property
     *
     * @returns the value of an extensible property by fully qualified IRI. If
     * a property with the name does not exist, it will be created with an
     * empty vector
     *
     * @param[in] name  The fully qualified IRI of the property
     */
    std::vector<Variant>& getExtProperty(std::string const& name);

    /**
     * @brief Encode extensible properties
     *
     * Encodes the extensible properties of the object using the ObjectEncoder
     *
     * @param[in] encoder       The ObjectEncoder to use to write out the
     *                          extensible properties
     * @param[in] errorHandler  The ErrorHandler to use to handle any encoding
     *                          errors
     * @param path              The ObjectPath of the object
     */
    void encodeExtensibleProperties(ObjectEncoder& encoder,
                                    ErrorHandler& errorHandler,
                                    ObjectPath& path) const;

    /**
     * @brief Decode extensible property
     *
     * Decodes an extensible property, adding its value to the object
     *
     * @param[in] name          The fully qualified IRI of the property
     * @param[in] decoder       The ValueDecoder to use to decode the property
     * @param[in] errorHandler  The ErrorHandler to use to handle any decoding
     *                          errors
     * @param path              The ObjectPath of the object
     */
    void decodeExtensibleProperty(std::string const& name,
                                  ValueDecoder& decoder,
                                  ErrorHandler& errorHandler, ObjectPath& path);

    /**
     * @brief Link extensible properties
     *
     * Links all extensible properties in the object, converting string IRI
     * references to references to the objects instances with that IRI as their
     * ID (if any)
     */
    void linkExtensibleProperties(LinkState& state);

   private:
    std::map<std::string, std::vector<Variant>> mExtendedProperties;

    LOCAL static void decodeExtPropertyValue(std::vector<Variant>& prop,
                                             ValueDecoder& decoder,
                                             ErrorHandler& errorHandler,
                                             ObjectPath& path);
};

/**
 * @brief Declare object as an extensible object
 *
 * This template is used to declare a class as extensible. This is done by
 * wrapping the normal parent of the class with this template, for example:
 *
 * @code
 *  class MyExtensible : public SHACLExtensibleObject<SHACLObject> {
 *      SHACL2CODE_TEST_CONTEXT_CLASS(MyExtensible, SHACLObject, false)
 *      public:
 *          // properties
 *  };
 * @endcode
 *
 * Note that even if a class uses this template class to declare that it can be
 * extensible, the class Type object still controls if the object is actually
 * extensible (@see SHACLType::isExtensible). This allows classes to be derived
 * from extensible objects, but not allow properties other than the ones they
 * have defined (e.g. the class is "closed")
 *
 * @tparam The parent class of the object, which must derive from SHACLObject
 */
template <class T>
class SHACLExtensibleObject : public T,
                              virtual private SHACLExtensibleObjectBase {
   public:
    /// Destructor
    virtual ~SHACLExtensibleObject() {}

    /**
     * @copydoc ::test_context::SHACLExtensibleObjectBase::getExtProperty()
     */
    std::vector<Variant>& getExtProperty(std::string const& name) {
        return SHACLExtensibleObjectBase::getExtProperty(name);
    }

   protected:
    /// @copydoc ::test_context::SHACLObject::encodeProperties()
    void encodeProperties(ObjectEncoder& encoder, ErrorHandler& errorHandler,
                          ObjectPath& path) const override {
        T::encodeProperties(encoder, errorHandler, path);
        if (this->getType().isExtensible()) {
            encodeExtensibleProperties(encoder, errorHandler, path);
        }
    }

    /// @copydoc ::test_context::SHACLObject::handleUnknownDecodeProperty()
    void handleUnknownDecodeProperty(std::string const& name,
                                     ValueDecoder& decoder,
                                     ErrorHandler& errorHandler,
                                     ObjectPath& path) override {
        if (this->getType().isExtensible()) {
            decodeExtensibleProperty(name, decoder, errorHandler, path);
        } else {
            T::handleUnknownDecodeProperty(name, decoder, errorHandler, path);
        }
    }

    /// @copydoc ::test_context::SHACLObject::linkProperties()
    void linkProperties(LinkState& state) override {
        T::linkProperties(state);
        if (this->getType().isExtensible()) {
            linkExtensibleProperties(state);
        }
    }

    /// Constructor
    SHACLExtensibleObject(TypeBase const* type,
                          SHACLObject::TypeIRIs const& typeIRIs)
        : SHACLExtensibleObjectBase(), T(type, typeIRIs) {}
};

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_EXTENSIBLE_HPP
/* */
