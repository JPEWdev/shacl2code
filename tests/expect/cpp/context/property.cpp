/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

#include <functional>
#include <optional>
#include <regex>
#include <string>
#include <unordered_set>
#include <vector>

#include "datetime.hpp"
#include "decode.hpp"
#include "encode.hpp"
#include "errorhandler.hpp"
#include "namedindividual.hpp"
#include "objectpath.hpp"
#include "property.hpp"
#include "walk.hpp"

/* */
namespace test_context {
/* */

using std::string_literals::operator""s;

// PropertyContext
PropertyContext::PropertyContext(PropertyContext::Context&& context)
    : mContext(std::move(context)) {}
PropertyContext::~PropertyContext() {}

std::optional<std::string> PropertyContext::compactValue(
    std::string const& value) const {
    for (auto const& v : mContext) {
        if (v.first == value) {
            return v.second;
        }
    }
    auto const* named = NamedIndividual::getFromIRI(value);
    if (named) {
        return named->getCompactIRI();
    }

    return {};
}

std::optional<std::string> PropertyContext::expandValue(
    std::string const& value) const {
    for (auto const& v : mContext) {
        if (v.second == value) {
            return v.first;
        }
    }

    auto const* named = NamedIndividual::getFromCompact(value);
    if (named) {
        return named->getIRI();
    }

    return {};
}

// RegexProperty
RegexProperty::RegexProperty(std::optional<std::regex>&& regex)
    : mRegex(std::move(regex)) {}
RegexProperty::~RegexProperty() {}

bool RegexProperty::checkDecodeString(ValueDecoder& decoder,
                                      ErrorHandler& errorHandler,
                                      ObjectPath& path) const {
    auto v = decoder.readString();
    if (v) {
        return validateString(v.value(), errorHandler, path);
    }
    return true;
}

bool RegexProperty::validateString(std::string const& value,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const {
    bool valid = true;
    if (mRegex) {
        if (!std::regex_search(value, mRegex.value())) {
            errorHandler.handleValidationError(
                std::string("Value ") + value +
                    std::string(" does not match regex"),
                path);
            valid = false;
        }
    }

    return valid;
}

// StringProperty
StringProperty::StringProperty(std::optional<std::regex>&& regex,
                               PropertyContext::Context&& context)
    : Property<std::string>(std::move(regex), std::move(context)) {}

StringProperty::~StringProperty() {}

bool StringProperty::validateValue(std::string const& value,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const {
    return Property<std::string>::validateValue(value, errorHandler, path);
}

std::string StringProperty::toString(std::string const& value) const {
    return value;
}

void StringProperty::encode(ValueEncoder& encoder, std::string const& value,
                            ErrorHandler& errorHandler,
                            ObjectPath& path) const {
    encoder.writeString(value);
}

std::optional<std::string> StringProperty::decode(ValueDecoder& decoder,
                                                  ErrorHandler& errorHandler,
                                                  ObjectPath& path) const {
    auto v = decoder.readString();
    if (!v) {
        errorHandler.handleDeserializeError("String expected", path);
    } else {
        validateString(v.value(), errorHandler, path);
    }
    return v;
}

void StringProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<std::string const>> const& value,
    ObjectPath& path) const {
    callback.stringProp(path, value);
}

// IntegerProperty
IntegerProperty::IntegerProperty(std::optional<std::regex>&& regex,
                                 std::optional<int>&& min,
                                 std::optional<int>&& max)
    : Property<int>(std::move(regex)),
      mMin(std::move(min)),
      mMax(std::move(max)) {}

IntegerProperty::~IntegerProperty() {}

bool IntegerProperty::validateValue(int const& value,
                                    ErrorHandler& errorHandler,
                                    ObjectPath& path) const {
    bool valid = true;

    if (!Property<int>::validateValue(value, errorHandler, path)) {
        valid = false;
    }

    if (mMin.has_value()) {
        if (value < mMin.value()) {
            errorHandler.handleValidationError("Value is less than minimum",
                                               path);
            valid = false;
        }
    }

    if (mMax.has_value()) {
        if (value > mMax.value()) {
            errorHandler.handleValidationError("Value is greater than minimum",
                                               path);
            valid = false;
        }
    }

    return valid;
}

std::string IntegerProperty::toString(int const& value) const {
    return std::to_string(value);
}

void IntegerProperty::encode(ValueEncoder& encoder, int const& value,
                             ErrorHandler& errorHandler,
                             ObjectPath& path) const {
    encoder.writeInteger(value);
}

std::optional<int> IntegerProperty::decode(ValueDecoder& decoder,
                                           ErrorHandler& errorHandler,
                                           ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readInteger();
    if (!v.has_value()) {
        errorHandler.handleDeserializeError("Integer expected", path);
    }
    return v;
}

void IntegerProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<int const>> const& value,
    ObjectPath& path) const {
    if (value.has_value()) {
        callback.integerProp(path, value.value().get());
    } else {
        callback.integerProp(path, {});
    }
}

// BooleanProperty
BooleanProperty::BooleanProperty(std::optional<std::regex>&& regex)
    : Property<bool>(std::move(regex)) {}

BooleanProperty::~BooleanProperty() {}

bool BooleanProperty::validateValue(bool const& value,
                                    ErrorHandler& errorHandler,
                                    ObjectPath& path) const {
    return Property<bool>::validateValue(value, errorHandler, path);
}

std::string BooleanProperty::toString(bool const& value) const {
    return std::to_string(value);
}

void BooleanProperty::encode(ValueEncoder& encoder, bool const& value,
                             ErrorHandler& errorHandler,
                             ObjectPath& path) const {
    encoder.writeBool(value);
}

std::optional<bool> BooleanProperty::decode(ValueDecoder& decoder,
                                            ErrorHandler& errorHandler,
                                            ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readBool();
    if (!v.has_value()) {
        errorHandler.handleDeserializeError("Boolean expected", path);
    }
    return v;
}

void BooleanProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<bool const>> const& value,
    ObjectPath& path) const {
    if (value.has_value()) {
        callback.booleanProp(path, value.value().get());
    } else {
        callback.booleanProp(path, {});
    }
}

// DoubleProperty
DoubleProperty::DoubleProperty(std::optional<std::regex>&& regex,
                               std::optional<double>&& min,
                               std::optional<double>&& max)
    : Property<double>(std::move(regex)),
      mMin(std::move(min)),
      mMax(std::move(max)) {}

DoubleProperty::~DoubleProperty() {}

bool DoubleProperty::validateValue(double const& value,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const {
    bool valid = true;

    if (!Property<double>::validateValue(value, errorHandler, path)) {
        valid = false;
    }

    if (mMin.has_value()) {
        if (value < mMin.value()) {
            errorHandler.handleValidationError("Value is less than minimum",
                                               path);
            valid = false;
        }
    }

    if (mMax.has_value()) {
        if (value > mMax.value()) {
            errorHandler.handleValidationError("Value is greater than minimum",
                                               path);
            valid = false;
        }
    }

    return valid;
}

std::string DoubleProperty::toString(double const& value) const {
    return std::to_string(value);
}

void DoubleProperty::encode(ValueEncoder& encoder, double const& value,
                            ErrorHandler& errorHandler,
                            ObjectPath& path) const {
    encoder.writeFloat(value);
}

std::optional<double> DoubleProperty::decode(ValueDecoder& decoder,
                                             ErrorHandler& errorHandler,
                                             ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readFloat();
    if (!v.has_value()) {
        errorHandler.handleDeserializeError("Floating point number expected",
                                            path);
    }
    return v;
}

void DoubleProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<double const>> const& value,
    ObjectPath& path) const {
    if (value.has_value()) {
        callback.doubleProp(path, value.value().get());
    } else {
        callback.doubleProp(path, {});
    }
}

// DateTimeProperty
DateTimeProperty::DateTimeProperty(std::optional<std::regex>&& regex)
    : Property<DateTime>(std::move(regex)) {}

DateTimeProperty::~DateTimeProperty() {}

bool DateTimeProperty::validateValue(DateTime const& value,
                                     ErrorHandler& errorHandler,
                                     ObjectPath& path) const {
    return Property<DateTime>::validateValue(value, errorHandler, path);
}

std::string DateTimeProperty::toString(DateTime const& value) const {
    return value.toString();
}

void DateTimeProperty::encode(ValueEncoder& encoder, DateTime const& value,
                              ErrorHandler& errorHandler,
                              ObjectPath& path) const {
    encoder.writeDateTime(value);
}

std::optional<DateTime> DateTimeProperty::decode(ValueDecoder& decoder,
                                                 ErrorHandler& errorHandler,
                                                 ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readDateTime();
    if (!v) {
        errorHandler.handleDeserializeError("Datetime expected", path);
    }
    return v;
}

void DateTimeProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<DateTime const>> const& value,
    ObjectPath& path) const {
    callback.dateTimeProp(path, value);
}

// DateTimeStampProperty
DateTimeStampProperty::DateTimeStampProperty(std::optional<std::regex>&& regex)
    : DateTimeProperty(std::move(regex)) {}

DateTimeStampProperty::~DateTimeStampProperty() {}

std::optional<DateTime> DateTimeStampProperty::decode(
    ValueDecoder& decoder, ErrorHandler& errorHandler, ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readDateTimeStamp();
    if (!v) {
        errorHandler.handleDeserializeError("Datetime with timezone expected",
                                            path);
    }
    return v;
}

// EnumProperty
EnumProperty::EnumProperty(std::optional<std::regex>&& regex,
                           std::unordered_set<std::string>&& values,
                           PropertyContext::Context&& context)
    : StringProperty(std::move(regex), std::move(context)),
      mValues(std::move(values)) {}
EnumProperty::~EnumProperty() {}

bool EnumProperty::validateValue(std::string const& value,
                                 ErrorHandler& errorHandler,
                                 ObjectPath& path) const {
    bool valid = true;

    if (!StringProperty::validateValue(value, errorHandler, path)) {
        valid = false;
    }

    if (mValues.find(value) == mValues.end()) {
        errorHandler.handleValidationError("Not a valid enum value", path);
        valid = false;
    }

    return valid;
}

void EnumProperty::encode(ValueEncoder& encoder, std::string const& value,
                          ErrorHandler& errorHandler, ObjectPath& path) const {
    encoder.writeEnum(value, compactValue(value));
}

std::optional<std::string> EnumProperty::decode(ValueDecoder& decoder,
                                                ErrorHandler& errorHandler,
                                                ObjectPath& path) const {
    if (!checkDecodeString(decoder, errorHandler, path)) {
        return {};
    }

    auto v = decoder.readEnum();
    if (!v) {
        errorHandler.handleDeserializeError("Enum expected", path);
        return {};
    }

    return expandValue(v.value()).value_or(v.value());
}

void EnumProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<std::string const>> const& value,
    ObjectPath& path) const {
    callback.enumProp(path, value);
}

// AnyURIProperty
AnyURIProperty::AnyURIProperty(std::optional<std::regex>&& regex)
    : StringProperty(std::move(regex)) {}
AnyURIProperty::~AnyURIProperty() {}

void AnyURIProperty::walk(
    WalkCallback const& callback,
    std::optional<std::reference_wrapper<std::string const>> const& value,
    ObjectPath& path) const {
    callback.anyURIProp(path, value);
}

/* */
}
/* */
