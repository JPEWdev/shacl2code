/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_REF_HPP
#define _SHACL2CODE_TEST_CONTEXT_REF_HPP

/* */

#include <memory>
#include <variant>

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

class SHACLObject;

/**
 * @brief A reference to a SHACLObject
 *
 * A reference can either be a pointer an actual instance of a SHACLObject
 * derived object, or a string IRI that references a object by its
 * ::test_context::SHACLObject::_id
 *
 * @see ::test_context::SHACLObject::_id
 *
 * @tparam C    The Class which the Ref will reference. Must be derived from
 *              SHACLObject
 */
template <class C>
class Ref {
    static_assert(std::is_base_of<SHACLObject, C>::value,
                  "template class C must inherit from SHACLObject");

   public:
    /// Alias for the std::variant value of a reference
    using Value = std::variant<std::string, std::shared_ptr<C>>;

    // Ref
    /**
     * @brief Copy constructor
     *
     * Constructs a new Ref that is a copy of another
     */
    Ref(Ref const& other) : mValue(other.mValue) {}

    /**
     * @brief Move constructor
     *
     * Creates a new reference by moving
     */
    Ref(Ref&& other) : mValue(std::move(other.mValue)) {}

    /**
     * @brief Conversion from a reference of a derived type
     *
     * Created a reference from a derived type (upcast)
     *
     * Downcasting is not allowed
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       std::is_convertible<T*, C*>::value>>
    Ref(Ref<T> const& other)
        : mValue(std::move(other.template asTypeVariant<C>())) {}

    /**
     * @brief Move assignment operator
     *
     * Moves the value from one reference to another by assignment
     */
    Ref& operator=(Ref&& other) {
        mValue = std::move(other.mValue);
        return *this;
    }

    /**
     * @brief Copy assignment
     *
     * Assigns a new value to the reference that is a copy of another reference
     */
    Ref& operator=(Ref const& other) {
        mValue = other.mValue;
        return *this;
    }

    /**
     * @brief Copy conversion from a reference of a derived type
     *
     * Copies the value from a reference of any derived type (upcast)
     *
     * Downcasting is not allowed
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       std::is_convertible<T*, C*>::value>>
    Ref& operator=(Ref<T> const& other) {
        mValue = other.template asTypeVariant<C>();
        return *this;
    }

    // String
    /**
     * @brief Create new reference from a string
     *
     * Creates a new reference as a string
     */
    Ref(std::string const& iri) : mValue(iri) {}

    /**
     * @brief Assign string value
     *
     * Assigns a new string reference to the reference
     */
    Ref& operator=(std::string const& iri) {
        mValue = iri;
        return *this;
    }

    /**
     * @brief Move string value
     *
     * Moves a new string value into the reference
     */
    Ref& operator=(std::string&& iri) {
        mValue = iri;
        return *this;
    }

    // Shared Ptr

    /**
     * @brief Create a new reference from an object pointer
     *
     * Creates a new reference to an object instance
     */
    Ref(std::shared_ptr<C> const& ptr) : mValue(ptr) {}

    /**
     * @brief Create new reference from an object pointer
     *
     * Creates a new reference by moving an object pointer
     */
    Ref(std::shared_ptr<C>&& ptr) : mValue(std::move(ptr)) {}

    /**
     * @brief Assign object pointer
     *
     * Assigns a new object pointer to the reference
     */
    Ref& operator=(std::shared_ptr<C> const& ptr) {
        mValue = ptr;
        return *this;
    }

    /**
     * @brief Move object pointer
     *
     * Moves a new object pointer into the reference
     */
    Ref& operator=(std::shared_ptr<C>&& ptr) {
        mValue = std::move(ptr);
        return *this;
    }

    /**
     * @brief Copy from a pointer
     *
     * Copies the value of the pointer which may point to any derived type
     * (upcast)
     *
     * Downcasting is not allowed
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       std::is_convertible<T*, C*>::value>>
    Ref& operator=(std::shared_ptr<T> const& ptr) {
        mValue = convertPtr<T, C>(ptr);
        return *this;
    }

    /**
     * @brief Is the reference an object?
     *
     * @returns true if the reference refers to an actual object instance, and
     * false if it refers to an IRI
     */
    bool isObj() const {
        return std::holds_alternative<std::shared_ptr<C>>(mValue);
    }

    /**
     * @brief Is the reference an IRI?
     *
     * @returns true if the reference refers to an IRI, and false if it refers
     * to an actual object instance
     */
    bool isIRI() const { return std::holds_alternative<std::string>(mValue); }

    /**
     * @brief Get value
     *
     * @returns the value of the reference as a std::variant
     */
    Value const& value() const { return mValue; }

    /**
     * @brief Get object pointer
     *
     * @returns A shared pointer to the referenced object instance
     *
     * @throws std::bad_variant_access if the Ref does not refer to an actual
     * object instance
     */
    std::shared_ptr<C> const& obj() const {
        return std::get<std::shared_ptr<C>>(mValue);
    }

    /**
     * @brief Get IRI
     *
     * @returns The referenced string IRI
     *
     * @throws std::bad_variant_access if the Ref does not refer to a string
     * IRI reference
     */
    std::string const& iri() const { return std::get<std::string>(mValue); }

    /**
     * @brief Get object pointer
     *
     * Short hand for getting a pointer to the referenced object instance.
     *
     * @throws std::bad_variant_access if the reference doesn't refer to
     * an object instance
     */
    C* operator->() const { return obj().get(); }

    /**
     * @brief Cast reference to another type
     *
     * Creates a new reference to the object, casting it to another type.
     * The new type may be either a parent class or a derived class.
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the object is not an instance of the new type)
     *
     * @see isType()
     */
    template <class T>
    Ref<T> asTypeRef() const {
        if (isIRI()) {
            return Ref<T>(iri());
        }
        return asTypePtr<T>();
    }

    /**
     * @brief Cast reference to a variant of another type
     *
     * Creates a variant value, casting it to another type. The new type may
     * be either a parent class or a derived class.
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the object is not an instance of the new type)
     *
     * @see isType()
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    std::variant<std::string, std::shared_ptr<T>> asTypeVariant() const {
        if (isIRI()) {
            return iri();
        }

        return asTypePtr<T>();
    }

    /**
     * @brief Cast object to pointer of another type
     *
     * Creates a new object pointer, casting it to another type. The new type
     * may be either a parent class or a derived class.
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the object is not an instance of the new type)
     *
     * @throws std::bad_variant_access if the Ref does not refer to an actual
     * object instance
     *
     * @see isType()
     * @see isObj()
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    std::shared_ptr<T> asTypePtr() const {
        return convertPtr<C, T>(obj());
    }

    /**
     * @brief Create reference from reference of another type
     *
     * Casts the reference so it is of type C. The source type can be either a
     * base type or a derived type of the target (upcast or downcast)
     *
     * @returns A reference of type C
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the provided reference cannot be converted to type C)
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    static Ref<C> fromType(Ref<T> const& ref) {
        return fromType(ref.value());
    }

    /**
     * @brief Create a reference from a variant of another type
     *
     * Casts the variant so it is of type C. The source type can be either a
     * base type or a derived type of the target (upcast or downcast)
     *
     * @returns A reference of type C
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the provided variant cannot be converted to type C)
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    static Ref<C> fromType(
        std::variant<std::string, std::shared_ptr<T>> const& value) {
        if (std::holds_alternative<std::string>(value)) {
            return Ref<C>(std::get<std::string>(value));
        }
        return Ref<C>(convertPtr<T, C>(std::get<std::shared_ptr<T>>(value)));
    }

    /**
     * @brief Create a reference from a pointer of another type
     *
     * Casts the pointer so it is of type C. The source type can be either a
     * base type or a derived type of the target (upcast or downcast)
     *
     * @returns A reference of type C
     *
     * @throws std::bad_cast if the conversion cannot be done successfully
     * (e.g. the provided pointer cannot be converted to type C)
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    static Ref<C> fromType(std::shared_ptr<T> const& ptr) {
        return Ref<C>(convertPtr<T, C>(ptr));
    }

    /**
     * @brief Check if a reference is of a given type
     *
     * @returns if the referenced object is of another type. If true,
     * asTypeRef(), asTypeVariant(), or asTypePtr() can be used to convert the
     * object
     *
     * @see asTypeRef()
     * @see asTypeVariant()
     * @see asTypePtr()
     */
    template <class T,
              class = std::enable_if_t<std::is_base_of<SHACLObject, T>::value &&
                                       (std::is_convertible<T*, C*>::value ||
                                        std::is_convertible<C*, T*>::value)>>
    bool isType() const {
        if constexpr (!std::is_base_of<C, T>::value &&
                      !std::is_base_of<T, C>::value) {
            return false;
        }

        if (isIRI()) {
            return true;
        }

        return dynamic_cast<T*>(obj().get());
    }

   private:
    template <class FROM, class TO>
    static std::shared_ptr<TO> convertPtr(std::shared_ptr<FROM> const& ptr) {
        if constexpr (std::is_convertible<FROM*, TO*>::value) {
            return std::static_pointer_cast<TO>(ptr);
        } else {
            auto p = std::dynamic_pointer_cast<TO>(ptr);
            if (!p.get()) {
                throw std::bad_cast();
            }
            return p;
        }
    }

    /// The value of the reference
    Value mValue;
};

/**
 * @brief Create object
 *
 * Constructs a new SHACLObject derived object and returns a reference to it
 *
 * @returns A Ref to the created object
 */
template <class C>
Ref<C> make_obj() {
    return Ref<C>(std::make_shared<C>());
}

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_REF_HPP
/* */
