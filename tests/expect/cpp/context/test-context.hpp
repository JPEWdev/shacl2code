/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

// clang-format off
#ifndef _SHACL2CODE_TEST_CONTEXT_HPP
#define _SHACL2CODE_TEST_CONTEXT_HPP
// clang-format on

/* */
#include "api.hpp"
#include "datetime.hpp"
#include "decode.hpp"
#include "encode.hpp"
#include "errorhandler.hpp"
#include "exceptions.hpp"
#include "extensible.hpp"
#include "link.hpp"
#include "namedindividual.hpp"
#include "object.hpp"
#include "objectpath.hpp"
#include "objectset.hpp"
#include "prop.hpp"
#include "property.hpp"
#include "propertyvalue.hpp"
#include "ref.hpp"
#include "refproperty.hpp"
#include "type.hpp"
#include "util.hpp"
#include "walk.hpp"
/* */

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

/**
 * @defgroup test-context_concrete_classes test-context Concrete Classes
 *
 * These are the classes that can be directly instantiated in your code,
 * usually by invoking ::test_context::make_obj()
 */

// clang-format off

/**
 * @brief Abstract class constructor definition
 *
 * @note This is for internal use only
 */
#define SHACL2CODE_TEST_CONTEXT_CONSTRUCTOR_ABSTRACT_true(name) name() = delete

/**
 * @brief Concrete class constructor definition
 *
 * @note This is for internal use only
 */
#define SHACL2CODE_TEST_CONTEXT_CONSTRUCTOR_ABSTRACT_false(name) name() : name(&name::Type) {}

/**
 * @brief Define a TEST-CONTEXT class
 *
 * This should be the first thing used in the class body to register it as a
 * class:
 *
 * @code
 *
 *  class MyClass : public MyParent {
 *      SHACL2CODE_TEST_CONTEXT_CLASS(MyClass, MyParent, false)
 *      public:
 *          // Defined properties here
 *  };
 *
 * @endcode
 */
#define SHACL2CODE_TEST_CONTEXT_CLASS(name, parent, abstract) \
    public: \
        using TypeClass = class SHACLType<name, parent, abstract>; \
        static const TypeClass Type; \
        SHACL2CODE_TEST_CONTEXT_CONSTRUCTOR_ABSTRACT_##abstract(name); \
        virtual ~name(); \
        template<auto P, typename T> \
        auto& set(T const& value) { return SHACLObject::setHelper<P>(*this, value); } \
        template<auto P, typename T> \
        auto& add(T const& value) { return SHACLObject::addHelper<P>(*this, value); } \
    protected: \
        name(TypeBase const* type, SHACLObject::TypeIRIs const& typeIRIs = {}); \
        name(SHACLObject::TypeIRIs const& typeIRIs) : name(&name::Type, typeIRIs) {} ; \
    private: \
        friend TypeClass;

// Auto-Generated Classes
class abstract_class;
class abstract_sh_class;
class abstract_spdx_class;
class concrete_class;
class concrete_sh_class;
class concrete_spdx_class;
class enumType;
class extensible_abstract_class;
class id_prop_class;
class inherited_id_prop_class;
class link_class;
class link_derived_class;
class node_kind_blank;
class node_kind_iri;
class node_kind_iri_or_blank;
class non_shape_class;
class parent_class;
class required_abstract;
class test_another_class;
class test_class;
class test_class_required;
class test_derived_class;
class uses_extensible_abstract_class;
class aaa_derived_class;
class derived_node_kind_iri;
class extensible_class;
/**
 * @brief abstract_class
 *
 * IRI: http://example.org/abstract-class
 *
 * Compact IRI: abstract-class
 *
 * An Abstract class
 *
 *
 * This class is abstract
 */
class EXPORT abstract_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(abstract_class, SHACLObject, true)
   public:

    // Properties
};

/**
 * @brief abstract_sh_class
 *
 * IRI: http://example.org/abstract-sh-class
 *
 * Compact IRI: abstract-sh-class
 *
 *
 *
 *
 * This class is abstract
 */
class EXPORT abstract_sh_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(abstract_sh_class, SHACLObject, true)
   public:

    // Properties
};

/**
 * @brief abstract_spdx_class
 *
 * IRI: http://example.org/abstract-spdx-class
 *
 * Compact IRI: abstract-spdx-class
 *
 * An Abstract class using the SPDX type
 *
 *
 * This class is abstract
 */
class EXPORT abstract_spdx_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(abstract_spdx_class, SHACLObject, true)
   public:

    // Properties
};

/**
 * @brief concrete_class
 *
 * IRI: http://example.org/concrete-class
 *
 * Compact IRI: concrete-class
 *
 * A concrete class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<concrete_class>();
 *
 * @endcode
 */
class EXPORT concrete_class : public
    abstract_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(concrete_class, abstract_class, false)
   public:

    // Properties
};

/**
 * @brief concrete_sh_class
 *
 * IRI: http://example.org/concrete-sh-class
 *
 * Compact IRI: concrete-sh-class
 *
 * A concrete class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<concrete_sh_class>();
 *
 * @endcode
 */
class EXPORT concrete_sh_class : public
    abstract_sh_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(concrete_sh_class, abstract_sh_class, false)
   public:

    // Properties
};

/**
 * @brief concrete_spdx_class
 *
 * IRI: http://example.org/concrete-spdx-class
 *
 * Compact IRI: concrete-spdx-class
 *
 * A concrete class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<concrete_spdx_class>();
 *
 * @endcode
 */
class EXPORT concrete_spdx_class : public
    abstract_spdx_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(concrete_spdx_class, abstract_spdx_class, false)
   public:

    // Properties
};

/**
 * @brief enumType
 *
 * IRI: http://example.org/enumType
 *
 * Compact IRI: enumType
 *
 * An enumerated type
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<enumType>();
 *
 * @endcode
 */
class EXPORT enumType : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(enumType, SHACLObject, false)
   public:
    // Named Individuals
    /**
     * @brief foo
     *
     * IRI: http://example.org/enumType/foo
     *
     * The foo value of enumType
     */
    static const NamedIndividual foo;
    /**
     * @brief bar
     *
     * IRI: http://example.org/enumType/bar
     *
     * The bar value of enumType
     */
    static const NamedIndividual bar;
    /**
     * @brief nolabel
     *
     * IRI: http://example.org/enumType/nolabel
     *
     * This value has no label
     */
    static const NamedIndividual nolabel;

    // Properties
};

/**
 * @brief extensible_abstract_class
 *
 * IRI: http://example.org/extensible-abstract-class
 *
 * Compact IRI: extensible-abstract-class
 *
 * An extensible abstract class
 *
 *
 * This class is abstract
 */
class EXPORT extensible_abstract_class : public
    SHACLExtensibleObject<SHACLObject> {
   SHACL2CODE_TEST_CONTEXT_CLASS(extensible_abstract_class, SHACLExtensibleObject<SHACLObject>, true)
   public:

    // Properties
};

/**
 * @brief id_prop_class
 *
 * IRI: http://example.org/id-prop-class
 *
 * Compact IRI: id-prop-class
 *
 * A class with an ID alias
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<id_prop_class>();
 *
 * @endcode
 */
class EXPORT id_prop_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(id_prop_class, SHACLObject, false)
   public:

    // Properties
};

/**
 * @brief inherited_id_prop_class
 *
 * IRI: http://example.org/inherited-id-prop-class
 *
 * Compact IRI: inherited-id-prop-class
 *
 * A class that inherits its idPropertyName from the parent
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<inherited_id_prop_class>();
 *
 * @endcode
 */
class EXPORT inherited_id_prop_class : public
    id_prop_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(inherited_id_prop_class, id_prop_class, false)
   public:

    // Properties
};

/**
 * @brief link_class
 *
 * IRI: http://example.org/link-class
 *
 * Compact IRI: link-class
 *
 * A class to test links
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<link_class>();
 *
 * @endcode
 */
class EXPORT link_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(link_class, SHACLObject, false)
   public:

    // Properties
    /**
     * @brief link_class_extensible
     *
     * IRI: http://example.org/link-class-extensible
     *
     * Compact IRI: link-class-extensible
     *
     * A link to an extensible-class
     */
    Prop::Ref<extensible_class> _link_class_extensible;
    /**
     * @brief link_class_link_list_prop
     *
     * IRI: http://example.org/link-class-link-list-prop
     *
     * Compact IRI: link-class-link-list-prop
     *
     * A link-class list property
     */
    Prop::RefList<link_class> _link_class_link_list_prop;
    /**
     * @brief link_class_link_prop
     *
     * IRI: http://example.org/link-class-link-prop
     *
     * Compact IRI: link-class-link-prop
     *
     * A link-class property
     */
    Prop::Ref<link_class> _link_class_link_prop;
    /**
     * @brief link_class_link_prop_no_class
     *
     * IRI: http://example.org/link-class-link-prop-no-class
     *
     * Compact IRI: link-class-link-prop-no-class
     *
     * A link-class property with no sh:class
     */
    Prop::Ref<link_class> _link_class_link_prop_no_class;
};

/**
 * @brief link_derived_class
 *
 * IRI: http://example.org/link-derived-class
 *
 * Compact IRI: link-derived-class
 *
 * A class derived from link-class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<link_derived_class>();
 *
 * @endcode
 */
class EXPORT link_derived_class : public
    link_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(link_derived_class, link_class, false)
   public:

    // Properties
};

/**
 * @brief node_kind_blank
 *
 * IRI: http://example.org/node-kind-blank
 *
 * Compact IRI: node-kind-blank
 *
 * A class that must be a blank node
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<node_kind_blank>();
 *
 * @endcode
 */
class EXPORT node_kind_blank : public
    link_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(node_kind_blank, link_class, false)
   public:

    // Properties
};

/**
 * @brief node_kind_iri
 *
 * IRI: http://example.org/node-kind-iri
 *
 * Compact IRI: node-kind-iri
 *
 * A class that must be an IRI
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<node_kind_iri>();
 *
 * @endcode
 */
class EXPORT node_kind_iri : public
    link_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(node_kind_iri, link_class, false)
   public:

    // Properties
};

/**
 * @brief node_kind_iri_or_blank
 *
 * IRI: http://example.org/node-kind-iri-or-blank
 *
 * Compact IRI: node-kind-iri-or-blank
 *
 * A class that can be either a blank node or an IRI
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<node_kind_iri_or_blank>();
 *
 * @endcode
 */
class EXPORT node_kind_iri_or_blank : public
    link_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(node_kind_iri_or_blank, link_class, false)
   public:

    // Properties
};

/**
 * @brief non_shape_class
 *
 * IRI: http://example.org/non-shape-class
 *
 * Compact IRI: non-shape-class
 *
 * A class that is not a nodeshape
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<non_shape_class>();
 *
 * @endcode
 */
class EXPORT non_shape_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(non_shape_class, SHACLObject, false)
   public:

    // Properties
};

/**
 * @brief parent_class
 *
 * IRI: http://example.org/parent-class
 *
 * Compact IRI: parent-class
 *
 * The parent class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<parent_class>();
 *
 * @endcode
 */
class EXPORT parent_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(parent_class, SHACLObject, false)
   public:

    // Properties
};

/**
 * @brief required_abstract
 *
 * IRI: http://example.org/required-abstract
 *
 * Compact IRI: required-abstract
 *
 * A class with a mandatory abstract class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<required_abstract>();
 *
 * @endcode
 */
class EXPORT required_abstract : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(required_abstract, SHACLObject, false)
   public:

    // Properties
    /**
     * @brief required_abstract_abstract_class_prop
     *
     * IRI: http://example.org/required-abstract/abstract-class-prop
     *
     * Compact IRI: required-abstract/abstract-class-prop
     *
     * A required abstract class property
     */
    Prop::Ref<abstract_class> _required_abstract_abstract_class_prop;
};

/**
 * @brief test_another_class
 *
 * IRI: http://example.org/test-another-class
 *
 * Compact IRI: test-another-class
 *
 * Another class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<test_another_class>();
 *
 * @endcode
 */
class EXPORT test_another_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(test_another_class, SHACLObject, false)
   public:

    // Properties
};

/**
 * @brief test_class
 *
 * IRI: http://example.org/test-class
 *
 * Compact IRI: test-class
 *
 * The test class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<test_class>();
 *
 * @endcode
 */
class EXPORT test_class : public
    parent_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(test_class, parent_class, false)
   public:
    // Named Individuals
    /**
     * @brief named
     *
     * IRI: http://example.org/test-class/named
     *
     *
     */
    static const NamedIndividual named;

    // Properties
    /**
     * @brief encode
     *
     * IRI: http://example.org/encode
     *
     * Compact IRI: encode
     *
     * A property that conflicts with an existing SHACLObject property
     */
    Prop::String _encode;
    /**
     * @brief import
     *
     * IRI: http://example.org/import
     *
     * Compact IRI: import
     *
     * A property that is a keyword
     */
    Prop::String _import;
    /**
     * @brief test_class_anyuri_prop
     *
     * IRI: http://example.org/test-class/anyuri-prop
     *
     * Compact IRI: test-class/anyuri-prop
     *
     * a URI
     */
    Prop::AnyURI _test_class_anyuri_prop;
    /**
     * @brief test_class_boolean_prop
     *
     * IRI: http://example.org/test-class/boolean-prop
     *
     * Compact IRI: test-class/boolean-prop
     *
     * a boolean property
     */
    Prop::Boolean _test_class_boolean_prop;
    /**
     * @brief test_class_class_list_prop
     *
     * IRI: http://example.org/test-class/class-list-prop
     *
     * Compact IRI: test-class/class-list-prop
     *
     * A test-class list property
     */
    Prop::RefList<test_class> _test_class_class_list_prop;
    /**
     * @brief test_class_class_prop
     *
     * IRI: http://example.org/test-class/class-prop
     *
     * Compact IRI: test-class/class-prop
     *
     * A test-class property
     */
    Prop::Ref<test_class> _test_class_class_prop;
    /**
     * @brief test_class_class_prop_no_class
     *
     * IRI: http://example.org/test-class/class-prop-no-class
     *
     * Compact IRI: test-class/class-prop-no-class
     *
     * A test-class property with no sh:class
     */
    Prop::Ref<test_class> _test_class_class_prop_no_class;
    /**
     * @brief test_class_datetime_list_prop
     *
     * IRI: http://example.org/test-class/datetime-list-prop
     *
     * Compact IRI: test-class/datetime-list-prop
     *
     * A datetime list property
     */
    Prop::DateTimeList _test_class_datetime_list_prop;
    /**
     * @brief test_class_datetime_scalar_prop
     *
     * IRI: http://example.org/test-class/datetime-scalar-prop
     *
     * Compact IRI: test-class/datetime-scalar-prop
     *
     * A scalar datetime property
     */
    Prop::DateTime _test_class_datetime_scalar_prop;
    /**
     * @brief test_class_datetimestamp_scalar_prop
     *
     * IRI: http://example.org/test-class/datetimestamp-scalar-prop
     *
     * Compact IRI: test-class/datetimestamp-scalar-prop
     *
     * A scalar dateTimeStamp property
     */
    Prop::DateTimeStamp _test_class_datetimestamp_scalar_prop;
    /**
     * @brief test_class_enum_list_prop
     *
     * IRI: http://example.org/test-class/enum-list-prop
     *
     * Compact IRI: test-class/enum-list-prop
     *
     * A enum list property
     */
    Prop::EnumList _test_class_enum_list_prop;
    /**
     * @brief test_class_enum_prop
     *
     * IRI: http://example.org/test-class/enum-prop
     *
     * Compact IRI: test-class/enum-prop
     *
     * A enum property
     */
    Prop::Enum _test_class_enum_prop;
    /**
     * @brief test_class_enum_prop_no_class
     *
     * IRI: http://example.org/test-class/enum-prop-no-class
     *
     * Compact IRI: test-class/enum-prop-no-class
     *
     * A enum property with no sh:class
     */
    Prop::Enum _test_class_enum_prop_no_class;
    /**
     * @brief test_class_float_prop
     *
     * IRI: http://example.org/test-class/float-prop
     *
     * Compact IRI: test-class/float-prop
     *
     * a float property
     */
    Prop::Double _test_class_float_prop;
    /**
     * @brief test_class_integer_prop
     *
     * IRI: http://example.org/test-class/integer-prop
     *
     * Compact IRI: test-class/integer-prop
     *
     * a non-negative integer
     */
    Prop::Integer _test_class_integer_prop;
    /**
     * @brief named_property
     *
     * IRI: http://example.org/test-class/named-property
     *
     * Compact IRI: test-class/named-property
     *
     * A named property
     */
    Prop::String _named_property;
    /**
     * @brief test_class_non_shape
     *
     * IRI: http://example.org/test-class/non-shape
     *
     * Compact IRI: test-class/non-shape
     *
     * A class with no shape
     */
    Prop::Ref<non_shape_class> _test_class_non_shape;
    /**
     * @brief test_class_nonnegative_integer_prop
     *
     * IRI: http://example.org/test-class/nonnegative-integer-prop
     *
     * Compact IRI: test-class/nonnegative-integer-prop
     *
     * a non-negative integer
     */
    Prop::Integer _test_class_nonnegative_integer_prop;
    /**
     * @brief test_class_positive_integer_prop
     *
     * IRI: http://example.org/test-class/positive-integer-prop
     *
     * Compact IRI: test-class/positive-integer-prop
     *
     * A positive integer
     */
    Prop::Integer _test_class_positive_integer_prop;
    /**
     * @brief test_class_regex
     *
     * IRI: http://example.org/test-class/regex
     *
     * Compact IRI: test-class/regex
     *
     * A regex validated string
     */
    Prop::String _test_class_regex;
    /**
     * @brief test_class_regex_datetime
     *
     * IRI: http://example.org/test-class/regex-datetime
     *
     * Compact IRI: test-class/regex-datetime
     *
     * A regex dateTime
     */
    Prop::DateTime _test_class_regex_datetime;
    /**
     * @brief test_class_regex_datetimestamp
     *
     * IRI: http://example.org/test-class/regex-datetimestamp
     *
     * Compact IRI: test-class/regex-datetimestamp
     *
     * A regex dateTimeStamp
     */
    Prop::DateTimeStamp _test_class_regex_datetimestamp;
    /**
     * @brief test_class_regex_list
     *
     * IRI: http://example.org/test-class/regex-list
     *
     * Compact IRI: test-class/regex-list
     *
     * A regex validated string list
     */
    Prop::StringList _test_class_regex_list;
    /**
     * @brief test_class_string_list_no_datatype
     *
     * IRI: http://example.org/test-class/string-list-no-datatype
     *
     * Compact IRI: test-class/string-list-no-datatype
     *
     * A string list property with no sh:datatype
     */
    Prop::StringList _test_class_string_list_no_datatype;
    /**
     * @brief test_class_string_list_prop
     *
     * IRI: http://example.org/test-class/string-list-prop
     *
     * Compact IRI: test-class/string-list-prop
     *
     * A string list property
     */
    Prop::StringList _test_class_string_list_prop;
    /**
     * @brief test_class_string_scalar_prop
     *
     * IRI: http://example.org/test-class/string-scalar-prop
     *
     * Compact IRI: test-class/string-scalar-prop
     *
     * A scalar string propery
     */
    Prop::String _test_class_string_scalar_prop;
};

/**
 * @brief test_class_required
 *
 * IRI: http://example.org/test-class-required
 *
 * Compact IRI: test-class-required
 *
 *
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<test_class_required>();
 *
 * @endcode
 */
class EXPORT test_class_required : public
    test_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(test_class_required, test_class, false)
   public:

    // Properties
    /**
     * @brief test_class_required_string_list_prop
     *
     * IRI: http://example.org/test-class/required-string-list-prop
     *
     * Compact IRI: test-class/required-string-list-prop
     *
     * A required string list property
     */
    Prop::StringList _test_class_required_string_list_prop;
    /**
     * @brief test_class_required_string_scalar_prop
     *
     * IRI: http://example.org/test-class/required-string-scalar-prop
     *
     * Compact IRI: test-class/required-string-scalar-prop
     *
     * A required scalar string property
     */
    Prop::String _test_class_required_string_scalar_prop;
};

/**
 * @brief test_derived_class
 *
 * IRI: http://example.org/test-derived-class
 *
 * Compact IRI: test-derived-class
 *
 * A class derived from test-class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<test_derived_class>();
 *
 * @endcode
 */
class EXPORT test_derived_class : public
    test_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(test_derived_class, test_class, false)
   public:

    // Properties
    /**
     * @brief test_derived_class_string_prop
     *
     * IRI: http://example.org/test-derived-class/string-prop
     *
     * Compact IRI: test-derived-class/string-prop
     *
     * A string property in a derived class
     */
    Prop::String _test_derived_class_string_prop;
};

/**
 * @brief uses_extensible_abstract_class
 *
 * IRI: http://example.org/uses-extensible-abstract-class
 *
 * Compact IRI: uses-extensible-abstract-class
 *
 * A class that uses an abstract extensible class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<uses_extensible_abstract_class>();
 *
 * @endcode
 */
class EXPORT uses_extensible_abstract_class : public
    SHACLObject {
   SHACL2CODE_TEST_CONTEXT_CLASS(uses_extensible_abstract_class, SHACLObject, false)
   public:

    // Properties
    /**
     * @brief uses_extensible_abstract_class_prop
     *
     * IRI: http://example.org/uses-extensible-abstract-class/prop
     *
     * Compact IRI: uses-extensible-abstract-class/prop
     *
     * A property that references and abstract extensible class
     */
    Prop::Ref<extensible_abstract_class> _uses_extensible_abstract_class_prop;
};

/**
 * @brief aaa_derived_class
 *
 * IRI: http://example.org/aaa-derived-class
 *
 * Compact IRI: aaa-derived-class
 *
 * Derived class that sorts before the parent to test ordering
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<aaa_derived_class>();
 *
 * @endcode
 */
class EXPORT aaa_derived_class : public
    parent_class {
   SHACL2CODE_TEST_CONTEXT_CLASS(aaa_derived_class, parent_class, false)
   public:

    // Properties
};

/**
 * @brief derived_node_kind_iri
 *
 * IRI: http://example.org/derived-node-kind-iri
 *
 * Compact IRI: derived-node-kind-iri
 *
 * A class that derives its nodeKind from parent
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<derived_node_kind_iri>();
 *
 * @endcode
 */
class EXPORT derived_node_kind_iri : public
    node_kind_iri {
   SHACL2CODE_TEST_CONTEXT_CLASS(derived_node_kind_iri, node_kind_iri, false)
   public:

    // Properties
};

/**
 * @brief extensible_class
 *
 * IRI: http://example.org/extensible-class
 *
 * Compact IRI: extensible-class
 *
 * An extensible class
 *
 *
 * @ingroup test-context_concrete_classes
 *
 * Example:
 * @code
 *  auto o = make_obj<extensible_class>();
 *
 * @endcode
 */
class EXPORT extensible_class : public
    SHACLExtensibleObject<link_class> {
   SHACL2CODE_TEST_CONTEXT_CLASS(extensible_class, SHACLExtensibleObject<link_class>, false)
   public:

    // Properties
    /**
     * @brief extensible_class_property
     *
     * IRI: http://example.org/extensible-class/property
     *
     * Compact IRI: extensible-class/property
     *
     * An extensible property
     */
    Prop::String _extensible_class_property;
    /**
     * @brief extensible_class_required
     *
     * IRI: http://example.org/extensible-class/required
     *
     * Compact IRI: extensible-class/required
     *
     * A required extensible property
     */
    Prop::String _extensible_class_required;
};


// clang-format on

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */

#endif  // _SHACL2CODE_TEST_CONTEXT_HPP
