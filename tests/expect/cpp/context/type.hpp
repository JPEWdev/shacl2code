/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

/* */
#ifndef _SHACL2CODE_TEST_CONTEXT_TYPE_HPP
#define _SHACL2CODE_TEST_CONTEXT_TYPE_HPP

/* */

#include <memory>
#include <optional>
#include <string>

/* */
#ifndef DOXYGEN_SKIP
#include "api.hpp"
// These are so that we don't have to use Jinja templates below since that messes up the formatting
#define EXPORT SHACL2CODE_TEST_CONTEXT_API
#define LOCAL  SHACL2CODE_TEST_CONTEXT_LOCAL
#endif // DOXYGEN_SKIP

/* */
/* */
namespace test_context {
/* */

class SHACLObject;
class SHACLExtensibleObjectBase;

template <class T>
class SHACLExtensibleObject;

/**
 * @brief Node IRI
 *
 * The type of IRI allowed for a node
 */
enum class NodeKind : int {
    /// Only a blank node is allowed
    BlankNode,
    /// Only a fully qualified IRI is allowed
    IRI,
    /// A blank node or a fully qualified IRI is allowed
    BlankNodeOrIRI,
};

/**
 * @brief Type class base
 *
 * The abstract base class for a type definition
 */
class EXPORT TypeBase {
   public:
    /// Constructor
    TypeBase(std::string&& typeIRI,
             std::optional<std::string>&& compactTypeIRI);

    /// Destructor
    virtual ~TypeBase();

    /**
     * @brief Get ID alias
     *
     * @returns The ID alias string if they type has one, otherwise an empty
     * optional
     */
    virtual std::optional<std::string> const& getIDAlias() const = 0;

    /**
     * @brief Get node kind
     *
     * @returns The NodeKind required by the type
     */
    virtual NodeKind getNodeKind() const = 0;

    /**
     * @brief Is type extensible?
     *
     * @returns true if the type is extensible, and false if not
     */
    virtual bool isExtensible() const = 0;

    /**
     * @brief Is type abstract?
     *
     * @returns true if the type is abstract and false if not
     */
    virtual bool isAbstract() const = 0;

    /**
     * @brief Type is subclass of IRI
     *
     * @returns true if this type is the given type IRI string, or is a
     * subclass of the type IRI string
     */
    virtual bool isSubClassOf(std::string const& iri) const = 0;

    /**
     * @brief Type is subclass of another type
     *
     * @returns true if this type is a subclass of the provided TypeBase
     */
    bool isSubClassOf(TypeBase const* type) const;

   protected:
    friend class SHACLObject;

    // These can only be called by SHACLObject or derived classes. General
    // users shouldn't call this because the actual type of a SHACLObject might
    // be different (e.g. if it's extensible)

    /**
     * @brief Get type IRI
     *
     * @returns the fully qualified IRI for the type
     */
    std::string const& getTypeIRI() const { return mTypeIRI; }

    /**
     * @brief Get compact type IRI
     *
     * @returns the compacted type IRI for the type, or an empty std::optional
     * if the type has no compact IRI
     */
    std::optional<std::string> const& getCompactTypeIRI() const {
        return mCompactTypeIRI;
    }

    /**
     * @brief Create object
     *
     * Creates a new object of this type
     *
     * @returns a pointer to the newly created object, or nullptr of the type
     * is abstract
     */
    virtual std::shared_ptr<SHACLObject> create() const = 0;

    /**
     * @brief Create extensible object
     *
     * Creates a new extensible object. The object will report its type ID as
     * the provided IRI string.
     *
     * @returns a pointer to the create object, or nulltpr if this type is not
     * extensible
     *
     * @note The typeIRI is not checked to ensure it doesn't conflict with an
     * existing type
     *
     * @param[in] typeIRI   The type IRI that the created object will report
     *
     * @see SHACLObject::getTypeIRI
     */
    virtual std::shared_ptr<SHACLObject> createExtensible(
        std::string const& typeIRI) const = 0;

   private:
    std::string mTypeIRI;
    std::optional<std::string> mCompactTypeIRI;
};

/**
 * @brief Object type definition
 *
 * Every SHACL Object will have a class type defined using this template, and a
 * singleton instance of that class that describes the type properties of the
 * class. This also registers the class with the IRI type system so the class
 * can be decoded correctly.
 *
 * For the most part, end users do not need to deal with this as the
 * SHACL2CODE_TEST_CONTEXT_CLASS macro takes care of it
 *
 * @tparam C        The class for which the type is being defined
 * @tparam PARENT   The parent class of the defined class
 * @tparam ABSTRACT true if the class is abstract, and false if not
 */
template <class C, class PARENT, bool ABSTRACT>
class SHACLType : public TypeBase {
   private:
    static constexpr bool parentIsSHACLObject =
        std::is_same_v<PARENT, SHACLObject> ||
        std::is_same_v<PARENT, SHACLExtensibleObject<SHACLObject>>;

   public:
    /// Constructor
    SHACLType(std::string&& typeIRI,
              std::optional<std::string>&& compactTypeIRI,
              std::optional<std::string>&& IDAlias,
              std::optional<NodeKind>&& nodeKind,
              std::optional<bool>&& isExtensible)
        : TypeBase(std::move(typeIRI), std::move(compactTypeIRI)),
          mIDAlias(std::move(IDAlias)),
          mNodeKind(std::move(nodeKind)),
          mIsExtensible(std::move(isExtensible)) {}

    /// Destructor
    virtual ~SHACLType() {}

    /// @copydoc ::test_context::TypeBase::getIDAlias()
    std::optional<std::string> const& getIDAlias() const override {
        if (mIDAlias.has_value()) {
            return mIDAlias;
        }

        if constexpr (parentIsSHACLObject) {
            // Known to be empty
            return mIDAlias;
        } else {
            return PARENT::Type.getIDAlias();
        }
    }

    /// @copydoc ::test_context::TypeBase::getNodeKind()
    NodeKind getNodeKind() const override {
        if (mNodeKind.has_value()) {
            return mNodeKind.value();
        }

        if constexpr (parentIsSHACLObject) {
            return NodeKind::BlankNodeOrIRI;
        } else {
            return PARENT::Type.getNodeKind();
        }
    }

    /// @copydoc ::test_context::TypeBase::isExtensible()
    bool isExtensible() const override {
        if constexpr (!std::is_base_of<SHACLExtensibleObjectBase, C>::value) {
            return false;
        }

        if (mIsExtensible.has_value()) {
            return mIsExtensible.value();
        }

        if constexpr (parentIsSHACLObject) {
            return false;
        } else {
            return PARENT::Type.isExtensible();
        }
    }

    /// @copydoc ::test_context::TypeBase::isAbstract()
    bool isAbstract() const override { return ABSTRACT; }

    /// @copydoc ::test_context::TypeBase::isSubClassOf()
    bool isSubClassOf(std::string const& iri) const override {
        if (iri == getTypeIRI()) {
            return true;
        }
        auto const& c = getCompactTypeIRI();
        if (c.has_value() && iri == c.value()) {
            return true;
        }

        if constexpr (parentIsSHACLObject) {
            return false;
        } else {
            return PARENT::Type.isSubClassOf(iri);
        }
    }

   protected:
    /// @copydoc ::test_context::TypeBase::create()
    std::shared_ptr<SHACLObject> create() const override {
        if constexpr (ABSTRACT) {
            return nullptr;
        } else {
            return std::make_shared<C>();
        }
    }

    /// @copydoc ::test_context::TypeBase::createExtensible()
    std::shared_ptr<SHACLObject> createExtensible(
        std::string const& typeIRI) const override {
        // NOTE: This function should not be called for any known IRI type,
        // as it does not check for abstract classes. Only an unregistered
        // IRI should passed as the argument
        if (!isExtensible()) {
            return nullptr;
        }
        return std::shared_ptr<C>(new C(
            std::optional<std::pair<std::string, std::optional<std::string>>>(
                {typeIRI, {}})));
    }

   private:
    std::optional<std::string> mIDAlias;
    std::optional<NodeKind> mNodeKind;
    std::optional<bool> mIsExtensible;
};

/* */
#undef EXPORT
#undef LOCAL

/* */
/* */
}
/* */
/* */
#endif // _SHACL2CODE_TEST_CONTEXT_TYPE_HPP
/* */
