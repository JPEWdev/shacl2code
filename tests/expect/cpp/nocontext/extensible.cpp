/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

#include <map>
#include <string>
#include <variant>
#include <vector>

#include "datetime.hpp"
#include "extensible.hpp"
#include "object.hpp"
#include "ref.hpp"
#include "type.hpp"

/* */
namespace test {
/* */

using std::string_literals::operator""s;

#ifndef DOXYGEN_SKIP
// template needed to safely call std::visit on a variant, see:
// https://stackoverflow.com/questions/14637356/static-assert-fails-compilation-even-though-template-function-is-called-nowhere
template <class>
inline constexpr bool always_false_v = false;
#endif

// SHACLExtensibleObjectBase
SHACLExtensibleObjectBase::SHACLExtensibleObjectBase() {}
SHACLExtensibleObjectBase::~SHACLExtensibleObjectBase() {}

std::vector<Variant>& SHACLExtensibleObjectBase::getExtProperty(
    std::string const& name) {
    auto r = mExtendedProperties.insert({name, std::vector<Variant>()});
    return r.first->second;
}

void SHACLExtensibleObjectBase::encodeExtensibleProperties(
    ObjectEncoder& encoder, ErrorHandler& errorHandler,
    ObjectPath& path) const {
    for (auto const& p : mExtendedProperties) {
        auto const& v = p.second;
        if (!v.size()) {
            continue;
        }
        path.pushMember(p.first, [&] {
            encoder.writeProperty(p.first, {}, [&](ValueEncoder& prop_encoder) {
                prop_encoder.writeList([&](ListEncoder& list_encoder) {
                    path.foreachItem(v, [&](auto const& variant) {
                        list_encoder.writeItem([&](ValueEncoder& item_encoder) {
                            std::visit(
                                [&](auto&& value) {
                                    using T = std::decay_t<decltype(value)>;

                                    if constexpr (std::is_same_v<T,
                                                                 std::string>) {
                                        item_encoder.writeString(value);

                                    } else if constexpr (std::is_same_v<T,
                                                                        int>) {
                                        item_encoder.writeInteger(value);

                                    } else if constexpr (std::is_same_v<
                                                             T, double>) {
                                        item_encoder.writeFloat(value);

                                    } else if constexpr (std::is_same_v<
                                                             T, DateTime>) {
                                        item_encoder.writeDateTime(value);

                                    } else if constexpr (
                                        std::is_same_v<T, Ref<SHACLObject>>) {
                                        if (value.isObj()) {
                                            value.obj()->encode(item_encoder,
                                                                errorHandler,
                                                                path);
                                        } else {
                                            item_encoder.writeIRI(value.iri(),
                                                                  {});
                                        }

                                    } else {
                                        static_assert(always_false_v<T>,
                                                      "Not all possible "
                                                      "types handled");
                                    }
                                },
                                variant);
                        });
                    });
                });
            });
        });
    }
}

void SHACLExtensibleObjectBase::decodeExtensibleProperty(
    std::string const& name, ValueDecoder& decoder, ErrorHandler& errorHandler,
    ObjectPath& path) {
    auto& p = getExtProperty(name);

    path.pushMember(name, [&] {
        if (decoder.getType() == ValueDecoder::Type::List) {
            decoder.readList([&](ListDecoder& list_decoder) {
                path.foreachListDecoder(
                    list_decoder, [&](ValueDecoder& item_decoder) {
                        decodeExtPropertyValue(p, item_decoder, errorHandler,
                                               path);
                    });
            });
        } else {
            decodeExtPropertyValue(p, decoder, errorHandler, path);
        }
    });
}

void SHACLExtensibleObjectBase::linkExtensibleProperties(LinkState& state) {
    for (auto& p : mExtendedProperties) {
        for (auto& variant : p.second) {
            auto* r = std::get_if<Ref<SHACLObject>>(&variant);
            if (r) {
                RefProperty<SHACLObject>::linkRef(state, *r);
            }
        }
    }
}

void SHACLExtensibleObjectBase::decodeExtPropertyValue(
    std::vector<Variant>& prop, ValueDecoder& value, ErrorHandler& errorHandler,
    ObjectPath& path) {
    switch (value.getType()) {
        case ValueDecoder::Type::String:
            prop.push_back(value.readString().value());
            break;

        case ValueDecoder::Type::DateTime:
            prop.push_back(value.readDateTime().value());
            break;

        case ValueDecoder::Type::Integer:
            prop.push_back(value.readInteger().value());
            break;

        case ValueDecoder::Type::IRI:
            prop.push_back(value.readIRI().value());
            break;

        case ValueDecoder::Type::Enum:
            prop.push_back(value.readEnum().value());
            break;

        case ValueDecoder::Type::Bool:
            prop.push_back(value.readBool().value());
            break;

        case ValueDecoder::Type::Float:
            prop.push_back(value.readFloat().value());
            break;

        case ValueDecoder::Type::Object: {
            std::shared_ptr<SHACLObject> obj = nullptr;
            bool ret = value.readObject([&](ObjectDecoder& obj_decoder) {
                obj = SHACLObject::decode(obj_decoder, nullptr, errorHandler,
                                          path);
            });

            if (!ret) {
                errorHandler.handleDeserializeError("Object expected"s, path);
            }

            if (!ret || !obj) {
                return;
            }

            Ref<SHACLObject> r(std::move(obj));
            prop.push_back(std::move(r));
            break;
        }

        case ValueDecoder::Type::List:
            errorHandler.handleDeserializeError("List not allowed"s, path);
            return;
            break;

        case ValueDecoder::Type::Unknown:
        default:
            errorHandler.handleDeserializeError("Unknown property type"s, path);
            return;
    }
}

/* */
}
/* */
