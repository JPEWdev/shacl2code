/**
 * @file
 *
 * Generated C++ bindings from a SHACL model
 *
 * This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
 *
 * SPDX-License-Identifier: MIT
 */

#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

#include "object.hpp"
#include "property.hpp"
#include "propertyvalue.hpp"
#include "type.hpp"

/* */
namespace test {
/* */

using std::string_literals::operator""s;

// SHACLObject::IDPropConfig
SHACLObject::IDPropConfig::IDPropConfig(SHACLObject const* owner)
    : StringProperty(), mOwner(owner) {}
SHACLObject::IDPropConfig::~IDPropConfig() {}

bool SHACLObject::IDPropConfig::validateValue(std::string const& val,
                                              ErrorHandler& errorHandler,
                                              ObjectPath& path) const {
    bool valid = true;

    if (!Property<std::string>::validateValue(val, errorHandler, path)) {
        valid = false;
    }

    switch (mOwner->getType().getNodeKind()) {
        case NodeKind::BlankNode:
            if (!isBlankNode(val)) {
                errorHandler.handleValidationError("ID must be a blank node",
                                                   path);
                valid = false;
            }
            break;
        case NodeKind::IRI:
            if (!isIRI(val)) {
                errorHandler.handleValidationError("ID must be an IRI", path);
                valid = false;
            }
            break;
        default:
            if (!isBlankNode(val) && !isIRI(val)) {
                errorHandler.handleValidationError(
                    "ID must be a blank node or IRI", path);
                valid = false;
            }
            break;
    }

    return valid;
}

void SHACLObject::IDPropConfig::encode(ValueEncoder& encoder,
                                       std::string const& value,
                                       ErrorHandler& errorHandler,
                                       ObjectPath& path) const {
    throw std::runtime_error("ID should not be directly encoded");
}

// SHACLObject
SHACLObject::SHACLObject(TypeBase const* type, TypeIRIs const& typeIRIs)
    // NOTE: _id is manually referenced since it has special exceptions, so the
    // owner is nullptr
    : _id(nullptr, type->getIDAlias().value_or("@id"), {},
          type->getNodeKind() == NodeKind::IRI, this),
      mType(type),
      mTypeIRIs(typeIRIs) {}

SHACLObject::~SHACLObject() {}

bool SHACLObject::validate(ErrorHandler& errorHandler, ObjectPath& path) const {
    bool valid = true;
    path.pushProperty(_id, [&] {
        if (!_id.check(errorHandler, path)) {
            valid = false;
        }
    });

    for (auto const* p : mProperties) {
        path.pushProperty(*p, [&] {
            if (!p->check(errorHandler, path)) {
                valid = false;
            }
        });
    }

    return valid;
}

TypeBase const& SHACLObject::getType() const { return *mType; }
std::string const& SHACLObject::getTypeIRI() const {
    if (mTypeIRIs) {
        return mTypeIRIs.value().first;
    }
    return mType->getTypeIRI();
}

std::optional<std::string> const& SHACLObject::getCompactTypeIRI() const {
    if (mTypeIRIs) {
        return mTypeIRIs.value().second;
    }
    return mType->getCompactTypeIRI();
}

void SHACLObject::encode(ValueEncoder& encoder, ErrorHandler& errorHandler,
                         ObjectPath& path) const {
    auto& state = encoder.getState();
    auto const objId = state.getObjectId(*this);

    // TODO: This is recursive, which means it will over-check
    if (!validate(errorHandler, path)) {
        return;
    }

    if (state.objectIsWritten(*this)) {
        encoder.writeIRI(objId);
        return;
    }

    state.addWritten(*this);

    encoder.writeObject(*this, objId, _id.isSet() || state.objectIsRefed(*this),
                        [&](ObjectEncoder& objectEncoder) {
                            encodeProperties(objectEncoder, errorHandler, path);
                        });
}

void SHACLObject::encodeProperties(ObjectEncoder& encoder,
                                   ErrorHandler& errorHandler,
                                   ObjectPath& path) const {
    for (auto const* p : mProperties) {
        if (p->elide()) {
            continue;
        }

        path.pushProperty(*p, [&] {
            encoder.writeProperty(p->getIRI(), p->getCompactIRI(),
                                  [&](ValueEncoder& valueEncoder) {
                                      p->encode(valueEncoder, errorHandler,
                                                path);
                                  });
        });
    }
}

void SHACLObject::handleUnknownDecodeProperty(std::string const& name,
                                              ValueDecoder& decoder,
                                              ErrorHandler& errorHandler,
                                              ObjectPath& path) {
    errorHandler.handleDeserializeError("Unknown property: "s + name, path);
}

void SHACLObject::link(LinkState& state) {
    // Insert into visited set. If already in the set, return
    if (!state.visited.insert(this).second) {
        return;
    }

    linkProperties(state);
}

void SHACLObject::linkProperties(LinkState& state) {
    for (auto* p : mProperties) {
        p->link(state);
    }
}

void SHACLObject::walk(WalkCallback const& callback, ObjectPath& path) const {
    path.pushProperty(_id, [&] { _id.walk(callback, path); });
    for (auto const* p : mProperties) {
        path.pushProperty(*p, [&] { p->walk(callback, path); });
    }
}

std::shared_ptr<SHACLObject> SHACLObject::decode(ObjectDecoder& decoder,
                                                 TypeBase const* type,
                                                 ErrorHandler& errorHandler,
                                                 ObjectPath& path) {
    auto t = decoder.readType();
    if (!t) {
        errorHandler.handleDeserializeError("Unable to decode object type"s,
                                            path);
        return nullptr;
    }

    auto const& obj_type_iri = t.value();

    std::shared_ptr<SHACLObject> obj = nullptr;

    auto const* iri_type = getIRIType(obj_type_iri);
    if (iri_type) {
        if (type && !iri_type->isSubClassOf(type)) {
            errorHandler.handleDeserializeError(
                "Type "s + obj_type_iri + " is not valid where "s +
                    type->getTypeIRI() + " is expected"s,
                path);

            return nullptr;
        }
        obj = iri_type->create();
    } else if (type && type->isExtensible()) {
        // An extensible type is expected, so make one of the correct type
        //
        // Note: An abstract extensible class is actually allowed to be created
        // here
        obj = type->createExtensible(obj_type_iri);
    } else if (isIRI(obj_type_iri)) {
        // It's not clear exactly which type should be created. Search through
        // all types and collect a list of possible Extensible types that are
        // valid in this location.

        std::vector<std::pair<std::string, TypeBase const*>> extTypes;
        for (auto const& [key, value] : getIRITypeRegistry()) {
            if (!value->isExtensible()) {
                continue;
            }

            if (value->isAbstract()) {
                continue;
            }

            // If a type was specified, only subclasses of that type are
            // allowed
            if (type && !value->isSubClassOf(type)) {
                continue;
            }

            extTypes.push_back({key, value});
        }

        // Sort keys for determinism
        std::sort(extTypes.begin(), extTypes.end());

        for (auto const& [iri, extType] : extTypes) {
            // Use the Noop error handler, since we are only going to try to
            // create an object, and if it fails move on to the next type
            obj = SHACLObject::decode(decoder, extType,
                                      NoopErrorHandler::handler, path);
            if (obj) {
                return obj;
            }
        }
    }

    if (!obj) {
        errorHandler.handleDeserializeError(
            "Unable to create object of type "s + obj_type_iri, path);
        return obj;
    }

    decoder.readProperties([&](std::string const& name, ValueDecoder& value) {
        if (obj->_id.matchesIRI(name)) {
            path.pushProperty(
                obj->_id, [&] { obj->_id.decode(value, errorHandler, path); });
            return;
        }

        for (auto* p : obj->mProperties) {
            if (p->matchesIRI(name)) {
                path.pushProperty(
                    *p, [&] { p->decode(value, errorHandler, path); });
                return;
            }
        }

        obj->handleUnknownDecodeProperty(name, value, errorHandler, path);
    });

    return obj;
}

TypeBase const* SHACLObject::getIRIType(std::string const& iri) {
    {
        auto it = getIRITypeRegistry().find(iri);
        if (it != getIRITypeRegistry().end()) {
            return it->second;
        }
    }

    {
        auto it = getCompactTypeRegistry().find(iri);
        if (it != getCompactTypeRegistry().end()) {
            return it->second;
        }
    }

    return nullptr;
}

std::unordered_map<std::string, TypeBase const*>&
SHACLObject::getIRITypeRegistry() {
    static std::unordered_map<std::string, TypeBase const*> IRITypeRegistry;
    return IRITypeRegistry;
}

std::unordered_map<std::string, TypeBase const*>&
SHACLObject::getCompactTypeRegistry() {
    static std::unordered_map<std::string, TypeBase const*> CompactTypeRegistry;
    return CompactTypeRegistry;
}

/* */
}
/* */
