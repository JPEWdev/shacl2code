//
//
// This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
//
// SPDX-License-Identifier: 0BSD

package model

import (
    "fmt"
    "reflect"
    "regexp"
    "sort"
    "strconv"
    "time"

    "github.com/ncruces/go-strftime"
)

type DecodeCheckType interface {
    DecodeCheck(data any, path Path) error
}

func doCheck(data any, path Path, check DecodeCheckType) error {
    if check == nil {
        return nil
    }
    return check.DecodeCheck(data, path)
}

func DecodeAny(data any, path Path, context map[string]string, check DecodeCheckType) (any, error) {
    switch data.(type) {
    case map[string]interface{}:
        return DecodeRef[SHACLObject](data, path, context, nil, check)
    case string:
        return DecodeString(data, path, context, check)
    case int:
        return DecodeInteger(data, path, context, check)
    case float64:
        return DecodeFloat(data, path, context, check)
    case bool:
        return DecodeBoolean(data, path, context, check)
    case []interface{}:
        return DecodeList[any](data, path, context, DecodeAny, check)
    default:
        return nil, &DecodeError{path, "Unknown type "+ reflect.TypeOf(data).Name()}
    }
}

func DecodeSHACLObject[T SHACLObject](data any, path Path, context map[string]string, targetType SHACLType) (T, error) {
    dict, ok := data.(map[string]interface{})
    if ! ok {
        return *new(T), &DecodeError{path, "Expected dictionary or string. Got " + reflect.TypeOf(data).Name()}
    }

    var v interface{}
    v, ok = dict["@type"]
    if ! ok {
        v, ok = dict["@type"]
        if ! ok {
            return *new(T), &DecodeError{path, "type missing"}
        }
    }

    var type_iri string
    var create_type SHACLType

    type_iri, ok = v.(string)
    if ! ok {
        return *new(T), &DecodeError{path, "Wrong type for @type. Got " + reflect.TypeOf(v).Name()}
    }

    iri_typ, ok := objectTypes[type_iri]
    if ok {
        if targetType != nil && !iri_typ.IsSubClassOf(targetType) {
            return *new(T), &DecodeError{path, "Type " + type_iri + " is not valid where " +
                    targetType.GetTypeIRI() + " is expected"}
        }

        if iri_typ.IsAbstract() {
            return *new(T), &DecodeError{path, "Unable to create abstract type '" + type_iri + "'"}
        }

        create_type = iri_typ
    } else if targetType != nil && targetType.IsExtensible() {
        // An extensible type is expected, so make one of the correct type
        //
        // Note: An abstract extensible class is actually allowed to be created
        // here
        create_type = targetType
    } else {
        if IsIRI(type_iri)  {
            // It's not clear exactly which type should be created. Search through
            // all types and collect a list of possible Extensible types that are
            // valid in this location.
            possible := []SHACLType{}
            for _, v := range objectTypes {
                if ! v.IsExtensible() {
                    continue
                }

                if v.IsAbstract() {
                    continue
                }

                // If a type was specified, only subclasses of that type are
                // allowed
                if targetType != nil && ! v.IsSubClassOf(targetType) {
                    continue
                }

                possible = append(possible, v)
            }

            // Sort for determinism
            sort.Slice(possible, func(i, j int) bool {
                return possible[i].GetTypeIRI() < possible[j].GetTypeIRI()
            })

            for _, t := range(possible) {
                // Ignore errors
                o, err := DecodeSHACLObject[T](data, path, context, t)
                if err == nil {
                    o.setTypeIRI(type_iri)
                    return o, nil
                }
            }
        }
        return *new(T), &DecodeError{path, "Unable to create object of type '" + type_iri + "' (no matching extensible object)"}
    }

    obj, ok := create_type.Create().(T)
    if ! ok {
        return *new(T), &DecodeError{path, "Unable to create object of type '" + type_iri + "'"}
    }
    obj.setTypeIRI(type_iri)

    for k, v := range dict {
        if k == "@type" {
            continue
        }
        if k == "@type" {
            continue
        }

        sub_path := path.PushPath(k)
        found, err := create_type.DecodeProperty(obj, k, v, sub_path)
        if err != nil {
            return *new(T), err
        }
        if ! found {
            return *new(T), &DecodeError{path, "Unknown property '" + k + "'"}
        }
    }

    return obj, nil
}

func DecodeRef[T SHACLObject](data any, path Path, context map[string]string, typ SHACLType, check DecodeCheckType) (Ref[T], error) {
    if err := doCheck(data, path, check); err != nil {
        return nil, err
    }

    switch data.(type) {
    case string:
        s, err := DecodeIRI(data, path, context, check)
        if err != nil {
            return nil, err
        }
        return MakeIRIRef[T](s), nil
    }

    obj, err := DecodeSHACLObject[T](data, path, context, typ)
    if err != nil {
        return nil, err
    }

    return MakeObjectRef[T](obj), nil
}

func DecodeString(data any, path Path, context map[string]string, check DecodeCheckType) (string, error) {
    if err := doCheck(data, path, check); err != nil {
        return "", err
    }

    v, ok := data.(string)
    if ! ok {
        return v, &DecodeError{path, "String expected. Got " + reflect.TypeOf(data).Name()}
    }
    return v, nil
}

func DecodeIRI(data any, path Path, context map[string]string, check DecodeCheckType) (string, error) {
    s, err := DecodeString(data, path, context, check)
    if err != nil {
        return s, err
    }

    for k, v := range context {
        if s == v {
            s = k
            break
        }
    }

    if ! IsBlankNode(s) && ! IsIRI(s) {
        return s, &DecodeError{path, "Must be blank node or IRI. Got '" + s + "'"}
    }

    return s, nil
}

func DecodeBoolean(data any, path Path, context map[string]string, check DecodeCheckType) (bool, error) {
    if err := doCheck(data, path, check); err != nil {
        return false, err
    }

    v, ok := data.(bool)
    if ! ok {
        return v, &DecodeError{path, "Boolean expected. Got " + reflect.TypeOf(data).Name()}
    }
    return v, nil
}

func DecodeInteger(data any, path Path, context map[string]string, check DecodeCheckType) (int, error) {
    if err := doCheck(data, path, check); err != nil {
        return 0, err
    }

    switch data.(type) {
    case int:
        return data.(int), nil
    case float64:
        v := data.(float64)
        if v == float64(int64(v)) {
            return int(v), nil
        }
        return 0, &DecodeError{path, "Value must be an integer. Got " + fmt.Sprintf("%f", v)}
    default:
        return 0, &DecodeError{path, "Integer expected. Got " + reflect.TypeOf(data).Name()}
    }
}

func DecodeFloat(data any, path Path, context map[string]string, check DecodeCheckType) (float64, error) {
    if err := doCheck(data, path, check); err != nil {
        return 0, err
    }

    switch data.(type) {
    case float64:
        return data.(float64), nil
    case string:
        v, err := strconv.ParseFloat(data.(string), 64)
        if err != nil {
            return 0, err
        }
        return v, nil
    default:
        return 0, &DecodeError{path, "Float expected. Got " + reflect.TypeOf(data).Name()}
    }
}

func decodeDateTimeString(data any, path Path, re *regexp.Regexp, check DecodeCheckType) (time.Time, error) {
    if err := doCheck(data, path, check); err != nil {
        return time.Time{}, err
    }

    v, ok := data.(string)
    if ! ok {
        return time.Time{}, &DecodeError{path, "String expected. Got " + reflect.TypeOf(data).Name()}
    }

    match := re.FindStringSubmatch(v)

    if match == nil {
        return time.Time{}, &DecodeError{path, "Invalid date time string '" + v + "'"}
    }

    var format string
    s := match[1]
    tzstr := match[2]
    loc := time.UTC

    switch tzstr {
    case "Z":
        s += "+00:00"
        format = "%Y-%m-%dT%H:%M:%S%:z"
    case "":
        format = "%Y-%m-%dT%H:%M:%S"
        loc = time.Local
    default:
        s += tzstr
        format = "%Y-%m-%dT%H:%M:%S%:z"
    }

    layout, err := strftime.Layout(format)
    if err != nil {
        return time.Time{}, err
    }

    t, err := time.ParseInLocation(layout, s, loc)
    if err != nil {
        return time.Time{}, &DecodeError{path, "Invalid date time string '" + v + "': " + err.Error()}
    }
    return t, nil
}

var dateTimeRegex = regexp.MustCompile(`^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(Z|[+-]\d{2}:\d{2})?$`)
func DecodeDateTime(data any, path Path, context map[string]string, check DecodeCheckType) (time.Time, error) {
    return decodeDateTimeString(data, path, dateTimeRegex, check)
}

var dateTimeStampRegex = regexp.MustCompile(`^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})(Z|[+-]\d{2}:\d{2})$`)
func DecodeDateTimeStamp(data any, path Path, context map[string]string, check DecodeCheckType) (time.Time, error) {
    return decodeDateTimeString(data, path, dateTimeStampRegex, check)
}

func DecodeList[T any](data any, path Path, context map[string]string, f func (any, Path, map[string]string, DecodeCheckType)(T, error), check DecodeCheckType) ([]T, error) {
    lst, ok := data.([]interface{})
    if ! ok {
        return nil, &DecodeError{path, "Must be a list"}
    }

    var result []T
    for idx, v := range lst {
        item, err := f(v, path.PushIndex(idx), context, check)
        if err != nil {
            return nil, err
        }
        result = append(result, item)
    }

    return result, nil
}
