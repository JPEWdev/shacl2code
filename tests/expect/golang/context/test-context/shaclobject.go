//
//
// This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
//
// SPDX-License-Identifier: 0BSD

package model

type Visit func(Path, any)

// Base SHACL Object
type SHACLObjectBase struct {
    // Object ID
    id Property[string]
    typ SHACLType
    typeIRI string
}

func (self *SHACLObjectBase) ID() PropertyInterface[string] { return &self.id }

func (self *SHACLObjectBase) Validate(path Path, handler ErrorHandler) bool {
    var valid bool = true

    switch self.typ.GetNodeKind() {
    case NodeKindBlankNode:
        if self.ID().IsSet() && ! IsBlankNode(self.ID().Get()) {
            handler.HandleError(&ValidationError{
                "id",
                "ID must by be blank node"},
                path.PushPath("id"))
            valid = false
        }
    case NodeKindIRI:
        if ! self.ID().IsSet() || ! IsIRI(self.ID().Get()) {
            handler.HandleError(&ValidationError{
                "id",
                "ID must be an IRI"},
                path.PushPath("id"))
            valid = false
        }
    case NodeKindBlankNodeOrIRI:
        if self.ID().IsSet() && ! IsBlankNode(self.ID().Get()) && ! IsIRI(self.ID().Get()) {
            handler.HandleError(&ValidationError{
                "id",
                "ID must be a blank node or IRI"},
                path.PushPath("id"))
            valid = false
        }
    default:
        panic("Unknown node kind")
    }

    return valid
}

func (self *SHACLObjectBase) Walk(path Path, visit Visit) {
    self.id.Walk(path, visit)
}

func (self *SHACLObjectBase) EncodeProperties(data map[string]interface{}, path Path, state *EncodeState) error {
    if self.typeIRI != "" {
        data["@type"] = self.typeIRI
    } else {
        data["@type"] = self.typ.GetCompactTypeIRI().GetDefault(self.typ.GetTypeIRI())
    }

    id_prop := self.typ.GetIDAlias().GetDefault("@id")

    if self.id.IsSet() {
        val, err := EncodeIRI(self.id.Get(), path.PushPath(id_prop), map[string]string{}, state)
        if err != nil {
            return err
        }
        data[id_prop] = val
    }

    return nil
}

func (self *SHACLObjectBase) GetType() SHACLType {
    return self.typ
}

func (self *SHACLObjectBase) setTypeIRI(iri string) {
    self.typeIRI = iri
}

func (self *SHACLObjectBase) Link(state *LinkState) error {
    return nil
}

func ConstructSHACLObjectBase(o *SHACLObjectBase, typ SHACLType) *SHACLObjectBase {
    o.id = NewProperty[string]("id", []Validator[string]{ IDValidator{}, }, []Validator[any]{})
    o.typ = typ
    return o
}

type SHACLObject interface {
    ID() PropertyInterface[string]
    Validate(path Path, handler ErrorHandler) bool
    Walk(path Path, visit Visit)
    EncodeProperties(data map[string]interface{}, path Path, state *EncodeState) error
    GetType() SHACLType
    setTypeIRI(iri string)
    Link(state *LinkState) error
}

func EncodeSHACLObject(o SHACLObject, path Path, state *EncodeState) (any, error) {
    if state != nil {
        if state.Written[o] {
            if o.ID().IsSet() {
                return o.ID().Get(), nil
            }

            return nil, &EncodeError{
                path,
                "Object referenced multiple times, but does not have an ID assigned",
            }
        }

        state.Written[o] = true
    }

    d := make(map[string]interface{})
    return d, o.EncodeProperties(d, path, state)
}

