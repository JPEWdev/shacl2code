//
//
// This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
//
// SPDX-License-Identifier: 0BSD

package model

type ListPropertyInterface[T any] interface {
    Get() []T
    Set(val []T) error
    Append(val T) error
    Delete()
    Walk(path Path, visit Visit)
    IsSet() bool
    Link(state *LinkState) error
    DecodeCheck(data any, path Path) error
}

type ListProperty[T any] struct {
    value []T
    name string
    validators []Validator[T]
    decodeValidators []Validator[any]
}

func NewListProperty[T any](name string, validators []Validator[T], decodeValidators []Validator[any]) ListProperty[T] {
    return ListProperty[T]{
        value: []T{},
        name: name,
        validators: validators,
        decodeValidators: decodeValidators,
    }
}

func (self *ListProperty[T]) Get() []T {
    return self.value
}

func (self *ListProperty[T]) Set(val []T) error {
    for _, v := range val {
        for _, validator := range self.validators {
            err := validator.Check(v, self.name)
            if err != nil {
                return err
            }
        }
    }

    self.value = val
    return nil
}

func (self *ListProperty[T]) Append(val T) error {
    for _, validator := range self.validators {
        err := validator.Check(val, self.name)
        if err != nil {
            return err
        }
    }

    self.value = append(self.value, val)
    return nil
}

func (self *ListProperty[T]) Delete() {
    self.value = []T{}
}

func (self *ListProperty[T]) IsSet() bool {
    return self.value != nil && len(self.value) > 0
}

func (self *ListProperty[T]) Check(path Path, handler ErrorHandler) bool {
    var valid bool
    valid = true

    for idx, v := range self.value {
        for _, validator := range self.validators {
            err := validator.Check(v, self.name)
            if err != nil {
                if handler != nil {
                    handler.HandleError(err, path.PushIndex(idx))
                }
                valid = false
            }
        }
    }
    return valid
}

func (self *ListProperty[T]) Walk(path Path, visit Visit) {
    sub_path := path.PushPath(self.name)

    for idx, v := range self.value {
        visit(sub_path.PushIndex(idx), v)
    }
}

func (self *ListProperty[T]) Link(state *LinkState) error {
    return nil
}

func (self *ListProperty[T]) DecodeCheck(data any, path Path) error {
    for _, v := range self.decodeValidators {
        err := v.Check(data, self.name)
        if err != nil {
            return err
        }
    }
    return nil
}
