#! /usr/bin/env python3
#
# Generated Python bindings from a SHACL model
#
# This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
#
# SPDX-License-Identifier: MIT

import functools
import hashlib
import json
import re
import time
from datetime import datetime, timezone


def check_type(obj, types):
    if not isinstance(obj, types):
        if isinstance(types, (list, tuple)):
            raise TypeError(
                f"Value must be one of type: {', '.join(t.__name__ for t in types)}. Got {type(obj)}"
            )
        raise TypeError(f"Value must be of type {types.__name__}. Got {type(obj)}")


class Property(object):
    """
    A generic SHACL object property. The different types will derive from this
    class
    """

    TYPE = None

    def __init__(self, *, pattern=None):
        self.pattern = pattern

    def init(self):
        return None

    def validate(self, value):
        check_type(value, self.VALID_TYPES)
        if self.pattern is not None and not re.search(self.pattern, self.set(value)):
            raise ValueError(f"Value is not correctly formatted. Got '{value}'")

    def set(self, value):
        return value

    def get(self, value):
        return value

    def check_min_count(self, value, min_count):
        return min_count == 1

    def check_max_count(self, value, max_count):
        return max_count == 1

    def elide(self, value):
        return value is None

    def walk(self, value, callback, path):
        callback(value, path)

    def serializer(self, value, context):
        return value

    def deserialize(self, data, context, *, object_ids=None):
        if isinstance(data, dict) and "@value" in data:
            if self.TYPE:
                for t in ("@type", context.compact("@type")):
                    if t in data and data[t] != self.TYPE:
                        raise TypeError(
                            f"Value must be of type {self.TYPE}, but got {data[t]}"
                        )

            return data["@value"]

        return data

    def link_prop(self, value, link_cache, missing, visited):
        return value


class StringProp(Property):
    """
    A scalar string property for an SHACL object
    """

    TYPE = None
    VALID_TYPES = str

    def set(self, value):
        return str(value)


class AnyURIProp(StringProp):
    TYPE = "http://www.w3.org/2001/XMLSchema#anyURI"

    def validate(self, value):
        super().validate(value)


class DateTimeProp(Property):
    """
    A Date/Time Object
    """

    TYPE = "https://spdx.org/rdf/v3/Core/DateTime"
    VALID_TYPES = datetime
    FORMAT_STR = "%Y-%m-%dT%H:%M:%SZ"

    def set(self, value):
        return value.astimezone(timezone.utc).strftime(self.FORMAT_STR)

    def get(self, value):
        return datetime(
            *(time.strptime(value, self.FORMAT_STR)[0:6]),
            tzinfo=timezone.utc,
        )


class IntegerProp(Property):
    VALID_TYPES = int

    def set(self, value):
        return int(value)


class PositiveIntegerProp(IntegerProp):
    def validate(self, value):
        super().validate(value)
        if value < 1:
            raise ValueError(f"Value must be >=1. Got {value}")


class NonNegativeIntegerProp(IntegerProp):
    def validate(self, value):
        super().validate(value)
        if value < 0:
            raise ValueError(f"Value must be >= 0. Got {value}")


class BooleanProp(Property):
    VALID_TYPES = bool

    def set(self, value):
        return bool(value)


class FloatProp(Property):
    VALID_TYPES = (float, int)

    def set(self, value):
        return float(value)


class ObjectProp(Property):
    """
    A scalar SHACL object property of a SHACL object
    """

    def __init__(self, cls, required):
        super().__init__()
        self.cls = cls
        self.required = required

    def init(self):
        if self.required:
            return self.cls()
        return None

    def validate(self, value):
        check_type(value, (self.cls, str))

    def walk(self, value, callback, path):
        if value is None:
            return

        if not isinstance(value, str):
            value.walk(callback, path)
        else:
            callback(value, path)

    def serializer(self, value, context):
        if value is None:
            return None

        if isinstance(value, str):
            return value

        return value.serializer(context)

    def deserialize(self, data, context, *, object_ids=None):
        if data is None:
            return data

        if isinstance(data, str):
            if data in object_ids:
                return object_ids[data]

            return data

        if isinstance(data, dict) and not any(
            t in data for t in ("@type", context.compact("@type"))
        ):
            for n in ("@id", context.compact("@id")):
                if n in data:
                    return data[n]

        return SHACLObject.deserialize(data, context, object_ids=object_ids)

    def link_prop(self, value, link_cache, missing, visited):
        if value is None:
            return value

        if isinstance(value, str):
            if value in link_cache:
                return link_cache[value]

            if missing is not None:
                missing.add(value)

            return value

        # De-duplicate IDs
        if value._id and value._id is not link_cache[value._id]:
            value = link_cache[value._id]

        value.link_helper(link_cache, missing, visited)
        return value


class ListProxy(object):
    def __init__(self, prop, data=None):
        if data is None:
            self.__data = []
        else:
            self.__data = data
        self.__prop = prop

    def get_raw(self, key):
        return self.__data[key]

    def raw_items(self):
        return iter(self.__data)

    def append(self, value):
        self.__prop.validate(value)
        self.__data.append(self.__prop.set(value))

    def insert(self, idx, value):
        self.__prop.validate(value)
        self.__data.insert(idx, self.__prop.set(value))

    def extend(self, items):
        for i in items:
            self.append(i)

    def sort(self, *args, **kwargs):
        self.__data.sort(*args, **kwargs)

    def __getitem__(self, key):
        return self.__prop.get(self.get_raw(key))

    def __setitem__(self, key, value):
        if isinstance(key, slice):
            for v in value:
                self.__prop.validate(v)
            self.__data[key] = [self.__prop.set(v) for v in value]
        else:
            self.__prop.validate(value)
            self.__data[key] = self.__prop.set(value)

    def __delitem__(self, key):
        del self.__data[key]

    def __contains__(self, item):
        return item in [self.__prop.get(d) for d in self.__data]

    def __iter__(self):
        for v in self.__data:
            yield self.__prop.get(v)

    def __len__(self):
        return len(self.__data)

    def __str__(self):
        return str(self.__data)

    def __repr__(self):
        return repr(self.__data)

    def __eq__(self, other):
        if isinstance(other, ListProxy):
            return self.__data == other.__data

        return [self.__prop.get(d) for d in self.__data] == other


class ListProp(Property):
    """
    A list of SHACL properties
    """

    VALID_TYPES = (list, ListProxy)

    def __init__(self, prop):
        super().__init__()
        self.prop = prop

    def init(self):
        return ListProxy(self.prop)

    def validate(self, value):
        super().validate(value)

        for i in value:
            self.prop.validate(i)

    def set(self, value):
        if isinstance(value, ListProxy):
            return value

        return ListProxy(self.prop, [self.prop.set(d) for d in value])

    def check_min_count(self, value, min_count):
        check_type(value, ListProxy)
        return len(value) >= min_count

    def check_max_count(self, value, max_count):
        check_type(value, ListProxy)
        return len(value) <= max_count

    def elide(self, value):
        check_type(value, ListProxy)
        return len(value) == 0

    def walk(self, value, callback, path):
        callback(value, path)
        for idx, v in enumerate(value):
            self.prop.walk(v, callback, path + [f"[{idx}]"])

    def deserialize(self, data, *args, **kwargs):
        if isinstance(data, (list, tuple, set)):
            data = [self.prop.deserialize(d, *args, **kwargs) for d in data]
        else:
            data = [self.prop.deserialize(data, *args, **kwargs)]

        return ListProxy(self.prop, data=data)

    def link_prop(self, value, link_cache, missing, visited):
        if isinstance(value, ListProxy):
            data = [
                self.prop.link_prop(v, link_cache, missing, visited)
                for v in value.raw_items()
            ]
        else:
            data = [self.prop.link_prop(v, link_cache, missing, visited) for v in value]

        return ListProxy(self.prop, data=data)

    def serializer(self, value, context):
        check_type(value, ListProxy)
        """"""
        """"""
        return [self.prop.serializer(v, context) for v in value.raw_items()]


class EnumProp(Property):
    VALID_TYPES = str

    def validate(self, value):
        super().validate(value)

        if value not in (v for _, v in self.valid_values):
            raise ValueError(
                f"'{value}' is not a valid value for '{self.__class__.__name__}'"
            )

    def deserialize(self, data, context, **kwargs):
        value = super().deserialize(data, context, **kwargs)
        return context.expand(value)

    def serializer(self, value, context):
        return context.compact(value)


@functools.total_ordering
class SHACLObject(object):
    DESERIALIZERS = {}

    def __init__(self):
        self._obj_data = {}
        self._obj_properties = {}
        self._obj_iris = {}
        self._obj_written = False
        self._obj_metadata = {}

        self._add_property("_id", StringProp(), iri="@id")

    def _set_init_props(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    def _add_property(
        self,
        pyname,
        prop,
        iri,
        min_count=None,
        max_count=None,
    ):
        if pyname in self._obj_iris:
            raise KeyError(
                f"'{pyname}' is already defined for '{self.__class__.__name__}'"
            )
        if iri in self._obj_properties:
            raise KeyError(
                f"'{iri}' is already defined for '{self.__class__.__name__}'"
            )

        self._obj_iris[pyname] = iri
        self._obj_properties[iri] = (prop, min_count, max_count, pyname)
        self._obj_data[iri] = prop.init()

    def __setattr__(self, name, value):
        if name.startswith("_obj_"):
            return super().__setattr__(name, value)

        try:
            iri = self._obj_iris[name]
            self[iri] = value
        except KeyError:
            raise AttributeError(
                f"'{name}' is not a valid property of {self.__class__.__name__}"
            )

    def __getattr__(self, name):
        if name.startswith("_obj_"):
            return self.__dict__[name]

        if name == "_metadata":
            return self._obj_metadata

        if name == "_IRI":
            return self._obj_iris

        try:
            iri = self._obj_iris[name]
            return self[iri]
        except KeyError:
            raise AttributeError(
                f"'{name}' is not a valid property of {self.__class__.__name__}"
            )

    def __delattr__(self, name):
        try:
            iri = self._obj_iris[name]
            del self[iri]
        except KeyError:
            raise AttributeError(
                f"'{name}' is not a valid property of {self.__class__.__name__}"
            )

    def __get_prop(self, iri):
        if iri not in self._obj_properties:
            raise KeyError(
                f"'{iri}' is not a valid property of {self.__class__.__name__}"
            )

        return self._obj_properties[iri]

    def __iter_props(self):
        for iri, v in self._obj_properties.items():
            prop, min_count, max_count, pyname = v
            yield iri, prop, min_count, max_count, pyname

    def __getitem__(self, iri):
        prop, _, _, _ = self.__get_prop(iri)
        return prop.get(self._obj_data[iri])

    def __setitem__(self, iri, value):
        prop, _, _, _ = self.__get_prop(iri)
        prop.validate(value)
        self._obj_data[iri] = prop.set(value)

    def __delitem__(self, iri):
        prop, _, _, _ = self.__get_prop(iri)
        self._obj_data[iri] = prop.init()

    def walk(self, callback, path=None):
        """
        Walk object tree, invoking the callback for each item

        Callback has the form:

        def callback(object, path):
        """
        if path is None:
            path = ["."]

        if callback(self, path):
            for iri, prop, _, _, _ in self.__iter_props():
                prop.walk(self._obj_data[iri], callback, path + [f".{iri}"])

    def child_objects(self):
        """
        Iterate over each object that is a child of this one
        """
        seen = set()

        def _walk_callback(value, path):
            nonlocal seen

            if not isinstance(value, SHACLObject):
                return False

            if value in seen:
                return False

            seen.add(value)
            return True

        self.walk(_walk_callback)

        for obj in seen:
            yield obj

    def serializer(self, context):
        if self._id and self._obj_written:
            return self._id

        self._obj_written = True

        d = {
            context.compact("@type"): context.compact(self.TYPE),
        }

        for iri, prop, min_count, max_count, pyname in self.__iter_props():
            value = self._obj_data[iri]
            if prop.elide(value):
                if min_count:
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) is required (currently {value!r})"
                    )
                continue

            if min_count is not None:
                if not prop.check_min_count(value, min_count):
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) requires a minimum of {min_count} elements"
                    )

            if max_count is not None:
                if not prop.check_max_count(value, max_count):
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) requires a maximum of {max_count} elements"
                    )

            with context.vocab_push(iri):
                d[context.compact(iri)] = prop.serializer(value, context)
        return d

    def to_jsonld(self, f, *args, **kwargs):
        """
        Serialize this object to a JSON LD file
        """
        return write_jsonld([self], f, *args, **kwargs)

    @classmethod
    def deserialize(cls, data, context, *, object_ids=None):
        for t in ("@type", context.compact("@type")):
            if t not in data:
                continue

            typ = data[t]

            if typ in cls.DESERIALIZERS:
                break

            typ = context.expand(typ)
            if typ in cls.DESERIALIZERS:
                break

            raise Exception(f"Unknown type {data[t]}")
        else:
            raise Exception("Unable to determine type for object")

        obj = cls.DESERIALIZERS[typ]()

        _id = data.get("@id", None) or data.get(context.compact("@id"), None)
        if _id and _id in object_ids:
            return object_ids[_id]

        for iri, prop, _, _, _ in obj.__iter_props():
            for n in (iri, context.compact(iri)):
                if n in data:
                    with context.vocab_push(iri):
                        obj._obj_data[iri] = prop.deserialize(
                            data[n],
                            context,
                            object_ids=object_ids,
                        )
                    break

        if obj._id:
            object_ids[obj._id] = obj

        return obj

    def link_helper(self, link_cache, missing, visited):
        if self in visited:
            return

        visited.add(self)

        for iri, prop, _, _, _ in self.__iter_props():
            self._obj_data[iri] = prop.link_prop(
                self._obj_data[iri],
                link_cache,
                missing,
                visited,
            )

    def link(self, link_cache=None):
        if not link_cache:
            link_cache = {obj._id: obj for obj in self.child_objects() if obj._id}

        missing = set()
        visited = set()

        self.link_helper(link_cache, missing, visited)

        return missing

    def __str__(self):
        parts = [
            f"{self.__class__.__name__}(",
        ]
        if self._id:
            parts.append(f"@id='{self._id}'")
        parts.append(")")
        return "".join(parts)

    def __hash__(self):
        return super().__hash__()

    def __eq__(self, other):
        return super().__eq__(other)

    def __lt__(self, other):
        def sort_key(obj):
            if isinstance(obj, str):
                return (obj, "", "", "")
            return (
                obj._id or "",
                obj.TYPE,
                getattr(obj, "name", None) or "",
                id(obj),
            )

        return sort_key(self) < sort_key(other)


def make_context():
    global CONTEXTS
    return Context(CONTEXTS)


def write_jsonld(objects, f, force_graph=False, **kwargs):
    """
    Write a list of objects to a JSON LD file

    If force_graph is True, a @graph node will always be written
    """
    ref_counts = {}
    id_objects = set()
    context = make_context()

    def walk_callback(value, path):
        nonlocal ref_counts

        if not isinstance(value, SHACLObject):
            return True

        value._obj_written = False

        # Remove blank node ID for re-assignment
        if value._id and value._id.startswith("_:"):
            del value._id

        if value._id:
            id_objects.add(value)

        ref_counts.setdefault(value, 0)
        ref_counts[value] += 1
        if ref_counts[value] > 1:
            id_objects.add(value)
            return False

        return True

    for o in objects:
        o.walk(walk_callback)

    for idx, o in enumerate(id_objects):
        if not o._id:
            o._id = f"_:{o.__class__.__name__}{idx}"

    use_graph = force_graph or len(objects) > 1

    objects = set(objects)

    if use_graph:
        # If we are making a graph, put all ID objects in the root
        objects |= id_objects

    objects = list(objects)
    objects.sort()

    if use_graph:
        graph_data = []
        # Ensure top level objects are only written in the top level graph
        # node, and referenced by ID everywhere else. This is done by setting
        # the flag that indicates this object has been written for all the top
        # level objects, then clearing it right before serializing the object.
        #
        # In this way, if an object is referenced before it is supposed to be
        # serialized into the @graph, it will serialize as a string instead of
        # the actual object
        for o in objects:
            o._obj_written = True

        for o in objects:
            # Allow this specific object to be written now
            o._obj_written = False
            graph_data.append(o.serializer(context))

        data = {"@graph": graph_data}
    else:
        data = objects[0].serializer(context)

    if len(CONTEXT_URLS) == 1:
        data["@context"] = CONTEXT_URLS[0]
    elif CONTEXT_URLS:
        data["@context"] = CONTEXT_URLS

    sha1 = hashlib.sha1()
    for chunk in json.JSONEncoder(**kwargs).iterencode(data):
        chunk = chunk.encode("utf-8")
        f.write(chunk)
        sha1.update(chunk)

    return sha1.hexdigest()


def read_jsonld(f):
    """
    Read objects from a JSON LD file

    Returns the list of top level objects in the file, and a set of all
    object_ids that are present in the file

    The returned objects are fully linked
    """
    context = make_context()
    data = json.load(f)
    object_ids = {}
    if "@graph" not in data:
        objects = [SHACLObject.deserialize(data, context, object_ids=object_ids)]
    else:
        objects = [
            SHACLObject.deserialize(o, context, object_ids=object_ids)
            for o in data["@graph"]
        ]

    for o in objects:
        o.link(object_ids)

    # Remove blank node IDs
    for o in objects:
        for c in o.child_objects():
            if c._id and c._id.startswith("_:"):
                del c._id

    object_ids = {k: v for k, v in object_ids.items() if not k.startswith("_:")}

    return objects, object_ids


def print_tree(objects, all_fields=False):
    """
    Print object tree
    """
    seen = set()

    def callback(value, path):
        nonlocal seen

        s = ("  " * (len(path) - 1)) + f"{path[-1]}"
        if isinstance(value, SHACLObject):
            s += f" {value} ({id(value)})"
            is_empty = False
        elif isinstance(value, ListProxy):
            is_empty = len(value) == 0
            if is_empty:
                s += " []"
        else:
            s += f" {value!r}"
            is_empty = value is None

        if all_fields or not is_empty:
            print(s)

        if isinstance(value, SHACLObject):
            if value in seen:
                return False
            seen.add(value)
            return True

        return True

    for o in objects:
        o.walk(callback)


# fmt: off
"""Format Guard"""

CONTEXTS = [
]

CONTEXT_URLS = [
]


# ENUMERATIONS
# Categories of safety risk impact of the application.
class https_rdfspdxorgv3AISafetyRiskAssessmentType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType"
    valid_values = [
        ("high", "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/high"),
        ("low", "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/low"),
        ("medium", "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/medium"),
        ("serious", "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/serious"),
    ]
    # The second-highest level of risk posed by an AI software.
    high = "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/high"
    # Low/no risk is posed by the AI software.
    low = "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/low"
    # The third-highest level of risk posed by an AI software.
    medium = "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/medium"
    # The highest level of risk posed by an AI software.
    serious = "https://rdf.spdx.org/v3/AI/SafetyRiskAssessmentType/serious"


# Specifies the type of an annotation.
class https_rdfspdxorgv3CoreAnnotationType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/AnnotationType"
    valid_values = [
        ("other", "https://rdf.spdx.org/v3/Core/AnnotationType/other"),
        ("review", "https://rdf.spdx.org/v3/Core/AnnotationType/review"),
    ]
    # Used to store extra information about an Element which is not part of a Review (e.g. extra information provided during the creation of the Element).
    other = "https://rdf.spdx.org/v3/Core/AnnotationType/other"
    # Used when someone reviews the Element.
    review = "https://rdf.spdx.org/v3/Core/AnnotationType/review"


# Specifies the type of an external identifier.
class https_rdfspdxorgv3CoreExternalIdentifierType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType"
    valid_values = [
        ("cpe22", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cpe22"),
        ("cpe23", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cpe23"),
        ("cve", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cve"),
        ("email", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/email"),
        ("gitoid", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/gitoid"),
        ("other", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/other"),
        ("packageUrl", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/packageUrl"),
        ("securityOther", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/securityOther"),
        ("swhid", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/swhid"),
        ("swid", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/swid"),
        ("urlScheme", "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/urlScheme"),
    ]
    # https://cpe.mitre.org/files/cpe-specification_2.2.pdf
    cpe22 = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cpe22"
    # https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf
    cpe23 = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cpe23"
    # An identifier for a specific software flaw defined within the official CVE Dictionary and that conforms to the CVE specification as defined by https://csrc.nist.gov/glossary/term/cve_id.
    cve = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/cve"
    # https://datatracker.ietf.org/doc/html/rfc3696#section-3
    email = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/email"
    # https://www.iana.org/assignments/uri-schemes/prov/gitoid Gitoid stands for [Git Object ID](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects) and a gitoid of type blob is a unique hash of a binary artifact. A gitoid may represent the software [Artifact ID](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-id) or the [OmniBOR Identifier](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-identifier) for the software artifact's associated [OmniBOR Document](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#omnibor-document); this ambiguity exists because the OmniBOR Document is itself an artifact, and the gitoid of that artifact is its valid identifier. Omnibor is a minimalistic schema to describe software [Artifact Dependency Graphs](https://github.com/omnibor/spec/blob/main/spec/SPEC.md#artifact-dependency-graph-adg). Gitoids calculated on software artifacts (Snippet, File, or Package Elements) should be recorded in the SPDX 3.0 SoftwareArtifact's ContentIdentifier property. Gitoids calculated on the OmniBOR Document (OmniBOR Identifiers) should be recorded in the SPDX 3.0 Element's ExternalIdentifier property.
    gitoid = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/gitoid"
    # Used when the type doesn't match any of the other options.
    other = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/other"
    # https://github.com/package-url/purl-spec
    packageUrl = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/packageUrl"
    # Used when there is a security related identifier of unspecified type.
    securityOther = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/securityOther"
    # SoftWare Hash IDentifier, persistent intrinsic identifiers for digital artifacts, such as files, trees (also known as directories or folders), commits, and other objects typically found in version control systems. The syntax of the identifiers is defined in the [SWHID specification](https://www.swhid.org/specification/v1.1/4.Syntax) and they typically look like `swh:1:cnt:94a9ed024d3859793618152ea559a168bbcbb5e2`.
    swhid = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/swhid"
    # https://www.ietf.org/archive/id/draft-ietf-sacm-coswid-21.html#section-2.3
    swid = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/swid"
    # the scheme used in order to locate a resource https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
    urlScheme = "https://rdf.spdx.org/v3/Core/ExternalIdentifierType/urlScheme"


# Specifies the type of an external reference.
class https_rdfspdxorgv3CoreExternalRefType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/ExternalRefType"
    valid_values = [
        ("altDownloadLocation", "https://rdf.spdx.org/v3/Core/ExternalRefType/altDownloadLocation"),
        ("altWebPage", "https://rdf.spdx.org/v3/Core/ExternalRefType/altWebPage"),
        ("binaryArtifact", "https://rdf.spdx.org/v3/Core/ExternalRefType/binaryArtifact"),
        ("bower", "https://rdf.spdx.org/v3/Core/ExternalRefType/bower"),
        ("buildMeta", "https://rdf.spdx.org/v3/Core/ExternalRefType/buildMeta"),
        ("buildSystem", "https://rdf.spdx.org/v3/Core/ExternalRefType/buildSystem"),
        ("certificationReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/certificationReport"),
        ("chat", "https://rdf.spdx.org/v3/Core/ExternalRefType/chat"),
        ("componentAnalysisReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/componentAnalysisReport"),
        ("documentation", "https://rdf.spdx.org/v3/Core/ExternalRefType/documentation"),
        ("dynamicAnalysisReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/dynamicAnalysisReport"),
        ("eolNotice", "https://rdf.spdx.org/v3/Core/ExternalRefType/eolNotice"),
        ("exportControlAssessment", "https://rdf.spdx.org/v3/Core/ExternalRefType/exportControlAssessment"),
        ("funding", "https://rdf.spdx.org/v3/Core/ExternalRefType/funding"),
        ("issueTracker", "https://rdf.spdx.org/v3/Core/ExternalRefType/issueTracker"),
        ("license", "https://rdf.spdx.org/v3/Core/ExternalRefType/license"),
        ("mailingList", "https://rdf.spdx.org/v3/Core/ExternalRefType/mailingList"),
        ("mavenCentral", "https://rdf.spdx.org/v3/Core/ExternalRefType/mavenCentral"),
        ("metrics", "https://rdf.spdx.org/v3/Core/ExternalRefType/metrics"),
        ("npm", "https://rdf.spdx.org/v3/Core/ExternalRefType/npm"),
        ("nuget", "https://rdf.spdx.org/v3/Core/ExternalRefType/nuget"),
        ("other", "https://rdf.spdx.org/v3/Core/ExternalRefType/other"),
        ("privacyAssessment", "https://rdf.spdx.org/v3/Core/ExternalRefType/privacyAssessment"),
        ("productMetadata", "https://rdf.spdx.org/v3/Core/ExternalRefType/productMetadata"),
        ("purchaseOrder", "https://rdf.spdx.org/v3/Core/ExternalRefType/purchaseOrder"),
        ("qualityAssessmentReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/qualityAssessmentReport"),
        ("releaseHistory", "https://rdf.spdx.org/v3/Core/ExternalRefType/releaseHistory"),
        ("releaseNotes", "https://rdf.spdx.org/v3/Core/ExternalRefType/releaseNotes"),
        ("riskAssessment", "https://rdf.spdx.org/v3/Core/ExternalRefType/riskAssessment"),
        ("runtimeAnalysisReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/runtimeAnalysisReport"),
        ("secureSoftwareAttestation", "https://rdf.spdx.org/v3/Core/ExternalRefType/secureSoftwareAttestation"),
        ("securityAdversaryModel", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityAdversaryModel"),
        ("securityAdvisory", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityAdvisory"),
        ("securityFix", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityFix"),
        ("securityOther", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityOther"),
        ("securityPenTestReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityPenTestReport"),
        ("securityPolicy", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityPolicy"),
        ("securityThreatModel", "https://rdf.spdx.org/v3/Core/ExternalRefType/securityThreatModel"),
        ("socialMedia", "https://rdf.spdx.org/v3/Core/ExternalRefType/socialMedia"),
        ("sourceArtifact", "https://rdf.spdx.org/v3/Core/ExternalRefType/sourceArtifact"),
        ("staticAnalysisReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/staticAnalysisReport"),
        ("support", "https://rdf.spdx.org/v3/Core/ExternalRefType/support"),
        ("vcs", "https://rdf.spdx.org/v3/Core/ExternalRefType/vcs"),
        ("vulnerabilityDisclosureReport", "https://rdf.spdx.org/v3/Core/ExternalRefType/vulnerabilityDisclosureReport"),
        ("vulnerabilityExploitabilityAssessment", "https://rdf.spdx.org/v3/Core/ExternalRefType/vulnerabilityExploitabilityAssessment"),
    ]
    # A reference to an alternative download location.
    altDownloadLocation = "https://rdf.spdx.org/v3/Core/ExternalRefType/altDownloadLocation"
    # A reference to an alternative web page.
    altWebPage = "https://rdf.spdx.org/v3/Core/ExternalRefType/altWebPage"
    # A reference to binary artifacts related to a package.
    binaryArtifact = "https://rdf.spdx.org/v3/Core/ExternalRefType/binaryArtifact"
    # A reference to a bower package.
    bower = "https://rdf.spdx.org/v3/Core/ExternalRefType/bower"
    # A reference build metadata related to a published package.
    buildMeta = "https://rdf.spdx.org/v3/Core/ExternalRefType/buildMeta"
    # A reference build system used to create or publish the package.
    buildSystem = "https://rdf.spdx.org/v3/Core/ExternalRefType/buildSystem"
    # A reference to a certification report for a package from an accredited/independent body.
    certificationReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/certificationReport"
    # A reference to the instant messaging system used by the maintainer for a package.
    chat = "https://rdf.spdx.org/v3/Core/ExternalRefType/chat"
    # A reference to a Software Composition Analysis (SCA) report.
    componentAnalysisReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/componentAnalysisReport"
    # A reference to the documentation for a package.
    documentation = "https://rdf.spdx.org/v3/Core/ExternalRefType/documentation"
    # A reference to a dynamic analysis report for a package.
    dynamicAnalysisReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/dynamicAnalysisReport"
    # A reference to the End Of Sale (EOS) and/or End Of Life (EOL) information related to a package.
    eolNotice = "https://rdf.spdx.org/v3/Core/ExternalRefType/eolNotice"
    # A reference to a export control assessment for a package.
    exportControlAssessment = "https://rdf.spdx.org/v3/Core/ExternalRefType/exportControlAssessment"
    # A reference to funding information related to a package.
    funding = "https://rdf.spdx.org/v3/Core/ExternalRefType/funding"
    # A reference to the issue tracker for a package.
    issueTracker = "https://rdf.spdx.org/v3/Core/ExternalRefType/issueTracker"
    # A reference to additional license information related to an artifact.
    license = "https://rdf.spdx.org/v3/Core/ExternalRefType/license"
    # A reference to the mailing list used by the maintainer for a package.
    mailingList = "https://rdf.spdx.org/v3/Core/ExternalRefType/mailingList"
    # A reference to a maven repository artifact.
    mavenCentral = "https://rdf.spdx.org/v3/Core/ExternalRefType/mavenCentral"
    # A reference to metrics related to package such as OpenSSF scorecards.
    metrics = "https://rdf.spdx.org/v3/Core/ExternalRefType/metrics"
    # A reference to an npm package.
    npm = "https://rdf.spdx.org/v3/Core/ExternalRefType/npm"
    # A reference to a nuget package.
    nuget = "https://rdf.spdx.org/v3/Core/ExternalRefType/nuget"
    # Used when the type doesn't match any of the other options.
    other = "https://rdf.spdx.org/v3/Core/ExternalRefType/other"
    # A reference to a privacy assessment for a package.
    privacyAssessment = "https://rdf.spdx.org/v3/Core/ExternalRefType/privacyAssessment"
    # A reference to additional product metadata such as reference within organization's product catalog.
    productMetadata = "https://rdf.spdx.org/v3/Core/ExternalRefType/productMetadata"
    # A reference to a purchase order for a package.
    purchaseOrder = "https://rdf.spdx.org/v3/Core/ExternalRefType/purchaseOrder"
    # A reference to a quality assessment for a package.
    qualityAssessmentReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/qualityAssessmentReport"
    # A reference to a published list of releases for a package.
    releaseHistory = "https://rdf.spdx.org/v3/Core/ExternalRefType/releaseHistory"
    # A reference to the release notes for a package.
    releaseNotes = "https://rdf.spdx.org/v3/Core/ExternalRefType/releaseNotes"
    # A reference to a risk assessment for a package.
    riskAssessment = "https://rdf.spdx.org/v3/Core/ExternalRefType/riskAssessment"
    # A reference to a runtime analysis report for a package.
    runtimeAnalysisReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/runtimeAnalysisReport"
    # A reference to information assuring that the software is developed using security practices as defined by [NIST SP 800-218 Secure Software Development Framework (SSDF)](https://csrc.nist.gov/publications/detail/sp/800-218/final) or [CISA Secure Software Development Attestation Form](https://www.cisa.gov/sites/default/files/2023-04/secure-software-self-attestation_common-form_508.pdf).
    secureSoftwareAttestation = "https://rdf.spdx.org/v3/Core/ExternalRefType/secureSoftwareAttestation"
    # A reference to the security adversary model for a package.
    securityAdversaryModel = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityAdversaryModel"
    # A reference to a published security advisory (where advisory as defined per ISO 29147:2018) that may affect one or more elements, e.g., vendor advisories or specific NVD entries.
    securityAdvisory = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityAdvisory"
    # A reference to the patch or source code that fixes a vulnerability.
    securityFix = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityFix"
    # A reference to related security information of unspecified type.
    securityOther = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityOther"
    # A reference to a [penetration test](https://en.wikipedia.org/wiki/Penetration_test) report for a package.
    securityPenTestReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityPenTestReport"
    # A reference to instructions for reporting newly discovered security vulnerabilities for a package.
    securityPolicy = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityPolicy"
    # A reference the [security threat model](https://en.wikipedia.org/wiki/Threat_model) for a package.
    securityThreatModel = "https://rdf.spdx.org/v3/Core/ExternalRefType/securityThreatModel"
    # A reference to a social media channel for a package.
    socialMedia = "https://rdf.spdx.org/v3/Core/ExternalRefType/socialMedia"
    # A reference to an artifact containing the sources for a package.
    sourceArtifact = "https://rdf.spdx.org/v3/Core/ExternalRefType/sourceArtifact"
    # A reference to a static analysis report for a package.
    staticAnalysisReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/staticAnalysisReport"
    # A reference to the software support channel or other support information for a package.
    support = "https://rdf.spdx.org/v3/Core/ExternalRefType/support"
    # A reference to a version control system related to a software artifact.
    vcs = "https://rdf.spdx.org/v3/Core/ExternalRefType/vcs"
    # A reference to a Vulnerability Disclosure Report (VDR) which provides the software supplier's analysis and findings describing the impact (or lack of impact) that reported vulnerabilities have on packages or products in the supplier's SBOM as defined in [NIST SP 800-161](https://csrc.nist.gov/publications/detail/sp/800-161/rev-1/final).
    vulnerabilityDisclosureReport = "https://rdf.spdx.org/v3/Core/ExternalRefType/vulnerabilityDisclosureReport"
    # A reference to a Vulnerability Exploitability eXchange (VEX) statement which provides information on whether a product is impacted by a specific vulnerability in an included package and, if affected, whether there are actions recommended to remediate. See also [NTIA VEX one-page](https://ntia.gov/files/ntia/publications/vex_one-page_summary.pdf).
    vulnerabilityExploitabilityAssessment = "https://rdf.spdx.org/v3/Core/ExternalRefType/vulnerabilityExploitabilityAssessment"


# A mathematical algorithm that maps data of arbitrary size to a bit string.
class https_rdfspdxorgv3CoreHashAlgorithm(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/HashAlgorithm"
    valid_values = [
        ("blake2b256", "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b256"),
        ("blake2b384", "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b384"),
        ("blake2b512", "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b512"),
        ("blake3", "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake3"),
        ("crystalsDilithium", "https://rdf.spdx.org/v3/Core/HashAlgorithm/crystalsDilithium"),
        ("crystalsKyber", "https://rdf.spdx.org/v3/Core/HashAlgorithm/crystalsKyber"),
        ("falcon", "https://rdf.spdx.org/v3/Core/HashAlgorithm/falcon"),
        ("md2", "https://rdf.spdx.org/v3/Core/HashAlgorithm/md2"),
        ("md4", "https://rdf.spdx.org/v3/Core/HashAlgorithm/md4"),
        ("md5", "https://rdf.spdx.org/v3/Core/HashAlgorithm/md5"),
        ("md6", "https://rdf.spdx.org/v3/Core/HashAlgorithm/md6"),
        ("other", "https://rdf.spdx.org/v3/Core/HashAlgorithm/other"),
        ("sha1", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha1"),
        ("sha224", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha224"),
        ("sha256", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha256"),
        ("sha384", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha384"),
        ("sha3_224", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_224"),
        ("sha3_256", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_256"),
        ("sha3_384", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_384"),
        ("sha3_512", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_512"),
        ("sha512", "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha512"),
    ]
    # blake2b algorithm with a digest size of 256 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    blake2b256 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b256"
    # blake2b algorithm with a digest size of 384 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    blake2b384 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b384"
    # blake2b algorithm with a digest size of 512 https://datatracker.ietf.org/doc/html/rfc7693#section-4
    blake2b512 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake2b512"
    # https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf
    blake3 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/blake3"
    # https://pq-crystals.org/dilithium/index.shtml
    crystalsDilithium = "https://rdf.spdx.org/v3/Core/HashAlgorithm/crystalsDilithium"
    # https://pq-crystals.org/kyber/index.shtml
    crystalsKyber = "https://rdf.spdx.org/v3/Core/HashAlgorithm/crystalsKyber"
    # https://falcon-sign.info/falcon.pdf
    falcon = "https://rdf.spdx.org/v3/Core/HashAlgorithm/falcon"
    # https://datatracker.ietf.org/doc/rfc1319/
    md2 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/md2"
    # https://datatracker.ietf.org/doc/html/rfc1186
    md4 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/md4"
    # https://datatracker.ietf.org/doc/html/rfc1321
    md5 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/md5"
    # https://people.csail.mit.edu/rivest/pubs/RABCx08.pdf
    md6 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/md6"
    # any hashing algorithm that does not exist in this list of entries
    other = "https://rdf.spdx.org/v3/Core/HashAlgorithm/other"
    # https://datatracker.ietf.org/doc/html/rfc3174
    sha1 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha1"
    # secure hashing algorithm with a digest length of 224 https://datatracker.ietf.org/doc/html/draft-ietf-pkix-sha224-01
    sha224 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha224"
    # secure hashing algorithm with a digest length of 256 https://www.rfc-editor.org/rfc/rfc4634
    sha256 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha256"
    # secure hashing algorithm with a digest length of 384 https://www.rfc-editor.org/rfc/rfc4634
    sha384 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha384"
    # sha3 with a digest length of 224 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    sha3_224 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_224"
    # sha3 with a digest length of 256 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    sha3_256 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_256"
    # sha3 with a digest length of 384 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    sha3_384 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_384"
    # sha3 with a digest length of 512 https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
    sha3_512 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha3_512"
    # secure hashing algorithm with a digest length of 512 https://www.rfc-editor.org/rfc/rfc4634
    sha512 = "https://rdf.spdx.org/v3/Core/HashAlgorithm/sha512"


# Provide an enumerated set of software lifecycle phases that can provide context to relationships.
class https_rdfspdxorgv3CoreLifecycleScopeType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/LifecycleScopeType"
    valid_values = [
        ("build", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/build"),
        ("design", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/design"),
        ("development", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/development"),
        ("other", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/other"),
        ("runtime", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/runtime"),
        ("test", "https://rdf.spdx.org/v3/Core/LifecycleScopeType/test"),
    ]
    # A relationship has specific context implications during an element's build phase, during development.
    build = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/build"
    # A relationship has specific context implications during an element's design.
    design = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/design"
    # A relationship has specific context implications during development phase of an element.
    development = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/development"
    # A relationship has other specific context information necessary to capture that the above set of enumerations does not handle.
    other = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/other"
    # A relationship has specific context implications during the execution phase of an element.
    runtime = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/runtime"
    # A relationship has specific context implications during an element's testing phase, during development.
    test = "https://rdf.spdx.org/v3/Core/LifecycleScopeType/test"


# Categories of presence or absence.
class https_rdfspdxorgv3CorePresenceType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/PresenceType"
    valid_values = [
        ("no", "https://rdf.spdx.org/v3/Core/PresenceType/no"),
        ("noAssertion", "https://rdf.spdx.org/v3/Core/PresenceType/noAssertion"),
        ("yes", "https://rdf.spdx.org/v3/Core/PresenceType/yes"),
    ]
    # Indicates absence of the field.
    no = "https://rdf.spdx.org/v3/Core/PresenceType/no"
    # Makes no assertion about the field.
    noAssertion = "https://rdf.spdx.org/v3/Core/PresenceType/noAssertion"
    # Indicates presence of the field.
    yes = "https://rdf.spdx.org/v3/Core/PresenceType/yes"


# Enumeration of the valid profiles.
class https_rdfspdxorgv3CoreProfileIdentifierType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType"
    valid_values = [
        ("ai", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/ai"),
        ("build", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/build"),
        ("core", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/core"),
        ("dataset", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/dataset"),
        ("expandedLicensing", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/expandedLicensing"),
        ("extension", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/extension"),
        ("security", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/security"),
        ("simpleLicensing", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/simpleLicensing"),
        ("software", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/software"),
        ("usage", "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/usage"),
    ]
    # the element follows the AI profile specification
    ai = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/ai"
    # the element follows the Build profile specification
    build = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/build"
    # the element follows the Core profile specification
    core = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/core"
    # the element follows the Dataset profile specification
    dataset = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/dataset"
    # the element follows the expanded Licensing profile specification
    expandedLicensing = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/expandedLicensing"
    # the element follows the Extension profile specification
    extension = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/extension"
    # the element follows the Security profile specification
    security = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/security"
    # the element follows the simple Licensing profile specification
    simpleLicensing = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/simpleLicensing"
    # the element follows the Software profile specification
    software = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/software"
    # the element follows the Usage profile specification
    usage = "https://rdf.spdx.org/v3/Core/ProfileIdentifierType/usage"


# Indicates whether a relationship is known to be complete, incomplete, or if no assertion is made with respect to relationship completeness.
class https_rdfspdxorgv3CoreRelationshipCompleteness(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/RelationshipCompleteness"
    valid_values = [
        ("complete", "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/complete"),
        ("incomplete", "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/incomplete"),
        ("noAssertion", "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/noAssertion"),
    ]
    # The relationship is known to be exhaustive.
    complete = "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/complete"
    # The relationship is known not to be exhaustive.
    incomplete = "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/incomplete"
    # No assertion can be made about the completeness of the relationship.
    noAssertion = "https://rdf.spdx.org/v3/Core/RelationshipCompleteness/noAssertion"


# Information about the relationship between two Elements.
class https_rdfspdxorgv3CoreRelationshipType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/RelationshipType"
    valid_values = [
        ("affects", "https://rdf.spdx.org/v3/Core/RelationshipType/affects"),
        ("amendedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/amendedBy"),
        ("ancestorOf", "https://rdf.spdx.org/v3/Core/RelationshipType/ancestorOf"),
        ("availableFrom", "https://rdf.spdx.org/v3/Core/RelationshipType/availableFrom"),
        ("configures", "https://rdf.spdx.org/v3/Core/RelationshipType/configures"),
        ("contains", "https://rdf.spdx.org/v3/Core/RelationshipType/contains"),
        ("coordinatedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/coordinatedBy"),
        ("copiedTo", "https://rdf.spdx.org/v3/Core/RelationshipType/copiedTo"),
        ("delegatedTo", "https://rdf.spdx.org/v3/Core/RelationshipType/delegatedTo"),
        ("dependsOn", "https://rdf.spdx.org/v3/Core/RelationshipType/dependsOn"),
        ("descendantOf", "https://rdf.spdx.org/v3/Core/RelationshipType/descendantOf"),
        ("describes", "https://rdf.spdx.org/v3/Core/RelationshipType/describes"),
        ("doesNotAffect", "https://rdf.spdx.org/v3/Core/RelationshipType/doesNotAffect"),
        ("expandsTo", "https://rdf.spdx.org/v3/Core/RelationshipType/expandsTo"),
        ("exploitCreatedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/exploitCreatedBy"),
        ("fixedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/fixedBy"),
        ("fixedIn", "https://rdf.spdx.org/v3/Core/RelationshipType/fixedIn"),
        ("foundBy", "https://rdf.spdx.org/v3/Core/RelationshipType/foundBy"),
        ("generates", "https://rdf.spdx.org/v3/Core/RelationshipType/generates"),
        ("hasAddedFile", "https://rdf.spdx.org/v3/Core/RelationshipType/hasAddedFile"),
        ("hasAssessmentFor", "https://rdf.spdx.org/v3/Core/RelationshipType/hasAssessmentFor"),
        ("hasAssociatedVulnerability", "https://rdf.spdx.org/v3/Core/RelationshipType/hasAssociatedVulnerability"),
        ("hasConcludedLicense", "https://rdf.spdx.org/v3/Core/RelationshipType/hasConcludedLicense"),
        ("hasDataFile", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDataFile"),
        ("hasDeclaredLicense", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDeclaredLicense"),
        ("hasDeletedFile", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDeletedFile"),
        ("hasDependencyManifest", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDependencyManifest"),
        ("hasDistributionArtifact", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDistributionArtifact"),
        ("hasDocumentation", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDocumentation"),
        ("hasDynamicLink", "https://rdf.spdx.org/v3/Core/RelationshipType/hasDynamicLink"),
        ("hasEvidence", "https://rdf.spdx.org/v3/Core/RelationshipType/hasEvidence"),
        ("hasExample", "https://rdf.spdx.org/v3/Core/RelationshipType/hasExample"),
        ("hasHost", "https://rdf.spdx.org/v3/Core/RelationshipType/hasHost"),
        ("hasInputs", "https://rdf.spdx.org/v3/Core/RelationshipType/hasInputs"),
        ("hasMetadata", "https://rdf.spdx.org/v3/Core/RelationshipType/hasMetadata"),
        ("hasOptionalComponent", "https://rdf.spdx.org/v3/Core/RelationshipType/hasOptionalComponent"),
        ("hasOptionalDependency", "https://rdf.spdx.org/v3/Core/RelationshipType/hasOptionalDependency"),
        ("hasOutputs", "https://rdf.spdx.org/v3/Core/RelationshipType/hasOutputs"),
        ("hasPrerequsite", "https://rdf.spdx.org/v3/Core/RelationshipType/hasPrerequsite"),
        ("hasProvidedDependency", "https://rdf.spdx.org/v3/Core/RelationshipType/hasProvidedDependency"),
        ("hasRequirement", "https://rdf.spdx.org/v3/Core/RelationshipType/hasRequirement"),
        ("hasSpecification", "https://rdf.spdx.org/v3/Core/RelationshipType/hasSpecification"),
        ("hasStaticLink", "https://rdf.spdx.org/v3/Core/RelationshipType/hasStaticLink"),
        ("hasTest", "https://rdf.spdx.org/v3/Core/RelationshipType/hasTest"),
        ("hasTestCase", "https://rdf.spdx.org/v3/Core/RelationshipType/hasTestCase"),
        ("hasVariant", "https://rdf.spdx.org/v3/Core/RelationshipType/hasVariant"),
        ("invokedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/invokedBy"),
        ("modifiedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/modifiedBy"),
        ("other", "https://rdf.spdx.org/v3/Core/RelationshipType/other"),
        ("packagedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/packagedBy"),
        ("patchedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/patchedBy"),
        ("publishedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/publishedBy"),
        ("reportedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/reportedBy"),
        ("republishedBy", "https://rdf.spdx.org/v3/Core/RelationshipType/republishedBy"),
        ("serializedInArtifact", "https://rdf.spdx.org/v3/Core/RelationshipType/serializedInArtifact"),
        ("testedOn", "https://rdf.spdx.org/v3/Core/RelationshipType/testedOn"),
        ("trainedOn", "https://rdf.spdx.org/v3/Core/RelationshipType/trainedOn"),
        ("underInvestigationFor", "https://rdf.spdx.org/v3/Core/RelationshipType/underInvestigationFor"),
        ("usesTool", "https://rdf.spdx.org/v3/Core/RelationshipType/usesTool"),
    ]
    # (Security/VEX) The `from` vulnerability affect each `to` Element
    affects = "https://rdf.spdx.org/v3/Core/RelationshipType/affects"
    # The `from` Element is amended by each `to` Element
    amendedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/amendedBy"
    # The `from` Element is an ancestor of each `to` Element
    ancestorOf = "https://rdf.spdx.org/v3/Core/RelationshipType/ancestorOf"
    # The `from` Element is available from the additional supplier described by each `to` Element
    availableFrom = "https://rdf.spdx.org/v3/Core/RelationshipType/availableFrom"
    # The `from` Element is a configuration applied to each `to` Element during a LifecycleScopeType period
    configures = "https://rdf.spdx.org/v3/Core/RelationshipType/configures"
    # The `from` Element contains each `to` Element
    contains = "https://rdf.spdx.org/v3/Core/RelationshipType/contains"
    # (Security) The `from` Vulnerability is coordinatedBy the `to` Agent(s) (vendor, researcher, or consumer agent)
    coordinatedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/coordinatedBy"
    # The `from` Element has been copied to each `to` Element
    copiedTo = "https://rdf.spdx.org/v3/Core/RelationshipType/copiedTo"
    # The `from` Agent is delegating an action to the Agent of the `to` Relationship (which must be of type invokedBy) during a LifecycleScopeType. (e.g. the `to` invokedBy Relationship is being done on behalf of `from`)
    delegatedTo = "https://rdf.spdx.org/v3/Core/RelationshipType/delegatedTo"
    # The `from` Element depends on each `to` Element during a LifecycleScopeType period.
    dependsOn = "https://rdf.spdx.org/v3/Core/RelationshipType/dependsOn"
    # The `from` Element is a descendant of each `to` Element
    descendantOf = "https://rdf.spdx.org/v3/Core/RelationshipType/descendantOf"
    # The `from` Element describes each `to` Element. To denote the root(s) of a tree of elements in a collection, the rootElement property should be used.
    describes = "https://rdf.spdx.org/v3/Core/RelationshipType/describes"
    # (Security/VEX) The `from` Vulnerability has no impact on each `to` Element
    doesNotAffect = "https://rdf.spdx.org/v3/Core/RelationshipType/doesNotAffect"
    # The `from` archive expands out as an artifact described by each `to` Element
    expandsTo = "https://rdf.spdx.org/v3/Core/RelationshipType/expandsTo"
    # (Security) The `from` Vulnerability has had an exploit created against it by each `to` Agent
    exploitCreatedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/exploitCreatedBy"
    # (Security) Designates a `from` Vulnerability has been fixed by the `to` Agent(s)
    fixedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/fixedBy"
    # (Security/VEX) A `from` Vulnerability has been fixed in each of the `to` Element(s)
    fixedIn = "https://rdf.spdx.org/v3/Core/RelationshipType/fixedIn"
    # (Security) Designates a `from` Vulnerability was originally discovered by the `to` Agent(s)
    foundBy = "https://rdf.spdx.org/v3/Core/RelationshipType/foundBy"
    # The `from` Element generates each `to` Element
    generates = "https://rdf.spdx.org/v3/Core/RelationshipType/generates"
    # Every `to` Element is is a file added to the `from` Element (`from` hasAddedFile `to`)
    hasAddedFile = "https://rdf.spdx.org/v3/Core/RelationshipType/hasAddedFile"
    # (Security) Relates a `from` Vulnerability and each `to` Element(s) with a security assessment. To be used with `VulnAssessmentRelationship` types
    hasAssessmentFor = "https://rdf.spdx.org/v3/Core/RelationshipType/hasAssessmentFor"
    # (Security) Used to associate a `from` Artifact with each `to` Vulnerability
    hasAssociatedVulnerability = "https://rdf.spdx.org/v3/Core/RelationshipType/hasAssociatedVulnerability"
    # The `from` Software Artifact is concluded by the SPDX data creator to be governed by each `to` license
    hasConcludedLicense = "https://rdf.spdx.org/v3/Core/RelationshipType/hasConcludedLicense"
    # The `from` Element treats each `to` Element as a data file
    hasDataFile = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDataFile"
    # The `from` Software Artifact was discovered to actually contain each `to` license, for example as detected by use of automated tooling.
    hasDeclaredLicense = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDeclaredLicense"
    # Every `to` Element is a file deleted from the `from` Element (`from` hasDeletedFile `to`)
    hasDeletedFile = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDeletedFile"
    # The `from` Element has manifest files that contain dependency information in each `to` Element
    hasDependencyManifest = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDependencyManifest"
    # The `from` Element is distributed as an artifact in each Element `to`, (e.g. an RPM or archive file)
    hasDistributionArtifact = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDistributionArtifact"
    # The `from` Element is documented by each `to` Element
    hasDocumentation = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDocumentation"
    # The `from` Element dynamically links in each `to` Element, during a LifecycleScopeType period.
    hasDynamicLink = "https://rdf.spdx.org/v3/Core/RelationshipType/hasDynamicLink"
    # (Dataset) Every `to` Element is considered as evidence for the `from` Element (`from` hasEvidence `to`)
    hasEvidence = "https://rdf.spdx.org/v3/Core/RelationshipType/hasEvidence"
    # Every `to` Element is an example for the `from` Element (`from` hasExample `to`)
    hasExample = "https://rdf.spdx.org/v3/Core/RelationshipType/hasExample"
    # The `from` Build was run on the `to` Element during a LifecycleScopeType period (e.g. The host that the build runs on)
    hasHost = "https://rdf.spdx.org/v3/Core/RelationshipType/hasHost"
    # The `from` Build has each `to` Elements as an input during a LifecycleScopeType period.
    hasInputs = "https://rdf.spdx.org/v3/Core/RelationshipType/hasInputs"
    # Every `to` Element is metadata about the `from` Element (`from` hasMetadata `to`)
    hasMetadata = "https://rdf.spdx.org/v3/Core/RelationshipType/hasMetadata"
    # Every `to` Element is an optional component of the `from` Element (`from` hasOptionalComponent` `to`)
    hasOptionalComponent = "https://rdf.spdx.org/v3/Core/RelationshipType/hasOptionalComponent"
    # The `from` Element optionally depends on each `to` Element during a LifecycleScopeType period
    hasOptionalDependency = "https://rdf.spdx.org/v3/Core/RelationshipType/hasOptionalDependency"
    # The `from` Build element generates each `to` Element as an output during a LifecycleScopeType period.
    hasOutputs = "https://rdf.spdx.org/v3/Core/RelationshipType/hasOutputs"
    # The `from` Element has a prerequsite on each `to` Element, during a LifecycleScopeType period
    hasPrerequsite = "https://rdf.spdx.org/v3/Core/RelationshipType/hasPrerequsite"
    # The `from` Element has a dependency on each `to` Element, but dependency is not in the distributed artifact, but assumed to be provided, during a LifecycleScopeType period
    hasProvidedDependency = "https://rdf.spdx.org/v3/Core/RelationshipType/hasProvidedDependency"
    # The `from` Element has a requirement on each `to` Element, during a LifecycleScopeType period
    hasRequirement = "https://rdf.spdx.org/v3/Core/RelationshipType/hasRequirement"
    # Every `to` Element is a specification for the `from` Element (`from` hasSpecification `to`), during a LifecycleScopeType period
    hasSpecification = "https://rdf.spdx.org/v3/Core/RelationshipType/hasSpecification"
    # The `from` Element statically links in each `to` Element, during a LifecycleScopeType period
    hasStaticLink = "https://rdf.spdx.org/v3/Core/RelationshipType/hasStaticLink"
    # Every `to` Element is a test artifact for the `from` Element (`from` hasTest `to`), during a LifecycleScopeType period
    hasTest = "https://rdf.spdx.org/v3/Core/RelationshipType/hasTest"
    # Every `to` Element is a test case for the `from` Element (`from` hasTestCase `to`)
    hasTestCase = "https://rdf.spdx.org/v3/Core/RelationshipType/hasTestCase"
    # Every `to` Element is a variant the `from` Element (`from` hasVariant `to`)
    hasVariant = "https://rdf.spdx.org/v3/Core/RelationshipType/hasVariant"
    # The `from` Element was invoked by the `to` Agent during a LifecycleScopeType period (for example, a Build element that describes a build step)
    invokedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/invokedBy"
    # The `from` Element is modified by each `to` Element
    modifiedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/modifiedBy"
    # Every `to` Element is related to the `from` Element where the relationship type is not described by any of the SPDX relationhip types (this relationship is directionless)
    other = "https://rdf.spdx.org/v3/Core/RelationshipType/other"
    # Every `to` Element is a packaged instance of the `from` Element (`from` packagedBy `to`)
    packagedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/packagedBy"
    # Every `to` Element is a patch for the `from` Element (`from` patchedBy `to`)
    patchedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/patchedBy"
    # (Security) Designates a `from` Vulnerability was made available for public use or reference by each `to` Agent
    publishedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/publishedBy"
    # (Security) Designates a `from` Vulnerability was first reported to a project, vendor, or tracking database for formal identification by each `to` Agent
    reportedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/reportedBy"
    # (Security) Designates a `from` Vulnerability's details were tracked, aggregated, and/or enriched to improve context (i.e. NVD) by a `to` Agent(s)
    republishedBy = "https://rdf.spdx.org/v3/Core/RelationshipType/republishedBy"
    # The `from` SPDXDocument can be found in a serialized form in each `to` Artifact
    serializedInArtifact = "https://rdf.spdx.org/v3/Core/RelationshipType/serializedInArtifact"
    # (AI, Dataset) The `from` Element has been tested on the `to` Element
    testedOn = "https://rdf.spdx.org/v3/Core/RelationshipType/testedOn"
    # (AI, Dataset) The `from` Element has been trained by the `to` Element(s)
    trainedOn = "https://rdf.spdx.org/v3/Core/RelationshipType/trainedOn"
    # (Security/VEX) The `from` Vulnerability impact is being investigated for each `to` Element
    underInvestigationFor = "https://rdf.spdx.org/v3/Core/RelationshipType/underInvestigationFor"
    # The `from` Element uses each `to` Element as a tool during a LifecycleScopeType period.
    usesTool = "https://rdf.spdx.org/v3/Core/RelationshipType/usesTool"


# Indicates the type of support that is associated with an artifact.
class https_rdfspdxorgv3CoreSupportType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Core/SupportType"
    valid_values = [
        ("development", "https://rdf.spdx.org/v3/Core/SupportType/development"),
        ("endOfSupport", "https://rdf.spdx.org/v3/Core/SupportType/endOfSupport"),
        ("limitedSupport", "https://rdf.spdx.org/v3/Core/SupportType/limitedSupport"),
        ("noAssertion", "https://rdf.spdx.org/v3/Core/SupportType/noAssertion"),
        ("noSupport", "https://rdf.spdx.org/v3/Core/SupportType/noSupport"),
        ("support", "https://rdf.spdx.org/v3/Core/SupportType/support"),
    ]
    # the artifact is in active development and is not considered ready for formal support from the supplier.
    development = "https://rdf.spdx.org/v3/Core/SupportType/development"
    # there is a defined end of support for the artifact from the supplier.  This may also be referred to as end of life. There is a validUntilDate that can be used to signal when support ends for the artifact.
    endOfSupport = "https://rdf.spdx.org/v3/Core/SupportType/endOfSupport"
    # the artifact has been released, and there is limited support available from the supplier. There is a validUntilDate that can provide additional information about the duration of support.
    limitedSupport = "https://rdf.spdx.org/v3/Core/SupportType/limitedSupport"
    # no assertion about the type of support is made.   This is considered the default if no other support type is used.
    noAssertion = "https://rdf.spdx.org/v3/Core/SupportType/noAssertion"
    # there is no support for the artifact from the supplier, consumer assumes any support obligations.
    noSupport = "https://rdf.spdx.org/v3/Core/SupportType/noSupport"
    # the artifact has been released, and is supported from the supplier.   There is a validUntilDate that can provide additional information about the duration of support.
    support = "https://rdf.spdx.org/v3/Core/SupportType/support"


# Categories of confidentiality level.
class https_rdfspdxorgv3DatasetConfidentialityLevelType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType"
    valid_values = [
        ("amber", "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/amber"),
        ("clear", "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/clear"),
        ("green", "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/green"),
        ("red", "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/red"),
    ]
    # Data points in the dataset can be shared only with specific organizations and their clients on a need to know basis.
    amber = "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/amber"
    # Dataset may be distributed freely, without restriction.
    clear = "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/clear"
    # Dataset can be shared within a community of peers and partners.
    green = "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/green"
    # Data points in the dataset are highly confidential and can only be shared with named recipients.
    red = "https://rdf.spdx.org/v3/Dataset/ConfidentialityLevelType/red"


# Availability of dataset
class https_rdfspdxorgv3DatasetDatasetAvailabilityType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType"
    valid_values = [
        ("clickthrough", "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/clickthrough"),
        ("directDownload", "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/directDownload"),
        ("query", "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/query"),
        ("registration", "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/registration"),
        ("scrapingScript", "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/scrapingScript"),
    ]
    # the dataset is not publicly available and can only be accessed after affirmatively accepting terms on a clickthrough webpage.
    clickthrough = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/clickthrough"
    # the dataset is publicly available and can be downloaded directly.
    directDownload = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/directDownload"
    # the dataset is publicly available, but not all at once, and can only be accessed through queries which return parts of the dataset.
    query = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/query"
    # the dataset is not publicly available and an email registration is required before accessing the dataset, although without an affirmative acceptance of terms.
    registration = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/registration"
    # the dataset provider is not making available the underlying data and the dataset must be reassembled, typically using the provided script for scraping the data.
    scrapingScript = "https://rdf.spdx.org/v3/Dataset/DatasetAvailabilityType/scrapingScript"


# Enumeration of dataset types.
class https_rdfspdxorgv3DatasetDatasetType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Dataset/DatasetType"
    valid_values = [
        ("audio", "https://rdf.spdx.org/v3/Dataset/DatasetType/audio"),
        ("categorical", "https://rdf.spdx.org/v3/Dataset/DatasetType/categorical"),
        ("graph", "https://rdf.spdx.org/v3/Dataset/DatasetType/graph"),
        ("image", "https://rdf.spdx.org/v3/Dataset/DatasetType/image"),
        ("noAssertion", "https://rdf.spdx.org/v3/Dataset/DatasetType/noAssertion"),
        ("numeric", "https://rdf.spdx.org/v3/Dataset/DatasetType/numeric"),
        ("other", "https://rdf.spdx.org/v3/Dataset/DatasetType/other"),
        ("sensor", "https://rdf.spdx.org/v3/Dataset/DatasetType/sensor"),
        ("structured", "https://rdf.spdx.org/v3/Dataset/DatasetType/structured"),
        ("syntactic", "https://rdf.spdx.org/v3/Dataset/DatasetType/syntactic"),
        ("text", "https://rdf.spdx.org/v3/Dataset/DatasetType/text"),
        ("timeseries", "https://rdf.spdx.org/v3/Dataset/DatasetType/timeseries"),
        ("timestamp", "https://rdf.spdx.org/v3/Dataset/DatasetType/timestamp"),
        ("video", "https://rdf.spdx.org/v3/Dataset/DatasetType/video"),
    ]
    # data is audio based, such as a collection of music from the 80s.
    audio = "https://rdf.spdx.org/v3/Dataset/DatasetType/audio"
    # data that is classified into a discrete number of categories, such as the eye color of a population of people.
    categorical = "https://rdf.spdx.org/v3/Dataset/DatasetType/categorical"
    # data is in the form of a graph where entries are somehow related to each other through edges, such a social network of friends.
    graph = "https://rdf.spdx.org/v3/Dataset/DatasetType/graph"
    # data is a collection of images such as pictures of animals.
    image = "https://rdf.spdx.org/v3/Dataset/DatasetType/image"
    # data type is not known.
    noAssertion = "https://rdf.spdx.org/v3/Dataset/DatasetType/noAssertion"
    # data consists only of numeric entries.
    numeric = "https://rdf.spdx.org/v3/Dataset/DatasetType/numeric"
    # data is of a type not included in this list.
    other = "https://rdf.spdx.org/v3/Dataset/DatasetType/other"
    # data is recorded from a physical sensor, such as a thermometer reading or biometric device.
    sensor = "https://rdf.spdx.org/v3/Dataset/DatasetType/sensor"
    # data is stored in tabular format or retrieved from a relational database.
    structured = "https://rdf.spdx.org/v3/Dataset/DatasetType/structured"
    # data describes the syntax or semantics of a language or text, such as a parse tree used for natural language processing.
    syntactic = "https://rdf.spdx.org/v3/Dataset/DatasetType/syntactic"
    # data consists of unstructured text, such as a book, wikipedia article (without images), or transcript.
    text = "https://rdf.spdx.org/v3/Dataset/DatasetType/text"
    # data is recorded in an ordered sequence of timestamped entries, such as the price of a stock over the course of a day.
    timeseries = "https://rdf.spdx.org/v3/Dataset/DatasetType/timeseries"
    # data is recorded with a timestamp for each entry, but not necessarily ordered or at specific intervals, such as when a taxi ride starts and ends.
    timestamp = "https://rdf.spdx.org/v3/Dataset/DatasetType/timestamp"
    # data is video based, such as a collection of movie clips featuring Tom Hanks.
    video = "https://rdf.spdx.org/v3/Dataset/DatasetType/video"


# Specifies the CVSS base, temporal, threat, or environmental severity type.
class https_rdfspdxorgv3SecurityCvssSeverityType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Security/CvssSeverityType"
    valid_values = [
        ("critical", "https://rdf.spdx.org/v3/Security/CvssSeverityType/critical"),
        ("high", "https://rdf.spdx.org/v3/Security/CvssSeverityType/high"),
        ("low", "https://rdf.spdx.org/v3/Security/CvssSeverityType/low"),
        ("medium", "https://rdf.spdx.org/v3/Security/CvssSeverityType/medium"),
        ("none", "https://rdf.spdx.org/v3/Security/CvssSeverityType/none"),
    ]
    # When a CVSS score is between 9.0 - 10.0
    critical = "https://rdf.spdx.org/v3/Security/CvssSeverityType/critical"
    # When a CVSS score is between 7.0 - 8.9
    high = "https://rdf.spdx.org/v3/Security/CvssSeverityType/high"
    # When a CVSS score is between 0 - 3.9
    low = "https://rdf.spdx.org/v3/Security/CvssSeverityType/low"
    # When a CVSS score is between 4 - 6.9
    medium = "https://rdf.spdx.org/v3/Security/CvssSeverityType/medium"
    # When a CVSS score is 0
    none = "https://rdf.spdx.org/v3/Security/CvssSeverityType/none"


# Specifies the exploit catalog type.
class https_rdfspdxorgv3SecurityExploitCatalogType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Security/ExploitCatalogType"
    valid_values = [
        ("kev", "https://rdf.spdx.org/v3/Security/ExploitCatalogType/kev"),
        ("other", "https://rdf.spdx.org/v3/Security/ExploitCatalogType/other"),
    ]
    # CISA's Known Exploited Vulnerability (KEV) Catalog
    kev = "https://rdf.spdx.org/v3/Security/ExploitCatalogType/kev"
    # Other exploit catalogs
    other = "https://rdf.spdx.org/v3/Security/ExploitCatalogType/other"


# Specifies the SSVC decision type.
class https_rdfspdxorgv3SecuritySsvcDecisionType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Security/SsvcDecisionType"
    valid_values = [
        ("act", "https://rdf.spdx.org/v3/Security/SsvcDecisionType/act"),
        ("attend", "https://rdf.spdx.org/v3/Security/SsvcDecisionType/attend"),
        ("track", "https://rdf.spdx.org/v3/Security/SsvcDecisionType/track"),
        ("trackStar", "https://rdf.spdx.org/v3/Security/SsvcDecisionType/trackStar"),
    ]
    # The vulnerability requires attention from the organization's internal, supervisory-level and leadership-level individuals. Necessary actions include requesting assistance or information about the vulnerability, as well as publishing a notification either internally and/or externally. Typically, internal groups would meet to determine the overall response and then execute agreed upon actions. CISA recommends remediating Act vulnerabilities as soon as possible.
    act = "https://rdf.spdx.org/v3/Security/SsvcDecisionType/act"
    # The vulnerability requires attention from the organization's internal, supervisory-level individuals. Necessary actions include requesting assistance or information about the vulnerability, and may involve publishing a notification either internally and/or externally. CISA recommends remediating Attend vulnerabilities sooner than standard update timelines.
    attend = "https://rdf.spdx.org/v3/Security/SsvcDecisionType/attend"
    # The vulnerability does not require action at this time. The organization would continue to track the vulnerability and reassess it if new information becomes available. CISA recommends remediating Track vulnerabilities within standard update timelines.
    track = "https://rdf.spdx.org/v3/Security/SsvcDecisionType/track"
    # (Track* in the SSVC spec) The vulnerability contains specific characteristics that may require closer monitoring for changes. CISA recommends remediating Track* vulnerabilities within standard update timelines.
    trackStar = "https://rdf.spdx.org/v3/Security/SsvcDecisionType/trackStar"


# Specifies the VEX justification type.
class https_rdfspdxorgv3SecurityVexJustificationType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Security/VexJustificationType"
    valid_values = [
        ("componentNotPresent", "https://rdf.spdx.org/v3/Security/VexJustificationType/componentNotPresent"),
        ("inlineMitigationsAlreadyExist", "https://rdf.spdx.org/v3/Security/VexJustificationType/inlineMitigationsAlreadyExist"),
        ("vulnerableCodeCannotBeControlledByAdversary", "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeCannotBeControlledByAdversary"),
        ("vulnerableCodeNotInExecutePath", "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeNotInExecutePath"),
        ("vulnerableCodeNotPresent", "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeNotPresent"),
    ]
    # The software is not affected because the vulnerable component is not in the product.
    componentNotPresent = "https://rdf.spdx.org/v3/Security/VexJustificationType/componentNotPresent"
    # Built-in inline controls or mitigations prevent an adversary from leveraging the vulnerability.
    inlineMitigationsAlreadyExist = "https://rdf.spdx.org/v3/Security/VexJustificationType/inlineMitigationsAlreadyExist"
    # The vulnerable component is present, and the component contains the vulnerable code. However, vulnerable code is used in such a way that an attacker cannot mount any anticipated attack.
    vulnerableCodeCannotBeControlledByAdversary = "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeCannotBeControlledByAdversary"
    # The affected code is not reachable through the execution of the code, including non-anticipated states of the product.
    vulnerableCodeNotInExecutePath = "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeNotInExecutePath"
    # The product is not affected because the code underlying the vulnerability is not present in the product.
    vulnerableCodeNotPresent = "https://rdf.spdx.org/v3/Security/VexJustificationType/vulnerableCodeNotPresent"


# Provides a set of values to be used to describe the common types of SBOMs that tools may create.
class https_rdfspdxorgv3SoftwareSbomType(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Software/SbomType"
    valid_values = [
        ("analyzed", "https://rdf.spdx.org/v3/Software/SbomType/analyzed"),
        ("build", "https://rdf.spdx.org/v3/Software/SbomType/build"),
        ("deployed", "https://rdf.spdx.org/v3/Software/SbomType/deployed"),
        ("design", "https://rdf.spdx.org/v3/Software/SbomType/design"),
        ("runtime", "https://rdf.spdx.org/v3/Software/SbomType/runtime"),
        ("source", "https://rdf.spdx.org/v3/Software/SbomType/source"),
    ]
    # SBOM generated through analysis of artifacts (e.g., executables, packages, containers, and virtual machine images) after its build. Such analysis generally requires a variety of heuristics. In some contexts, this may also be referred to as a “3rd party” SBOM.
    analyzed = "https://rdf.spdx.org/v3/Software/SbomType/analyzed"
    # SBOM generated as part of the process of building the software to create a releasable artifact (e.g., executable or package) from data such as source files, dependencies, built components, build process ephemeral data, and other SBOMs.
    build = "https://rdf.spdx.org/v3/Software/SbomType/build"
    # SBOM provides an inventory of software that is present on a system. This may be an assembly of other SBOMs that combines analysis of configuration options, and examination of execution behavior in a (potentially simulated) deployment environment.
    deployed = "https://rdf.spdx.org/v3/Software/SbomType/deployed"
    # SBOM of intended, planned software project or product with included components (some of which may not yet exist) for a new software artifact.
    design = "https://rdf.spdx.org/v3/Software/SbomType/design"
    # SBOM generated through instrumenting the system running the software, to capture only components present in the system, as well as external call-outs or dynamically loaded components. In some contexts, this may also be referred to as an “Instrumented” or “Dynamic” SBOM.
    runtime = "https://rdf.spdx.org/v3/Software/SbomType/runtime"
    # SBOM created directly from the development environment, source files, and included dependencies used to build an product artifact.
    source = "https://rdf.spdx.org/v3/Software/SbomType/source"


# Provides information about the primary purpose of an Element.
class https_rdfspdxorgv3SoftwareSoftwarePurpose(EnumProp):
    TYPE = "https://rdf.spdx.org/v3/Software/SoftwarePurpose"
    valid_values = [
        ("application", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/application"),
        ("archive", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/archive"),
        ("bom", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/bom"),
        ("configuration", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/configuration"),
        ("container", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/container"),
        ("data", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/data"),
        ("device", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/device"),
        ("deviceDriver", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/deviceDriver"),
        ("diskImage", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/diskImage"),
        ("documentation", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/documentation"),
        ("evidence", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/evidence"),
        ("executable", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/executable"),
        ("file", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/file"),
        ("filesystemImage", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/filesystemImage"),
        ("firmware", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/firmware"),
        ("framework", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/framework"),
        ("install", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/install"),
        ("library", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/library"),
        ("manifest", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/manifest"),
        ("model", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/model"),
        ("module", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/module"),
        ("operatingSystem", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/operatingSystem"),
        ("other", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/other"),
        ("patch", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/patch"),
        ("platform", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/platform"),
        ("requirement", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/requirement"),
        ("source", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/source"),
        ("specification", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/specification"),
        ("test", "https://rdf.spdx.org/v3/Software/SoftwarePurpose/test"),
    ]
    # the Element is a software application
    application = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/application"
    # the Element is an archived collection of one or more files (.tar, .zip, etc)
    archive = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/archive"
    # Element is a bill of materials
    bom = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/bom"
    # Element is configuration data
    configuration = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/configuration"
    # the Element is a container image which can be used by a container runtime application
    container = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/container"
    # Element is data
    data = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/data"
    # the Element refers to a chipset, processor, or electronic board
    device = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/device"
    # Element represents software that controls hardware devices
    deviceDriver = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/deviceDriver"
    # the Element refers to a disk image that can be written to a disk, booted in a VM, etc. A disk image typically contains most or all of the components necessary to boot, such as bootloaders, kernels, firmware, userspace, etc.
    diskImage = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/diskImage"
    # Element is documentation
    documentation = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/documentation"
    # the Element is the evidence that a specification or requirement has been fulfilled
    evidence = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/evidence"
    # Element is an Artifact that can be run on a computer
    executable = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/executable"
    # the Element is a single file which can be independently distributed (configuration file, statically linked binary, Kubernetes deployment, etc)
    file = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/file"
    # the Element is a file system image that can be written to a disk (or virtual) partition
    filesystemImage = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/filesystemImage"
    # the Element provides low level control over a device's hardware
    firmware = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/firmware"
    # the Element is a software framework
    framework = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/framework"
    # the Element is used to install software on disk
    install = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/install"
    # the Element is a software library
    library = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/library"
    # the Element is a software manifest
    manifest = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/manifest"
    # the Element is a machine learning or artificial intelligence model
    model = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/model"
    # the Element is a module of a piece of software
    module = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/module"
    # the Element is an operating system
    operatingSystem = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/operatingSystem"
    # the Element doesn't fit into any of the other categories
    other = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/other"
    # Element contains a set of changes to update, fix, or improve another Element
    patch = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/patch"
    # Element represents a runtime environment
    platform = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/platform"
    # the Element provides a requirement needed as input for another Element
    requirement = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/requirement"
    # the Element is a single or a collection of source files
    source = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/source"
    # the Element is a plan, guideline or strategy how to create, perform or analyse an application
    specification = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/specification"
    # The Element is a test used to verify functionality on an software element
    test = "https://rdf.spdx.org/v3/Software/SoftwarePurpose/test"


# CLASSES
# Provides information about the creation of the Element.
class https_rdfspdxorgv3CoreCreationInfo(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/CreationInfo"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides a reference number that can be used to understand how to parse and interpret an Element.
        self._add_property(
            "specVersion",
            StringProp(pattern=r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$",),
            iri="https://rdf.spdx.org/v3/Core/specVersion",
            min_count=1,
        )
        # Provide consumers with comments by the creator of the Element about the Element.
        self._add_property(
            "comment",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/comment",
        )
        # Identifies when the Element was originally created.
        self._add_property(
            "created",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/created",
            min_count=1,
        )
        # Identifies who or what created the Element.
        self._add_property(
            "createdBy",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreAgent, False)),
            iri="https://rdf.spdx.org/v3/Core/createdBy",
            min_count=1,
        )
        # Identifies the tooling that was used during the creation of the Element.
        self._add_property(
            "createdUsing",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreTool, False)),
            iri="https://rdf.spdx.org/v3/Core/createdUsing",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/CreationInfo"] = https_rdfspdxorgv3CoreCreationInfo


# A key with an associated value.
class https_rdfspdxorgv3CoreDictionaryEntry(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/DictionaryEntry"

    def __init__(self, **kwargs):
        super().__init__()
        # A key used in a generic key-value pair.
        self._add_property(
            "key",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/key",
            min_count=1,
        )
        # A value used in a generic key-value pair.
        self._add_property(
            "value",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/value",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/DictionaryEntry"] = https_rdfspdxorgv3CoreDictionaryEntry


# Base domain class from which all other SPDX-3.0 domain classes derive.
class https_rdfspdxorgv3CoreElement(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/Element"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies the name of an Element as designated by the creator.
        self._add_property(
            "name",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/name",
        )
        # A short description of an Element.
        self._add_property(
            "summary",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/summary",
        )
        # Provides a detailed description of the Element.
        self._add_property(
            "description",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/description",
        )
        # Provide consumers with comments by the creator of the Element about the Element.
        self._add_property(
            "comment",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/comment",
        )
        # Provides information about the creation of the Element.
        self._add_property(
            "creationInfo",
            ObjectProp(https_rdfspdxorgv3CoreCreationInfo, True),
            iri="https://rdf.spdx.org/v3/Core/creationInfo",
            min_count=1,
        )
        # Provides an IntegrityMethod with which the integrity of an Element can be asserted.
        self._add_property(
            "verifiedUsing",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreIntegrityMethod, False)),
            iri="https://rdf.spdx.org/v3/Core/verifiedUsing",
        )
        # Points to a resource outside the scope of the SPDX-3.0 content
        # that provides additional characteristics of an Element.
        self._add_property(
            "externalRef",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreExternalRef, False)),
            iri="https://rdf.spdx.org/v3/Core/externalRef",
        )
        # Provides a reference to a resource outside the scope of SPDX-3.0 content
        # that uniquely identifies an Element.
        self._add_property(
            "externalIdentifier",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreExternalIdentifier, False)),
            iri="https://rdf.spdx.org/v3/Core/externalIdentifier",
        )
        # Specifies an Extension characterization of some aspect of an Element.
        self._add_property(
            "extension",
            ListProp(ObjectProp(https_rdfspdxorgv3ExtensionExtension, False)),
            iri="https://rdf.spdx.org/v3/Core/extension",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Element"] = https_rdfspdxorgv3CoreElement


# A collection of Elements, not necessarily with unifying context.
class https_rdfspdxorgv3CoreElementCollection(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/ElementCollection"

    def __init__(self, **kwargs):
        super().__init__()
        # Refers to one or more Elements that are part of an ElementCollection.
        self._add_property(
            "element",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreElement, False)),
            iri="https://rdf.spdx.org/v3/Core/element",
        )
        # This property is used to denote the root Element(s) of a tree of elements contained in an SBOM.
        self._add_property(
            "rootElement",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreElement, False)),
            iri="https://rdf.spdx.org/v3/Core/rootElement",
        )
        # Describes one a profile which the creator of this ElementCollection intends to conform to.
        self._add_property(
            "profileConformance",
            ListProp(https_rdfspdxorgv3CoreProfileIdentifierType()),
            iri="https://rdf.spdx.org/v3/Core/profileConformance",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/ElementCollection"] = https_rdfspdxorgv3CoreElementCollection


# A reference to a resource outside the scope of SPDX-3.0 content that uniquely identifies an Element.
class https_rdfspdxorgv3CoreExternalIdentifier(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/ExternalIdentifier"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the type of the external identifier.
        self._add_property(
            "externalIdentifierType",
            https_rdfspdxorgv3CoreExternalIdentifierType(),
            iri="https://rdf.spdx.org/v3/Core/externalIdentifierType",
            min_count=1,
        )
        # Uniquely identifies an external element.
        self._add_property(
            "identifier",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/identifier",
            min_count=1,
        )
        # Provide consumers with comments by the creator of the Element about the Element.
        self._add_property(
            "comment",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/comment",
        )
        # Provides the location for more information regarding an external identifier.
        self._add_property(
            "identifierLocator",
            ListProp(AnyURIProp()),
            iri="https://rdf.spdx.org/v3/Core/identifierLocator",
        )
        # An entity that is authorized to issue identification credentials.
        self._add_property(
            "issuingAuthority",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/issuingAuthority",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/ExternalIdentifier"] = https_rdfspdxorgv3CoreExternalIdentifier


# A map of Element identifiers that are used within a Document but defined external to that Document.
class https_rdfspdxorgv3CoreExternalMap(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/ExternalMap"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies an external Element used within a Document but defined external to that Document.
        self._add_property(
            "externalSpdxId",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Core/externalSpdxId",
            min_count=1,
        )
        # Provides an IntegrityMethod with which the integrity of an Element can be asserted.
        self._add_property(
            "verifiedUsing",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreIntegrityMethod, False)),
            iri="https://rdf.spdx.org/v3/Core/verifiedUsing",
        )
        # Provides an indication of where to retrieve an external Element.
        self._add_property(
            "locationHint",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Core/locationHint",
        )
        # Artifact representing a serialization instance of SPDX data containing the definition of a particular Element.
        self._add_property(
            "definingArtifact",
            ObjectProp(https_rdfspdxorgv3CoreArtifact, False),
            iri="https://rdf.spdx.org/v3/Core/definingArtifact",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/ExternalMap"] = https_rdfspdxorgv3CoreExternalMap


# A reference to a resource outside the scope of SPDX-3.0 content.
class https_rdfspdxorgv3CoreExternalRef(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/ExternalRef"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the type of the external reference.
        self._add_property(
            "externalRefType",
            https_rdfspdxorgv3CoreExternalRefType(),
            iri="https://rdf.spdx.org/v3/Core/externalRefType",
        )
        # Provides the location of an external reference.
        self._add_property(
            "locator",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Core/locator",
        )
        # Specifies the media type of an Element or Property.
        self._add_property(
            "contentType",
            StringProp(pattern=r"^[^\/]+\/[^\/]+$",),
            iri="https://rdf.spdx.org/v3/Core/contentType",
        )
        # Provide consumers with comments by the creator of the Element about the Element.
        self._add_property(
            "comment",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/comment",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/ExternalRef"] = https_rdfspdxorgv3CoreExternalRef


# Provides an independently reproducible mechanism that permits verification of a specific Element.
class https_rdfspdxorgv3CoreIntegrityMethod(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/IntegrityMethod"

    def __init__(self, **kwargs):
        super().__init__()
        # Provide consumers with comments by the creator of the Element about the Element.
        self._add_property(
            "comment",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/comment",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/IntegrityMethod"] = https_rdfspdxorgv3CoreIntegrityMethod


# A mapping between prefixes and namespace partial URIs.
class https_rdfspdxorgv3CoreNamespaceMap(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/NamespaceMap"

    def __init__(self, **kwargs):
        super().__init__()
        # A substitute for a URI.
        self._add_property(
            "prefix",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/prefix",
            min_count=1,
        )
        # Provides an unambiguous mechanism for conveying a URI fragment portion of an ElementID.
        self._add_property(
            "namespace",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Core/namespace",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/NamespaceMap"] = https_rdfspdxorgv3CoreNamespaceMap


# An SPDX version 2.X compatible verification method for software packages.
class https_rdfspdxorgv3CorePackageVerificationCode(https_rdfspdxorgv3CoreIntegrityMethod):
    TYPE = "https://rdf.spdx.org/v3/Core/PackageVerificationCode"

    def __init__(self, **kwargs):
        super().__init__()
        # The result of applying a hash algorithm to an Element.
        self._add_property(
            "hashValue",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/hashValue",
            min_count=1,
        )
        # The relative file name of a file to be excluded from the `PackageVerificationCode`.
        self._add_property(
            "packageVerificationCodeExcludedFile",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Core/packageVerificationCodeExcludedFile",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/PackageVerificationCode"] = https_rdfspdxorgv3CorePackageVerificationCode


# A tuple of two positive integers that define a range.
class https_rdfspdxorgv3CorePositiveIntegerRange(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Core/PositiveIntegerRange"

    def __init__(self, **kwargs):
        super().__init__()
        # Defines the beginning of a range.
        self._add_property(
            "beginIntegerRange",
            PositiveIntegerProp(),
            iri="https://rdf.spdx.org/v3/Core/beginIntegerRange",
            min_count=1,
        )
        # Defines the end of a range.
        self._add_property(
            "endIntegerRange",
            PositiveIntegerProp(),
            iri="https://rdf.spdx.org/v3/Core/endIntegerRange",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/PositiveIntegerRange"] = https_rdfspdxorgv3CorePositiveIntegerRange


# Describes a relationship between one or more elements.
class https_rdfspdxorgv3CoreRelationship(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/Relationship"

    def __init__(self, **kwargs):
        super().__init__()
        # References the Element on the left-hand side of a relationship.
        self._add_property(
            "from_",
            ObjectProp(https_rdfspdxorgv3CoreElement, True),
            iri="https://rdf.spdx.org/v3/Core/from",
            min_count=1,
        )
        # References an Element on the right-hand side of a relationship.
        self._add_property(
            "to",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreElement, False)),
            iri="https://rdf.spdx.org/v3/Core/to",
        )
        # Information about the relationship between two Elements.
        self._add_property(
            "relationshipType",
            https_rdfspdxorgv3CoreRelationshipType(),
            iri="https://rdf.spdx.org/v3/Core/relationshipType",
            min_count=1,
        )
        # Provides information about the completeness of relationships.
        self._add_property(
            "completeness",
            https_rdfspdxorgv3CoreRelationshipCompleteness(),
            iri="https://rdf.spdx.org/v3/Core/completeness",
        )
        # Specifies the time from which an element is applicable / valid.
        self._add_property(
            "startTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/startTime",
        )
        # Specifies the time from which an element is no longer applicable / valid.
        self._add_property(
            "endTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/endTime",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Relationship"] = https_rdfspdxorgv3CoreRelationship


# A collection of SPDX Elements that could potentially be serialized.
class https_rdfspdxorgv3CoreSpdxDocument(https_rdfspdxorgv3CoreElementCollection):
    TYPE = "https://rdf.spdx.org/v3/Core/SpdxDocument"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides an ExternalMap of Element identifiers.
        self._add_property(
            "imports",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreExternalMap, False)),
            iri="https://rdf.spdx.org/v3/Core/imports",
        )
        # Provides a NamespaceMap of prefixes and associated namespace partial URIs applicable to an SpdxDocument and independent of any specific serialization format or instance.
        self._add_property(
            "namespaceMap",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreNamespaceMap, False)),
            iri="https://rdf.spdx.org/v3/Core/namespaceMap",
        )
        # Provides the license under which the SPDX documentation of the Element can be used.
        self._add_property(
            "dataLicense",
            ObjectProp(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo, False),
            iri="https://rdf.spdx.org/v3/Core/dataLicense",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/SpdxDocument"] = https_rdfspdxorgv3CoreSpdxDocument


# An element of hardware and/or software utilized to carry out a particular function.
class https_rdfspdxorgv3CoreTool(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/Tool"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Tool"] = https_rdfspdxorgv3CoreTool


# Abstract class for additional text intended to be added to a License, but
# which is not itself a standalone License.
class https_rdfspdxorgv3ExpandedLicensingLicenseAddition(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/LicenseAddition"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies the full text of a LicenseAddition.
        self._add_property(
            "additionText",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/additionText",
            min_count=1,
        )
        # Identifies the full text of a LicenseAddition, in SPDX templating format.
        self._add_property(
            "standardAdditionTemplate",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/standardAdditionTemplate",
        )
        # Specifies whether an additional text identifier has been marked as deprecated.
        self._add_property(
            "isDeprecatedAdditionId",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/isDeprecatedAdditionId",
        )
        # Specifies the licenseId that is preferred to be used in place of a deprecated
        # License or LicenseAddition.
        self._add_property(
            "obsoletedBy",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/obsoletedBy",
        )
        # Identifies all the text and metadata associated with a license in the license XML format.
        self._add_property(
            "licenseXml",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/licenseXml",
        )
        # Contains a URL where the License or LicenseAddition can be found in use.
        self._add_property(
            "seeAlso",
            ListProp(AnyURIProp()),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/seeAlso",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/LicenseAddition"] = https_rdfspdxorgv3ExpandedLicensingLicenseAddition


# A license exception that is listed on the SPDX Exceptions list.
class https_rdfspdxorgv3ExpandedLicensingListedLicenseException(https_rdfspdxorgv3ExpandedLicensingLicenseAddition):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/ListedLicenseException"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the SPDX License List version in which this ListedLicense or
        # ListedLicenseException identifier was first added.
        self._add_property(
            "listVersionAdded",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/listVersionAdded",
        )
        # Specifies the SPDX License List version in which this license or exception
        # identifier was deprecated.
        self._add_property(
            "deprecatedVersion",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/deprecatedVersion",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/ListedLicenseException"] = https_rdfspdxorgv3ExpandedLicensingListedLicenseException


# A characterization of some aspect of an Element that is associated with the Element in a generalized fashion.
class https_rdfspdxorgv3ExtensionExtension(SHACLObject):
    TYPE = "https://rdf.spdx.org/v3/Extension/Extension"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Extension/Extension"] = https_rdfspdxorgv3ExtensionExtension


# Abstract ancestor class for all vulnerability assessments
class https_rdfspdxorgv3SecurityVulnAssessmentRelationship(https_rdfspdxorgv3CoreRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies an element contained in a piece of software where a vulnerability was
        # found.
        self._add_property(
            "assessedElement",
            ObjectProp(https_rdfspdxorgv3CoreElement, False),
            iri="https://rdf.spdx.org/v3/Security/assessedElement",
        )
        # Specifies the time when a vulnerability was published.
        self._add_property(
            "publishedTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/publishedTime",
        )
        # Identifies who or what supplied the artifact or VulnAssessmentRelationship referenced by the Element.
        self._add_property(
            "CoresuppliedBy",
            ObjectProp(https_rdfspdxorgv3CoreAgent, False),
            iri="https://rdf.spdx.org/v3/Core/suppliedBy",
        )
        # Specifies a time when a vulnerability assessment was modified
        self._add_property(
            "modifiedTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/modifiedTime",
        )
        # Specified the time and date when a vulnerability was withdrawn.
        self._add_property(
            "withdrawnTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/withdrawnTime",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVulnAssessmentRelationship


# Abstract class representing a license combination consisting of one or more
# licenses (optionally including additional text), which may be combined
# according to the SPDX license expression syntax.
class https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/SimpleLicensing/AnyLicenseInfo"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/SimpleLicensing/AnyLicenseInfo"] = https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo


# An SPDX Element containing an SPDX license expression string.
class https_rdfspdxorgv3SimpleLicensingLicenseExpression(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/SimpleLicensing/LicenseExpression"

    def __init__(self, **kwargs):
        super().__init__()
        # A string in the license expression format.
        self._add_property(
            "licenseExpression",
            StringProp(),
            iri="https://rdf.spdx.org/v3/SimpleLicensing/licenseExpression",
            min_count=1,
        )
        # The version of the SPDX License List used in the license expression.
        self._add_property(
            "licenseListVersion",
            StringProp(pattern=r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$",),
            iri="https://rdf.spdx.org/v3/SimpleLicensing/licenseListVersion",
        )
        # Maps a LicenseRef or AdditionRef string for a Custom License or a Custom License Addition to its URI ID.
        self._add_property(
            "customIdToUri",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/SimpleLicensing/customIdToUri",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/SimpleLicensing/LicenseExpression"] = https_rdfspdxorgv3SimpleLicensingLicenseExpression


# A license or addition that is not listed on the SPDX License List.
class https_rdfspdxorgv3SimpleLicensingSimpleLicensingText(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/SimpleLicensing/SimpleLicensingText"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies the full text of a License or Addition.
        self._add_property(
            "licenseText",
            StringProp(),
            iri="https://rdf.spdx.org/v3/SimpleLicensing/licenseText",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/SimpleLicensing/SimpleLicensingText"] = https_rdfspdxorgv3SimpleLicensingSimpleLicensingText


# Class that describes a build instance of software/artifacts.
class https_rdfspdxorgv3BuildBuild(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Build/Build"

    def __init__(self, **kwargs):
        super().__init__()
        # A buildType is a hint that is used to indicate the toolchain, platform, or infrastructure that the build was invoked on.
        self._add_property(
            "buildType",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Build/buildType",
            min_count=1,
        )
        # A buildId is a locally unique identifier used by a builder to identify a unique instance of a build produced by it.
        self._add_property(
            "buildId",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Build/buildId",
        )
        # Property describes the invocation entrypoint of a build.
        self._add_property(
            "configSourceEntrypoint",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Build/configSourceEntrypoint",
        )
        # Property that describes the URI of the build configuration source file.
        self._add_property(
            "configSourceUri",
            ListProp(AnyURIProp()),
            iri="https://rdf.spdx.org/v3/Build/configSourceUri",
        )
        # Property that describes the digest of the build configuration file used to invoke a build.
        self._add_property(
            "configSourceDigest",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreHash, False)),
            iri="https://rdf.spdx.org/v3/Build/configSourceDigest",
        )
        # Property describing the parameters used in an instance of a build.
        self._add_property(
            "parameters",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/Build/parameters",
        )
        # Property describing the start time of a build.
        self._add_property(
            "buildStartTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Build/buildStartTime",
        )
        # Property that describes the time at which a build stops.
        self._add_property(
            "buildEndTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Build/buildEndTime",
        )
        # Property describing the session in which a build is invoked.
        self._add_property(
            "environment",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/Build/environment",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Build/Build"] = https_rdfspdxorgv3BuildBuild


# Agent represents anything with the potential to act on a system.
class https_rdfspdxorgv3CoreAgent(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/Agent"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Agent"] = https_rdfspdxorgv3CoreAgent


# An assertion made in relation to one or more elements.
class https_rdfspdxorgv3CoreAnnotation(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/Annotation"

    def __init__(self, **kwargs):
        super().__init__()
        # Describes the type of annotation.
        self._add_property(
            "annotationType",
            https_rdfspdxorgv3CoreAnnotationType(),
            iri="https://rdf.spdx.org/v3/Core/annotationType",
            min_count=1,
        )
        # Specifies the media type of an Element or Property.
        self._add_property(
            "contentType",
            StringProp(pattern=r"^[^\/]+\/[^\/]+$",),
            iri="https://rdf.spdx.org/v3/Core/contentType",
        )
        # Commentary on an assertion that an annotator has made.
        self._add_property(
            "statement",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/statement",
        )
        # An Element an annotator has made an assertion about.
        self._add_property(
            "subject",
            ObjectProp(https_rdfspdxorgv3CoreElement, True),
            iri="https://rdf.spdx.org/v3/Core/subject",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Annotation"] = https_rdfspdxorgv3CoreAnnotation


# A distinct article or unit within the digital domain.
class https_rdfspdxorgv3CoreArtifact(https_rdfspdxorgv3CoreElement):
    TYPE = "https://rdf.spdx.org/v3/Core/Artifact"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies from where or whom the Element originally came.
        self._add_property(
            "originatedBy",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreAgent, False)),
            iri="https://rdf.spdx.org/v3/Core/originatedBy",
        )
        # Identifies who or what supplied the artifact or VulnAssessmentRelationship referenced by the Element.
        self._add_property(
            "suppliedBy",
            ObjectProp(https_rdfspdxorgv3CoreAgent, False),
            iri="https://rdf.spdx.org/v3/Core/suppliedBy",
        )
        # Specifies the time an artifact was built.
        self._add_property(
            "builtTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/builtTime",
        )
        # Specifies the time an artifact was released.
        self._add_property(
            "releaseTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/releaseTime",
        )
        # Specifies until when the artifact can be used before its usage needs to be reassessed.
        self._add_property(
            "validUntilTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Core/validUntilTime",
        )
        # The name of a relevant standard that may apply to an artifact.
        self._add_property(
            "standardName",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Core/standardName",
        )
        # Specifies the level of support associated with an artifact.
        self._add_property(
            "supportLevel",
            ListProp(https_rdfspdxorgv3CoreSupportType()),
            iri="https://rdf.spdx.org/v3/Core/supportLevel",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Artifact"] = https_rdfspdxorgv3CoreArtifact


# A collection of Elements that have a shared context.
class https_rdfspdxorgv3CoreBundle(https_rdfspdxorgv3CoreElementCollection):
    TYPE = "https://rdf.spdx.org/v3/Core/Bundle"

    def __init__(self, **kwargs):
        super().__init__()
        # Gives information about the circumstances or unifying properties
        # that Elements of the bundle have been assembled under.
        self._add_property(
            "context",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/context",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Bundle"] = https_rdfspdxorgv3CoreBundle


# A mathematically calculated representation of a grouping of data.
class https_rdfspdxorgv3CoreHash(https_rdfspdxorgv3CoreIntegrityMethod):
    TYPE = "https://rdf.spdx.org/v3/Core/Hash"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the algorithm used for calculating the hash value.
        self._add_property(
            "algorithm",
            https_rdfspdxorgv3CoreHashAlgorithm(),
            iri="https://rdf.spdx.org/v3/Core/algorithm",
            min_count=1,
        )
        # The result of applying a hash algorithm to an Element.
        self._add_property(
            "hashValue",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Core/hashValue",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Hash"] = https_rdfspdxorgv3CoreHash


# Provide context for a relationship that occurs in the software lifecycle.
class https_rdfspdxorgv3CoreLifecycleScopedRelationship(https_rdfspdxorgv3CoreRelationship):
    TYPE = "https://rdf.spdx.org/v3/Core/LifecycleScopedRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Capture the scope of information about a specific relationship between elements.
        self._add_property(
            "scope",
            https_rdfspdxorgv3CoreLifecycleScopeType(),
            iri="https://rdf.spdx.org/v3/Core/scope",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/LifecycleScopedRelationship"] = https_rdfspdxorgv3CoreLifecycleScopedRelationship


# A group of people who work together in an organized way for a shared purpose.
class https_rdfspdxorgv3CoreOrganization(https_rdfspdxorgv3CoreAgent):
    TYPE = "https://rdf.spdx.org/v3/Core/Organization"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Organization"] = https_rdfspdxorgv3CoreOrganization


# An individual human being.
class https_rdfspdxorgv3CorePerson(https_rdfspdxorgv3CoreAgent):
    TYPE = "https://rdf.spdx.org/v3/Core/Person"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Person"] = https_rdfspdxorgv3CorePerson


# A software agent.
class https_rdfspdxorgv3CoreSoftwareAgent(https_rdfspdxorgv3CoreAgent):
    TYPE = "https://rdf.spdx.org/v3/Core/SoftwareAgent"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/SoftwareAgent"] = https_rdfspdxorgv3CoreSoftwareAgent


# Portion of an AnyLicenseInfo representing a set of licensing information
# where all elements apply.
class https_rdfspdxorgv3ExpandedLicensingConjunctiveLicenseSet(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/ConjunctiveLicenseSet"

    def __init__(self, **kwargs):
        super().__init__()
        # A license expression participating in a license set.
        self._add_property(
            "member",
            ListProp(ObjectProp(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo, False)),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/member",
            min_count=2,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/ConjunctiveLicenseSet"] = https_rdfspdxorgv3ExpandedLicensingConjunctiveLicenseSet


# A license addition that is not listed on the SPDX Exceptions List.
class https_rdfspdxorgv3ExpandedLicensingCustomLicenseAddition(https_rdfspdxorgv3ExpandedLicensingLicenseAddition):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/CustomLicenseAddition"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/CustomLicenseAddition"] = https_rdfspdxorgv3ExpandedLicensingCustomLicenseAddition


# Portion of an AnyLicenseInfo representing a set of licensing information
# where only any one of the elements applies.
class https_rdfspdxorgv3ExpandedLicensingDisjunctiveLicenseSet(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/DisjunctiveLicenseSet"

    def __init__(self, **kwargs):
        super().__init__()
        # A license expression participating in a license set.
        self._add_property(
            "member",
            ListProp(ObjectProp(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo, False)),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/member",
            min_count=2,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/DisjunctiveLicenseSet"] = https_rdfspdxorgv3ExpandedLicensingDisjunctiveLicenseSet


# Abstract class representing a License or an OrLaterOperator.
class https_rdfspdxorgv3ExpandedLicensingExtendableLicense(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/ExtendableLicense"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/ExtendableLicense"] = https_rdfspdxorgv3ExpandedLicensingExtendableLicense


# A concrete subclass of AnyLicenseInfo used by Individuals in the ExpandedLicensing profile.
class https_rdfspdxorgv3ExpandedLicensingIndividualLicensingInfo(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/IndividualLicensingInfo"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/IndividualLicensingInfo"] = https_rdfspdxorgv3ExpandedLicensingIndividualLicensingInfo


# Abstract class for the portion of an AnyLicenseInfo representing a license.
class https_rdfspdxorgv3ExpandedLicensingLicense(https_rdfspdxorgv3ExpandedLicensingExtendableLicense):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/License"

    def __init__(self, **kwargs):
        super().__init__()
        # Identifies the full text of a License or Addition.
        self._add_property(
            "SimpleLicensinglicenseText",
            StringProp(),
            iri="https://rdf.spdx.org/v3/SimpleLicensing/licenseText",
            min_count=1,
        )
        # Specifies whether the License is listed as approved by the
        # [Open Source Initiative (OSI)](https://opensource.org).
        self._add_property(
            "isOsiApproved",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/isOsiApproved",
        )
        # Specifies whether the License is listed as free by the
        # [Free Software Foundation (FSF)](https://fsf.org).
        self._add_property(
            "isFsfLibre",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/isFsfLibre",
        )
        # Provides a License author's preferred text to indicate that a file is covered
        # by the License.
        self._add_property(
            "standardLicenseHeader",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/standardLicenseHeader",
        )
        # Identifies the full text of a License, in SPDX templating format.
        self._add_property(
            "standardLicenseTemplate",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/standardLicenseTemplate",
        )
        # Specifies whether a license or additional text identifier has been marked as
        # deprecated.
        self._add_property(
            "isDeprecatedLicenseId",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/isDeprecatedLicenseId",
        )
        # Specifies the licenseId that is preferred to be used in place of a deprecated
        # License or LicenseAddition.
        self._add_property(
            "obsoletedBy",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/obsoletedBy",
        )
        # Identifies all the text and metadata associated with a license in the license XML format.
        self._add_property(
            "licenseXml",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/licenseXml",
        )
        # Contains a URL where the License or LicenseAddition can be found in use.
        self._add_property(
            "seeAlso",
            ListProp(AnyURIProp()),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/seeAlso",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/License"] = https_rdfspdxorgv3ExpandedLicensingLicense


# A license that is listed on the SPDX License List.
class https_rdfspdxorgv3ExpandedLicensingListedLicense(https_rdfspdxorgv3ExpandedLicensingLicense):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/ListedLicense"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the SPDX License List version in which this ListedLicense or
        # ListedLicenseException identifier was first added.
        self._add_property(
            "listVersionAdded",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/listVersionAdded",
        )
        # Specifies the SPDX License List version in which this license or exception
        # identifier was deprecated.
        self._add_property(
            "deprecatedVersion",
            StringProp(),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/deprecatedVersion",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/ListedLicense"] = https_rdfspdxorgv3ExpandedLicensingListedLicense


# Portion of an AnyLicenseInfo representing this version, or any later version,
# of the indicated License.
class https_rdfspdxorgv3ExpandedLicensingOrLaterOperator(https_rdfspdxorgv3ExpandedLicensingExtendableLicense):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/OrLaterOperator"

    def __init__(self, **kwargs):
        super().__init__()
        # A License participating in an 'or later' model.
        self._add_property(
            "subjectLicense",
            ObjectProp(https_rdfspdxorgv3ExpandedLicensingLicense, True),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/subjectLicense",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/OrLaterOperator"] = https_rdfspdxorgv3ExpandedLicensingOrLaterOperator


# Portion of an AnyLicenseInfo representing a License which has additional
# text applied to it.
class https_rdfspdxorgv3ExpandedLicensingWithAdditionOperator(https_rdfspdxorgv3SimpleLicensingAnyLicenseInfo):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/WithAdditionOperator"

    def __init__(self, **kwargs):
        super().__init__()
        # A License participating in a 'with addition' model.
        self._add_property(
            "subjectExtendableLicense",
            ObjectProp(https_rdfspdxorgv3ExpandedLicensingExtendableLicense, True),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/subjectExtendableLicense",
            min_count=1,
        )
        # A LicenseAddition participating in a 'with addition' model.
        self._add_property(
            "subjectAddition",
            ObjectProp(https_rdfspdxorgv3ExpandedLicensingLicenseAddition, True),
            iri="https://rdf.spdx.org/v3/ExpandedLicensing/subjectAddition",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/WithAdditionOperator"] = https_rdfspdxorgv3ExpandedLicensingWithAdditionOperator


# Provides a CVSS version 2.0 assessment for a vulnerability.
class https_rdfspdxorgv3SecurityCvssV2VulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/CvssV2VulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides a numerical (0-10) representation of the severity of a vulnerability.
        self._add_property(
            "score",
            FloatProp(),
            iri="https://rdf.spdx.org/v3/Security/score",
            min_count=1,
        )
        # Specifies the CVSS vector string for a vulnerability.
        self._add_property(
            "vectorString",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/vectorString",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/CvssV2VulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityCvssV2VulnAssessmentRelationship


# Provides a CVSS version 3 assessment for a vulnerability.
class https_rdfspdxorgv3SecurityCvssV3VulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/CvssV3VulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides a numerical (0-10) representation of the severity of a vulnerability.
        self._add_property(
            "score",
            FloatProp(),
            iri="https://rdf.spdx.org/v3/Security/score",
            min_count=1,
        )
        # Specifies the CVSS qualitative severity rating of a vulnerability in relation to a piece of software.
        self._add_property(
            "severity",
            https_rdfspdxorgv3SecurityCvssSeverityType(),
            iri="https://rdf.spdx.org/v3/Security/severity",
            min_count=1,
        )
        # Specifies the CVSS vector string for a vulnerability.
        self._add_property(
            "vectorString",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/vectorString",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/CvssV3VulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityCvssV3VulnAssessmentRelationship


# Provides a CVSS version 4 assessment for a vulnerability.
class https_rdfspdxorgv3SecurityCvssV4VulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/CvssV4VulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides a numerical (0-10) representation of the severity of a vulnerability.
        self._add_property(
            "score",
            FloatProp(),
            iri="https://rdf.spdx.org/v3/Security/score",
            min_count=1,
        )
        # Specifies the CVSS qualitative severity rating of a vulnerability in relation to a piece of software.
        self._add_property(
            "severity",
            https_rdfspdxorgv3SecurityCvssSeverityType(),
            iri="https://rdf.spdx.org/v3/Security/severity",
            min_count=1,
        )
        # Specifies the CVSS vector string for a vulnerability.
        self._add_property(
            "vectorString",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/vectorString",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/CvssV4VulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityCvssV4VulnAssessmentRelationship


# Provides an EPSS assessment for a vulnerability.
class https_rdfspdxorgv3SecurityEpssVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/EpssVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # A probability score between 0 and 1 of a vulnerability being exploited.
        self._add_property(
            "probability",
            FloatProp(),
            iri="https://rdf.spdx.org/v3/Security/probability",
            min_count=1,
        )
        # The percentile of the current probability score.
        self._add_property(
            "percentile",
            FloatProp(),
            iri="https://rdf.spdx.org/v3/Security/percentile",
            min_count=1,
        )
        # Specifies the time when a vulnerability was published.
        self._add_property(
            "publishedTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/publishedTime",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/EpssVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityEpssVulnAssessmentRelationship


# Provides an exploit assessment of a vulnerability.
class https_rdfspdxorgv3SecurityExploitCatalogVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/ExploitCatalogVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the exploit catalog type.
        self._add_property(
            "catalogType",
            https_rdfspdxorgv3SecurityExploitCatalogType(),
            iri="https://rdf.spdx.org/v3/Security/catalogType",
            min_count=1,
        )
        # Describe that a CVE is known to have an exploit because it's been listed in an exploit catalog.
        self._add_property(
            "exploited",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/Security/exploited",
            min_count=1,
        )
        # Provides the location of an exploit catalog.
        self._add_property(
            "locator",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Security/locator",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/ExploitCatalogVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityExploitCatalogVulnAssessmentRelationship


# Provides an SSVC assessment for a vulnerability.
class https_rdfspdxorgv3SecuritySsvcVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/SsvcVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Provide the enumeration of possible decisions in the Stakeholder-Specific Vulnerability Categorization (SSVC) decision tree [https://www.cisa.gov/sites/default/files/publications/cisa-ssvc-guide%20508c.pdf](https://www.cisa.gov/sites/default/files/publications/cisa-ssvc-guide%20508c.pdf)
        self._add_property(
            "decisionType",
            https_rdfspdxorgv3SecuritySsvcDecisionType(),
            iri="https://rdf.spdx.org/v3/Security/decisionType",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/SsvcVulnAssessmentRelationship"] = https_rdfspdxorgv3SecuritySsvcVulnAssessmentRelationship


# Asbtract ancestor class for all VEX relationships
class https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VexVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the version of the VEX document.
        self._add_property(
            "vexVersion",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/vexVersion",
        )
        # Conveys information about how VEX status was determined.
        self._add_property(
            "statusNotes",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/statusNotes",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VexVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship


# Specifies a vulnerability and its associated information.
class https_rdfspdxorgv3SecurityVulnerability(https_rdfspdxorgv3CoreArtifact):
    TYPE = "https://rdf.spdx.org/v3/Security/Vulnerability"

    def __init__(self, **kwargs):
        super().__init__()
        # Specifies the time when a vulnerability was published.
        self._add_property(
            "publishedTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/publishedTime",
        )
        # Specifies a time when a vulnerability assessment was modified
        self._add_property(
            "modifiedTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/modifiedTime",
        )
        # Specified the time and date when a vulnerability was withdrawn.
        self._add_property(
            "withdrawnTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/withdrawnTime",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/Vulnerability"] = https_rdfspdxorgv3SecurityVulnerability


# A distinct article or unit related to Software.
class https_rdfspdxorgv3SoftwareSoftwareArtifact(https_rdfspdxorgv3CoreArtifact):
    TYPE = "https://rdf.spdx.org/v3/Software/SoftwareArtifact"

    def __init__(self, **kwargs):
        super().__init__()
        # Used to record the artifact’s gitoid: a canonical, unique, immutable identifier that can be used for software integrity verification.
        self._add_property(
            "gitoid",
            ListProp(AnyURIProp()),
            iri="https://rdf.spdx.org/v3/Software/gitoid",
            max_count=2,
        )
        # Provides information about the primary purpose of the software artifact.
        self._add_property(
            "primaryPurpose",
            https_rdfspdxorgv3SoftwareSoftwarePurpose(),
            iri="https://rdf.spdx.org/v3/Software/primaryPurpose",
        )
        # Provides additional purpose information of the software artifact.
        self._add_property(
            "additionalPurpose",
            ListProp(https_rdfspdxorgv3SoftwareSoftwarePurpose()),
            iri="https://rdf.spdx.org/v3/Software/additionalPurpose",
        )
        # Identifies the text of one or more copyright notices for a software Package,
        # File or Snippet, if any.
        self._add_property(
            "copyrightText",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Software/copyrightText",
        )
        # Provides a place for the SPDX data creator to record acknowledgement text for
        # a software Package, File or Snippet.
        self._add_property(
            "attributionText",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Software/attributionText",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Software/SoftwareArtifact"] = https_rdfspdxorgv3SoftwareSoftwareArtifact


# A container for a grouping of SPDX-3.0 content characterizing details
# (provenence, composition, licensing, etc.) about a product.
class https_rdfspdxorgv3CoreBom(https_rdfspdxorgv3CoreBundle):
    TYPE = "https://rdf.spdx.org/v3/Core/Bom"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Core/Bom"] = https_rdfspdxorgv3CoreBom


# A license that is not listed on the SPDX License List.
class https_rdfspdxorgv3ExpandedLicensingCustomLicense(https_rdfspdxorgv3ExpandedLicensingLicense):
    TYPE = "https://rdf.spdx.org/v3/ExpandedLicensing/CustomLicense"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/ExpandedLicensing/CustomLicense"] = https_rdfspdxorgv3ExpandedLicensingCustomLicense


# Connects a vulnerability and an element designating the element as a product
# affected by the vulnerability.
class https_rdfspdxorgv3SecurityVexAffectedVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VexAffectedVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides advise on how to mitigate or remediate a vulnerability when a VEX product
        # is affected by it.
        self._add_property(
            "actionStatement",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/actionStatement",
        )
        # Records the time when a recommended action was communicated in a VEX statement
        # to mitigate a vulnerability.
        self._add_property(
            "actionStatementTime",
            ListProp(StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",)),
            iri="https://rdf.spdx.org/v3/Security/actionStatementTime",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VexAffectedVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVexAffectedVulnAssessmentRelationship


# Links a vulnerability and elements representing products (in the VEX sense) where
# a fix has been applied and are no longer affected.
class https_rdfspdxorgv3SecurityVexFixedVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VexFixedVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VexFixedVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVexFixedVulnAssessmentRelationship


# Links a vulnerability and one or more elements designating the latter as products
# not affected by the vulnerability.
class https_rdfspdxorgv3SecurityVexNotAffectedVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VexNotAffectedVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        # Impact justification label to be used when linking a vulnerability to an element
        # representing a VEX product with a VexNotAffectedVulnAssessmentRelationship
        # relationship.
        self._add_property(
            "justificationType",
            https_rdfspdxorgv3SecurityVexJustificationType(),
            iri="https://rdf.spdx.org/v3/Security/justificationType",
        )
        # Explains why a VEX product is not affected by a vulnerability. It is an
        # alternative in VexNotAffectedVulnAssessmentRelationship to the machine-readable
        # justification label.
        self._add_property(
            "impactStatement",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Security/impactStatement",
        )
        # Timestamp of impact statement.
        self._add_property(
            "impactStatementTime",
            StringProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="https://rdf.spdx.org/v3/Security/impactStatementTime",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VexNotAffectedVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVexNotAffectedVulnAssessmentRelationship


# Designates elements as products where the impact of a vulnerability is being
# investigated.
class https_rdfspdxorgv3SecurityVexUnderInvestigationVulnAssessmentRelationship(https_rdfspdxorgv3SecurityVexVulnAssessmentRelationship):
    TYPE = "https://rdf.spdx.org/v3/Security/VexUnderInvestigationVulnAssessmentRelationship"

    def __init__(self, **kwargs):
        super().__init__()
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Security/VexUnderInvestigationVulnAssessmentRelationship"] = https_rdfspdxorgv3SecurityVexUnderInvestigationVulnAssessmentRelationship


# Refers to any object that stores content on a computer.
class https_rdfspdxorgv3SoftwareFile(https_rdfspdxorgv3SoftwareSoftwareArtifact):
    TYPE = "https://rdf.spdx.org/v3/Software/File"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides information about the content type of an Element.
        self._add_property(
            "contentType",
            StringProp(pattern=r"^[^\/]+\/[^\/]+$",),
            iri="https://rdf.spdx.org/v3/Software/contentType",
        )
        # If true, denotes the Element is a directory.
        self._add_property(
            "isDirectory",
            BooleanProp(),
            iri="https://rdf.spdx.org/v3/Software/isDirectory",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Software/File"] = https_rdfspdxorgv3SoftwareFile


# Refers to any unit of content that can be associated with a distribution of software.
class https_rdfspdxorgv3SoftwarePackage(https_rdfspdxorgv3SoftwareSoftwareArtifact):
    TYPE = "https://rdf.spdx.org/v3/Software/Package"

    def __init__(self, **kwargs):
        super().__init__()
        # Identify the version of a package.
        self._add_property(
            "packageVersion",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Software/packageVersion",
        )
        # Identifies the download Uniform Resource Identifier for the package at the time that the document was created.
        self._add_property(
            "downloadLocation",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Software/downloadLocation",
        )
        # Provides a place for the SPDX data creator to record the package URL string (in accordance with the [package URL spec](https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst)) for a software Package.
        self._add_property(
            "packageUrl",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Software/packageUrl",
        )
        # A place for the SPDX document creator to record a website that serves as the package's home page.
        self._add_property(
            "homePage",
            AnyURIProp(),
            iri="https://rdf.spdx.org/v3/Software/homePage",
        )
        # Records any relevant background information or additional comments
        # about the origin of the package.
        self._add_property(
            "sourceInfo",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Software/sourceInfo",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Software/Package"] = https_rdfspdxorgv3SoftwarePackage


# A collection of SPDX Elements describing a single package.
class https_rdfspdxorgv3SoftwareSbom(https_rdfspdxorgv3CoreBom):
    TYPE = "https://rdf.spdx.org/v3/Software/Sbom"

    def __init__(self, **kwargs):
        super().__init__()
        # Provides information about the type of an SBOM.
        self._add_property(
            "sbomType",
            ListProp(https_rdfspdxorgv3SoftwareSbomType()),
            iri="https://rdf.spdx.org/v3/Software/sbomType",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Software/Sbom"] = https_rdfspdxorgv3SoftwareSbom


# Describes a certain part of a file.
class https_rdfspdxorgv3SoftwareSnippet(https_rdfspdxorgv3SoftwareSoftwareArtifact):
    TYPE = "https://rdf.spdx.org/v3/Software/Snippet"

    def __init__(self, **kwargs):
        super().__init__()
        # Defines the byte range in the original host file that the snippet information applies to.
        self._add_property(
            "byteRange",
            ObjectProp(https_rdfspdxorgv3CorePositiveIntegerRange, False),
            iri="https://rdf.spdx.org/v3/Software/byteRange",
        )
        # Defines the line range in the original host file that the snippet information applies to.
        self._add_property(
            "lineRange",
            ObjectProp(https_rdfspdxorgv3CorePositiveIntegerRange, False),
            iri="https://rdf.spdx.org/v3/Software/lineRange",
        )
        # Defines the original host file that the snippet information applies to.
        self._add_property(
            "snippetFromFile",
            ObjectProp(https_rdfspdxorgv3SoftwareFile, True),
            iri="https://rdf.spdx.org/v3/Software/snippetFromFile",
            min_count=1,
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Software/Snippet"] = https_rdfspdxorgv3SoftwareSnippet


# Provides information about the fields in the AI package profile.
class https_rdfspdxorgv3AIAIPackage(https_rdfspdxorgv3SoftwarePackage):
    TYPE = "https://rdf.spdx.org/v3/AI/AIPackage"

    def __init__(self, **kwargs):
        super().__init__()
        # Indicates the amount of energy consumed to build the AI package.
        self._add_property(
            "energyConsumption",
            StringProp(),
            iri="https://rdf.spdx.org/v3/AI/energyConsumption",
        )
        # Captures a standard that is being complied with.
        self._add_property(
            "standardCompliance",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/AI/standardCompliance",
        )
        # Captures a limitation of the AI software.
        self._add_property(
            "limitation",
            StringProp(),
            iri="https://rdf.spdx.org/v3/AI/limitation",
        )
        # Records the type of the model used in the AI software.
        self._add_property(
            "typeOfModel",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/AI/typeOfModel",
        )
        # Describes relevant information about different steps of the training process.
        self._add_property(
            "informationAboutTraining",
            StringProp(),
            iri="https://rdf.spdx.org/v3/AI/informationAboutTraining",
        )
        # Provides relevant information about the AI software, not including the model description.
        self._add_property(
            "informationAboutApplication",
            StringProp(),
            iri="https://rdf.spdx.org/v3/AI/informationAboutApplication",
        )
        # Records a hyperparameter used to build the AI model contained in the AI package.
        self._add_property(
            "hyperparameter",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/AI/hyperparameter",
        )
        # Describes all the preprocessing steps applied to the training data before the model training.
        self._add_property(
            "modelDataPreprocessing",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/AI/modelDataPreprocessing",
        )
        # Describes methods that can be used to explain the model.
        self._add_property(
            "modelExplainability",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/AI/modelExplainability",
        )
        # Records if sensitive personal information is used during model training.
        self._add_property(
            "sensitivePersonalInformation",
            https_rdfspdxorgv3CorePresenceType(),
            iri="https://rdf.spdx.org/v3/AI/sensitivePersonalInformation",
        )
        # Captures the threshold that was used for computation of a metric described in the metric field.
        self._add_property(
            "metricDecisionThreshold",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/AI/metricDecisionThreshold",
        )
        # Records the measurement of prediction quality of the AI model.
        self._add_property(
            "metric",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/AI/metric",
        )
        # Captures the domain in which the AI package can be used.
        self._add_property(
            "domain",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/AI/domain",
        )
        # States if a human is involved in the decisions of the AI software.
        self._add_property(
            "autonomyType",
            https_rdfspdxorgv3CorePresenceType(),
            iri="https://rdf.spdx.org/v3/AI/autonomyType",
        )
        # Categorizes safety risk impact of AI software.
        self._add_property(
            "safetyRiskAssessment",
            https_rdfspdxorgv3AISafetyRiskAssessmentType(),
            iri="https://rdf.spdx.org/v3/AI/safetyRiskAssessment",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/AI/AIPackage"] = https_rdfspdxorgv3AIAIPackage


# Provides information about the fields in the Dataset profile.
class https_rdfspdxorgv3DatasetDataset(https_rdfspdxorgv3SoftwarePackage):
    TYPE = "https://rdf.spdx.org/v3/Dataset/Dataset"

    def __init__(self, **kwargs):
        super().__init__()
        # Describes the type of the given dataset.
        self._add_property(
            "datasetType",
            ListProp(https_rdfspdxorgv3DatasetDatasetType()),
            iri="https://rdf.spdx.org/v3/Dataset/datasetType",
            min_count=1,
        )
        # Describes how the dataset was collected.
        self._add_property(
            "dataCollectionProcess",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Dataset/dataCollectionProcess",
        )
        # Describes what the given dataset should be used for.
        self._add_property(
            "intendedUse",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Dataset/intendedUse",
        )
        # Captures the size of the dataset.
        self._add_property(
            "datasetSize",
            NonNegativeIntegerProp(),
            iri="https://rdf.spdx.org/v3/Dataset/datasetSize",
        )
        # Describes potentially noisy elements of the dataset.
        self._add_property(
            "datasetNoise",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Dataset/datasetNoise",
        )
        # Describes the preprocessing steps that were applied to the raw data to create the given dataset.
        self._add_property(
            "dataPreprocessing",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Dataset/dataPreprocessing",
        )
        # Describes a sensor used for collecting the data.
        self._add_property(
            "sensor",
            ListProp(ObjectProp(https_rdfspdxorgv3CoreDictionaryEntry, False)),
            iri="https://rdf.spdx.org/v3/Dataset/sensor",
        )
        # Records the biases that the dataset is known to encompass.
        self._add_property(
            "knownBias",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Dataset/knownBias",
        )
        # Describes if any sensitive personal information is present in the dataset.
        self._add_property(
            "sensitivePersonalInformation",
            https_rdfspdxorgv3CorePresenceType(),
            iri="https://rdf.spdx.org/v3/Dataset/sensitivePersonalInformation",
        )
        # Describes the anonymization methods used.
        self._add_property(
            "anonymizationMethodUsed",
            ListProp(StringProp()),
            iri="https://rdf.spdx.org/v3/Dataset/anonymizationMethodUsed",
        )
        # Describes the confidentiality level of the data points contained in the dataset.
        self._add_property(
            "confidentialityLevel",
            https_rdfspdxorgv3DatasetConfidentialityLevelType(),
            iri="https://rdf.spdx.org/v3/Dataset/confidentialityLevel",
        )
        # Describes a mechanism to update the dataset.
        self._add_property(
            "datasetUpdateMechanism",
            StringProp(),
            iri="https://rdf.spdx.org/v3/Dataset/datasetUpdateMechanism",
        )
        # The field describes the availability of a dataset.
        self._add_property(
            "datasetAvailability",
            https_rdfspdxorgv3DatasetDatasetAvailabilityType(),
            iri="https://rdf.spdx.org/v3/Dataset/datasetAvailability",
        )
        self._set_init_props(**kwargs)


SHACLObject.DESERIALIZERS["https://rdf.spdx.org/v3/Dataset/Dataset"] = https_rdfspdxorgv3DatasetDataset


# Copyright (c) 2024 Joshua Watt
#
# SPDX-License-Identifier: MIT


class Context(object):
    from contextlib import contextmanager

    def __init__(self, contexts=[]):
        self.contexts = [c for c in contexts if c]
        self.__vocabs = []
        self.__expanded = {}
        self.__compacted = {}

    @contextmanager
    def vocab_push(self, vocab):
        if not vocab:
            yield self
            return

        self.__vocabs.append(vocab)
        try:
            yield self
        finally:
            self.__vocabs.pop()

    def __get_vocab_contexts(self):
        contexts = []

        for v in self.__vocabs:
            for ctx in self.contexts:
                # Check for vocabulary contexts
                for name, value in ctx.items():
                    if (
                        isinstance(value, dict)
                        and value["@type"] == "@vocab"
                        and v == self.__expand(value["@id"], self.contexts)
                    ):
                        contexts.insert(0, value["@context"])

        return contexts

    def compact(self, _id, vocab=None):
        with self.vocab_push(vocab):
            if not self.__vocabs:
                v = ""
            else:
                v = self.__vocabs[-1]

            if v not in self.__compacted or _id not in self.__compacted[v]:
                self.__compacted.setdefault(v, {})[_id] = self.__compact(
                    _id,
                    self.__get_vocab_contexts() + self.contexts,
                )
            return self.__compacted[v][_id]

    def __compact(self, _id, contexts):
        def collect_possible(_id):
            possible = set()
            for ctx in contexts:
                for name, value in ctx.items():
                    if name == "@vocab":
                        if _id.startswith(value):
                            tmp_id = _id[len(value) :]
                            possible.add(tmp_id)
                            possible |= collect_possible(tmp_id)
                    else:
                        if isinstance(value, dict):
                            value = value["@id"]

                        if _id == value:
                            possible.add(name)
                            possible |= collect_possible(name)
                        elif _id.startswith(value):
                            tmp_id = name + ":" + _id[len(value) :].lstrip("/")
                            possible.add(tmp_id)
                            possible |= collect_possible(tmp_id)

            return possible

        possible = collect_possible(_id)
        if not possible:
            return _id

        # To select from the possible identifiers, choose the one that has the
        # least context (fewest ":"), then the shortest, and finally
        # alphabetically
        possible = list(possible)
        possible.sort(key=lambda p: (p.count(":"), len(p), p))

        return possible[0]

    def expand(self, _id, vocab=""):
        with self.vocab_push(vocab):
            if not self.__vocabs:
                v = ""
            else:
                v = self.__vocabs[-1]

            if v not in self.__expanded or _id not in self.__expanded[v]:
                contexts = self.__get_vocab_contexts() + self.contexts

                # Apply contexts
                for ctx in contexts:
                    for name, value in ctx.items():
                        if name == "@vocab":
                            _id = value + _id

                self.__expanded.setdefault(v, {})[_id] = self.__expand(_id, contexts)

            return self.__expanded[v][_id]

    def __expand(self, _id, contexts):
        for ctx in contexts:
            if ":" not in _id:
                if _id in ctx:
                    if isinstance(ctx[_id], dict):
                        return self.__expand(ctx[_id]["@id"], contexts)
                    return self.__expand(ctx[_id], contexts)
                continue

            prefix, suffix = _id.split(":", 1)
            if prefix not in ctx:
                continue

            return self.__expand(prefix, contexts) + suffix

        return _id


"""Format Guard"""
# fmt: on


def main():
    import argparse
    from pathlib import Path

    parser = argparse.ArgumentParser(description="Python SHACL model test")
    parser.add_argument("infile", type=Path, help="Input file")
    parser.add_argument("--print", action="store_true", help="Print object tree")
    parser.add_argument("--outfile", type=Path, help="Output file")

    args = parser.parse_args()

    with args.infile.open("r") as f:
        objects, _ = read_jsonld(f)

    if args.print:
        print_tree(objects)

    if args.outfile:
        with args.outfile.open("wb") as f:
            write_jsonld(objects, f)

    return 0


if __name__ == "__main__":
    import sys

    sys.exit(main())
