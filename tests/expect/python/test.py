#! /usr/bin/env python3
#
# Generated Python bindings from a SHACL model
#
# This file was automatically generated by shacl2code. DO NOT MANUALLY MODIFY IT
#
# SPDX-License-Identifier: MIT

import functools
import hashlib
import json
import re
import sys
import threading
import time
from contextlib import contextmanager
from datetime import datetime, timezone, timedelta
from enum import Enum
from abc import ABC, abstractmethod


def check_type(obj, types):
    if not isinstance(obj, types):
        if isinstance(types, (list, tuple)):
            raise TypeError(
                f"Value must be one of type: {', '.join(t.__name__ for t in types)}. Got {type(obj)}"
            )
        raise TypeError(f"Value must be of type {types.__name__}. Got {type(obj)}")


class Property(ABC):
    """
    A generic SHACL object property. The different types will derive from this
    class
    """

    def __init__(self, *, pattern=None):
        self.pattern = pattern

    def init(self):
        return None

    def validate(self, value):
        check_type(value, self.VALID_TYPES)
        if self.pattern is not None and not re.search(
            self.pattern, self.to_string(value)
        ):
            raise ValueError(
                f"Value is not correctly formatted. Got '{self.to_string(value)}'"
            )

    def set(self, value):
        return value

    def check_min_count(self, value, min_count):
        return min_count == 1

    def check_max_count(self, value, max_count):
        return max_count == 1

    def elide(self, value):
        return value is None

    def walk(self, value, callback, path):
        callback(value, path)

    def iter_objects(self, value, recursive, visited):
        return []

    def link_prop(self, value, objectset, missing, visited):
        return value

    def to_string(self, value):
        return str(value)

    @abstractmethod
    def encode(self, encoder, value, state):
        pass

    @abstractmethod
    def decode(self, decoder, *, objectset=None):
        pass


class StringProp(Property):
    """
    A scalar string property for an SHACL object
    """

    VALID_TYPES = str

    def set(self, value):
        return str(value)

    def encode(self, encoder, value, state):
        encoder.write_string(value)

    def decode(self, decoder, *, objectset=None):
        return decoder.read_string()


class AnyURIProp(StringProp):
    def encode(self, encoder, value, state):
        encoder.write_iri(value)

    def decode(self, decoder, *, objectset=None):
        return decoder.read_iri()


class DateTimeProp(Property):
    """
    A Date/Time Object with optional timezone
    """

    VALID_TYPES = datetime
    UTC_FORMAT_STR = "%Y-%m-%dT%H:%M:%SZ"
    REGEX = r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:\d{2})?$"

    def set(self, value):
        return self._normalize(value)

    def encode(self, encoder, value, state):
        encoder.write_datetime(self.to_string(value))

    def decode(self, decoder, *, objectset=None):
        s = decoder.read_datetime()
        if s is None:
            return None
        v = self.from_string(s)
        return self._normalize(v)

    def _normalize(self, value):
        if value.utcoffset() is None:
            value = value.astimezone()
        offset = value.utcoffset()
        if offset % timedelta(minutes=1):
            offset = offset - (offset % timedelta(minutes=1))
            value = value.replace(tzinfo=timezone(offset))
        value = value.replace(microsecond=0)
        return value

    def to_string(self, value):
        value = self._normalize(value)
        if value.tzinfo == timezone.utc:
            return value.strftime(self.UTC_FORMAT_STR)
        return value.isoformat()

    def from_string(self, value):
        if not re.match(self.REGEX, value):
            raise ValueError(f"'{value}' is not a correctly formatted datetime")
        if "Z" in value:
            d = datetime(
                *(time.strptime(value, self.UTC_FORMAT_STR)[0:6]),
                tzinfo=timezone.utc,
            )
        else:
            d = datetime.fromisoformat(value)

        return self._normalize(d)


class DateTimeStampProp(DateTimeProp):
    """
    A Date/Time Object with required timestamp
    """

    REGEX = r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:\d{2})$"


class IntegerProp(Property):
    VALID_TYPES = int

    def set(self, value):
        return int(value)

    def encode(self, encoder, value, state):
        encoder.write_integer(value)

    def decode(self, decoder, *, objectset=None):
        return decoder.read_integer()


class PositiveIntegerProp(IntegerProp):
    def validate(self, value):
        super().validate(value)
        if value < 1:
            raise ValueError(f"Value must be >=1. Got {value}")


class NonNegativeIntegerProp(IntegerProp):
    def validate(self, value):
        super().validate(value)
        if value < 0:
            raise ValueError(f"Value must be >= 0. Got {value}")


class BooleanProp(Property):
    VALID_TYPES = bool

    def set(self, value):
        return bool(value)

    def encode(self, encoder, value, state):
        encoder.write_bool(value)

    def decode(self, decoder, *, objectset=None):
        return decoder.read_bool()


class FloatProp(Property):
    VALID_TYPES = (float, int)

    def set(self, value):
        return float(value)

    def encode(self, encoder, value, state):
        encoder.write_float(value)

    def decode(self, decoder, *, objectset=None):
        return decoder.read_float()


class ObjectProp(Property):
    """
    A scalar SHACL object property of a SHACL object
    """

    def __init__(self, cls, required):
        super().__init__()
        self.cls = cls
        self.required = required

    def init(self):
        if self.required and not self.cls.IS_ABSTRACT:
            return self.cls()
        return None

    def validate(self, value):
        check_type(value, (self.cls, str))

    def walk(self, value, callback, path):
        if value is None:
            return

        if not isinstance(value, str):
            value.walk(callback, path)
        else:
            callback(value, path)

    def iter_objects(self, value, recursive, visited):
        if value is None or isinstance(value, str):
            return

        if value not in visited:
            visited.add(value)
            yield value

            if recursive:
                for c in value.iter_objects(recursive=True, visited=visited):
                    yield c

    def encode(self, encoder, value, state):
        if value is None:
            raise ValueError("Object cannot be None")

        if isinstance(value, str):
            value = _NI_ENCODE_CONTEXT.get(value, value)
            encoder.write_iri(value)
            return

        return value.encode(encoder, state)

    def decode(self, decoder, *, objectset=None):
        iri = decoder.read_iri()
        if iri is None:
            return self.cls.decode(decoder, objectset=objectset)

        iri = _NI_DECODE_CONTEXT.get(iri, iri)

        if objectset is None:
            return iri

        obj = objectset.find_by_id(iri)
        if obj is None:
            return iri

        self.validate(obj)
        return obj

    def link_prop(self, value, objectset, missing, visited):
        if value is None:
            return value

        if isinstance(value, str):
            o = objectset.find_by_id(value)
            if o is not None:
                self.validate(o)
                return o

            if missing is not None:
                missing.add(value)

            return value

        # De-duplicate IDs
        if value._id:
            value = objectset.find_by_id(value._id, value)
            self.validate(value)

        value.link_helper(objectset, missing, visited)
        return value


class ListProxy(object):
    def __init__(self, prop, data=None):
        if data is None:
            self.__data = []
        else:
            self.__data = data
        self.__prop = prop

    def append(self, value):
        self.__prop.validate(value)
        self.__data.append(self.__prop.set(value))

    def insert(self, idx, value):
        self.__prop.validate(value)
        self.__data.insert(idx, self.__prop.set(value))

    def extend(self, items):
        for i in items:
            self.append(i)

    def sort(self, *args, **kwargs):
        self.__data.sort(*args, **kwargs)

    def __getitem__(self, key):
        return self.__data[key]

    def __setitem__(self, key, value):
        if isinstance(key, slice):
            for v in value:
                self.__prop.validate(v)
            self.__data[key] = [self.__prop.set(v) for v in value]
        else:
            self.__prop.validate(value)
            self.__data[key] = self.__prop.set(value)

    def __delitem__(self, key):
        del self.__data[key]

    def __contains__(self, item):
        return item in self.__data

    def __iter__(self):
        return iter(self.__data)

    def __len__(self):
        return len(self.__data)

    def __str__(self):
        return str(self.__data)

    def __repr__(self):
        return repr(self.__data)

    def __eq__(self, other):
        if isinstance(other, ListProxy):
            return self.__data == other.__data

        return self.__data == other


class ListProp(Property):
    """
    A list of SHACL properties
    """

    VALID_TYPES = (list, ListProxy)

    def __init__(self, prop):
        super().__init__()
        self.prop = prop

    def init(self):
        return ListProxy(self.prop)

    def validate(self, value):
        super().validate(value)

        for i in value:
            self.prop.validate(i)

    def set(self, value):
        if isinstance(value, ListProxy):
            return value

        return ListProxy(self.prop, [self.prop.set(d) for d in value])

    def check_min_count(self, value, min_count):
        check_type(value, ListProxy)
        return len(value) >= min_count

    def check_max_count(self, value, max_count):
        check_type(value, ListProxy)
        return len(value) <= max_count

    def elide(self, value):
        check_type(value, ListProxy)
        return len(value) == 0

    def walk(self, value, callback, path):
        callback(value, path)
        for idx, v in enumerate(value):
            self.prop.walk(v, callback, path + [f"[{idx}]"])

    def iter_objects(self, value, recursive, visited):
        for v in value:
            for c in self.prop.iter_objects(v, recursive, visited):
                yield c

    def link_prop(self, value, objectset, missing, visited):
        if isinstance(value, ListProxy):
            data = [self.prop.link_prop(v, objectset, missing, visited) for v in value]
        else:
            data = [self.prop.link_prop(v, objectset, missing, visited) for v in value]

        return ListProxy(self.prop, data=data)

    def encode(self, encoder, value, state):
        check_type(value, ListProxy)

        with encoder.write_list() as list_s:
            for v in value:
                with list_s.write_list_item() as item_s:
                    self.prop.encode(item_s, v, state)

    def decode(self, decoder, *, objectset=None):
        data = []
        for val_d in decoder.read_list():
            v = self.prop.decode(val_d, objectset=objectset)
            self.prop.validate(v)
            data.append(v)

        return ListProxy(self.prop, data=data)


class EnumProp(Property):
    VALID_TYPES = str

    def __init__(self, values, *, pattern=None):
        super().__init__(pattern=pattern)
        self.values = values

    def validate(self, value):
        super().validate(value)

        valid_values = (iri for iri, _ in self.values)
        if value not in valid_values:
            raise ValueError(
                f"'{value}' is not a valid value. Choose one of {' '.join(valid_values)}"
            )

    def encode(self, encoder, value, state):
        for iri, compact in self.values:
            if iri == value:
                encoder.write_enum(value, self, compact)
                return

        encoder.write_enum(value, self)

    def decode(self, decoder, *, objectset=None):
        v = decoder.read_enum(self)
        for iri, compact in self.values:
            if v == compact:
                return iri
        return v


class NodeKind(Enum):
    BlankNode = 1
    IRI = 2
    BlankNodeOrIRI = 3


def is_IRI(s):
    if not isinstance(s, str):
        return False
    if s.startswith("_:"):
        return False
    if ":" not in s:
        return False
    return True


def is_blank_node(s):
    if not isinstance(s, str):
        return False
    if not s.startswith("_:"):
        return False
    return True


def register(type_iri, *, compact_type=None, abstract=False):
    def add_class(key, c):
        assert (
            key not in SHACLObject.CLASSES
        ), f"{key} already registered to {SHACLObject.CLASSES[key].__name__}"
        SHACLObject.CLASSES[key] = c

    def decorator(c):
        global NAMED_INDIVIDUALS

        assert issubclass(
            c, SHACLObject
        ), f"{c.__name__} is not derived from SHACLObject"

        c._OBJ_TYPE = type_iri
        c.IS_ABSTRACT = abstract
        add_class(type_iri, c)

        c._OBJ_COMPACT_TYPE = compact_type
        if compact_type:
            add_class(compact_type, c)

        NAMED_INDIVIDUALS |= set(c.NAMED_INDIVIDUALS.values())

        # Registration is deferred until the first instance of class is created
        # so that it has access to any other defined class
        c._NEEDS_REG = True
        return c

    return decorator


register_lock = threading.Lock()
NAMED_INDIVIDUALS = set()


@functools.total_ordering
class SHACLObject(object):
    CLASSES = {}
    NODE_KIND = NodeKind.BlankNodeOrIRI
    ID_ALIAS = None
    IS_ABSTRACT = True

    def __init__(self, **kwargs):
        if self._is_abstract():
            raise NotImplementedError(
                f"{self.__class__.__name__} is abstract and cannot be implemented"
            )

        with register_lock:
            cls = self.__class__
            if cls._NEEDS_REG:
                cls._OBJ_PROPERTIES = {}
                cls._OBJ_IRIS = {}
                cls._register_props()
                cls._NEEDS_REG = False

        self.__dict__["_obj_data"] = {}
        self.__dict__["_obj_metadata"] = {}

        for iri, prop, _, _, _, _ in self.__iter_props():
            self.__dict__["_obj_data"][iri] = prop.init()

        for k, v in kwargs.items():
            setattr(self, k, v)

    def _is_abstract(self):
        return self.__class__.IS_ABSTRACT

    @classmethod
    def _register_props(cls):
        cls._add_property("_id", StringProp(), iri="@id")

    @classmethod
    def _add_property(
        cls,
        pyname,
        prop,
        iri,
        min_count=None,
        max_count=None,
        compact=None,
    ):
        if pyname in cls._OBJ_IRIS:
            raise KeyError(f"'{pyname}' is already defined for '{cls.__name__}'")
        if iri in cls._OBJ_PROPERTIES:
            raise KeyError(f"'{iri}' is already defined for '{cls.__name__}'")

        while hasattr(cls, pyname):
            pyname = pyname + "_"

        pyname = sys.intern(pyname)
        iri = sys.intern(iri)

        cls._OBJ_IRIS[pyname] = iri
        cls._OBJ_PROPERTIES[iri] = (prop, min_count, max_count, pyname, compact)

    def __setattr__(self, name, value):
        if name == self.ID_ALIAS:
            self["@id"] = value
            return

        try:
            iri = self._OBJ_IRIS[name]
            self[iri] = value
        except KeyError:
            raise AttributeError(
                f"'{name}' is not a valid property of {self.__class__.__name__}"
            )

    def __getattr__(self, name):
        if name in self._OBJ_IRIS:
            return self.__dict__["_obj_data"][self._OBJ_IRIS[name]]

        if name == self.ID_ALIAS:
            return self.__dict__["_obj_data"]["@id"]

        if name == "_metadata":
            return self.__dict__["_obj_metadata"]

        if name == "_IRI":
            return self._OBJ_IRIS

        if name == "TYPE":
            return self.__class__._OBJ_TYPE

        if name == "COMPACT_TYPE":
            return self.__class__._OBJ_COMPACT_TYPE

        raise AttributeError(
            f"'{name}' is not a valid property of {self.__class__.__name__}"
        )

    def __delattr__(self, name):
        if name == self.ID_ALIAS:
            del self["@id"]
            return

        try:
            iri = self._OBJ_IRIS[name]
            del self[iri]
        except KeyError:
            raise AttributeError(
                f"'{name}' is not a valid property of {self.__class__.__name__}"
            )

    def __get_prop(self, iri):
        if iri not in self._OBJ_PROPERTIES:
            raise KeyError(
                f"'{iri}' is not a valid property of {self.__class__.__name__}"
            )

        return self._OBJ_PROPERTIES[iri]

    def __iter_props(self):
        for iri, v in self._OBJ_PROPERTIES.items():
            yield iri, *v

    def __getitem__(self, iri):
        return self.__dict__["_obj_data"][iri]

    def __setitem__(self, iri, value):
        if iri == "@id":
            if self.NODE_KIND == NodeKind.BlankNode:
                if not is_blank_node(value):
                    raise ValueError(
                        f"{self.__class__.__name__} ({id(self)}) can only have local reference. Property '{iri}' cannot be set to '{value}' and must start with '_:'"
                    )
            elif self.NODE_KIND == NodeKind.IRI:
                if not is_IRI(value):
                    raise ValueError(
                        f"{self.__class__.__name__} ({id(self)}) can only have an IRI value. Property '{iri}' cannot be set to '{value}'"
                    )
            else:
                if not is_blank_node(value) and not is_IRI(value):
                    raise ValueError(
                        f"{self.__class__.__name__} ({id(self)}) Has invalid Property '{iri}' '{value}'. Must be a blank node or IRI"
                    )

        prop, _, _, _, _ = self.__get_prop(iri)
        prop.validate(value)
        self.__dict__["_obj_data"][iri] = prop.set(value)

    def __delitem__(self, iri):
        prop, _, _, _, _ = self.__get_prop(iri)
        self.__dict__["_obj_data"][iri] = prop.init()

    def __iter__(self):
        return self._OBJ_PROPERTIES.keys()

    def walk(self, callback, path=None):
        """
        Walk object tree, invoking the callback for each item

        Callback has the form:

        def callback(object, path):
        """
        if path is None:
            path = ["."]

        if callback(self, path):
            for iri, prop, _, _, _, _ in self.__iter_props():
                prop.walk(self.__dict__["_obj_data"][iri], callback, path + [f".{iri}"])

    def property_keys(self):
        for iri, _, _, _, pyname, compact in self.__iter_props():
            if iri == "@id":
                compact = self.ID_ALIAS
            yield pyname, iri, compact

    def iter_objects(self, *, recursive=False, visited=None):
        """
        Iterate of all objects that are a child of this one
        """
        if visited is None:
            visited = set()

        for iri, prop, _, _, _, _ in self.__iter_props():
            for c in prop.iter_objects(
                self.__dict__["_obj_data"][iri], recursive=recursive, visited=visited
            ):
                yield c

    def encode(self, encoder, state):
        idname = self.ID_ALIAS or self._OBJ_IRIS["_id"]
        if not self._id and self.NODE_KIND == NodeKind.IRI:
            raise ValueError(
                f"{self.__class__.__name__} ({id(self)}) must have a IRI for property '{idname}'"
            )

        if state.is_written(self):
            encoder.write_iri(state.get_object_id(self))
            return

        state.add_written(self)

        with encoder.write_object(
            self,
            state.get_object_id(self),
            bool(self._id) or state.is_refed(self),
        ) as obj_s:
            self._encode_properties(obj_s, state)

    def _encode_properties(self, encoder, state):
        for iri, prop, min_count, max_count, pyname, compact in self.__iter_props():
            value = self.__dict__["_obj_data"][iri]
            if prop.elide(value):
                if min_count:
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) is required (currently {value!r})"
                    )
                continue

            if min_count is not None:
                if not prop.check_min_count(value, min_count):
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) requires a minimum of {min_count} elements"
                    )

            if max_count is not None:
                if not prop.check_max_count(value, max_count):
                    raise ValueError(
                        f"Property '{pyname}' in {self.__class__.__name__} ({id(self)}) requires a maximum of {max_count} elements"
                    )

            if iri == self._OBJ_IRIS["_id"]:
                continue

            with encoder.write_property(iri, compact) as prop_s:
                prop.encode(prop_s, value, state)

    @classmethod
    def _make_object(cls, typ):
        if typ not in cls.CLASSES:
            raise TypeError(f"Unknown type {typ}")

        return cls.CLASSES[typ]()

    @classmethod
    def decode(cls, decoder, *, objectset=None):
        typ, obj_d = decoder.read_object()
        if typ is None:
            raise TypeError("Unable to determine type for object")

        obj = cls._make_object(typ)
        for key in (obj.ID_ALIAS, obj._OBJ_IRIS["_id"]):
            with obj_d.read_property(key) as prop_d:
                if prop_d is None:
                    continue

                _id = prop_d.read_iri()
                if _id is None:
                    raise TypeError(f"Object key '{key}' is the wrong type")

                obj._id = _id
                break

        if obj.NODE_KIND == NodeKind.IRI and not obj._id:
            raise ValueError("Object is missing required IRI")

        if objectset is not None:
            if obj._id:
                v = objectset.find_by_id(_id)
                if v is not None:
                    return v

        obj._decode_properties(obj_d, objectset=objectset)

        if objectset is not None:
            objectset.add_index(obj)
        return obj

    def _decode_properties(self, decoder, objectset=None):
        for key in decoder.object_keys():
            if not self._decode_prop(decoder, key, objectset=objectset):
                raise KeyError(f"Unknown property '{key}'")

    def _decode_prop(self, decoder, key, objectset=None):
        if key in (self._OBJ_IRIS["_id"], self.ID_ALIAS):
            return True

        for iri, prop, _, _, _, compact in self.__iter_props():
            if compact == key:
                read_key = compact
            elif iri == key:
                read_key = iri
            else:
                continue

            with decoder.read_property(read_key) as prop_d:
                v = prop.decode(prop_d, objectset=objectset)
                prop.validate(v)
                self.__dict__["_obj_data"][iri] = v
            return True

        return False

    def link_helper(self, objectset, missing, visited):
        if self in visited:
            return

        visited.add(self)

        for iri, prop, _, _, _, _ in self.__iter_props():
            self.__dict__["_obj_data"][iri] = prop.link_prop(
                self.__dict__["_obj_data"][iri],
                objectset,
                missing,
                visited,
            )

    def __str__(self):
        parts = [
            f"{self.__class__.__name__}(",
        ]
        if self._id:
            parts.append(f"@id='{self._id}'")
        parts.append(")")
        return "".join(parts)

    def __hash__(self):
        return super().__hash__()

    def __eq__(self, other):
        return super().__eq__(other)

    def __lt__(self, other):
        def sort_key(obj):
            if isinstance(obj, str):
                return (obj, "", "", "")
            return (
                obj._id or "",
                obj.TYPE,
                getattr(obj, "name", None) or "",
                id(obj),
            )

        return sort_key(self) < sort_key(other)


class SHACLExtensibleObject(object):
    CLOSED = False

    def __init__(self, typ=None, **kwargs):
        if typ:
            self.__dict__["_obj_TYPE"] = (typ, None)
        else:
            self.__dict__["_obj_TYPE"] = (self._OBJ_TYPE, self._OBJ_COMPACT_TYPE)
        super().__init__(**kwargs)

    def _is_abstract(self):
        # Unknown classes are assumed to not be abstract so that they can be
        # deserialized
        typ = self.__dict__["_obj_TYPE"][0]
        if typ in self.__class__.CLASSES:
            return self.__class__.CLASSES[typ].IS_ABSTRACT

        return False

    @classmethod
    def _make_object(cls, typ):
        # Check for a known type, and if so, deserialize as that instead
        if typ in cls.CLASSES:
            return cls.CLASSES[typ]()

        obj = cls(typ)
        return obj

    def _decode_properties(self, decoder, objectset=None):
        if self.CLOSED:
            super()._decode_properties(decoder, objectset=objectset)
            return

        for key in decoder.object_keys():
            if self._decode_prop(decoder, key, objectset=objectset):
                continue

            if not is_IRI(key):
                raise KeyError(
                    f"Extensible object properties must be IRIs. Got '{key}'"
                )

            with decoder.read_property(key) as prop_d:
                self.__dict__["_obj_data"][key] = prop_d.read_value()

    def _encode_properties(self, encoder, state):
        def encode_value(encoder, v):
            if isinstance(v, bool):
                encoder.write_bool(v)
            elif isinstance(v, str):
                encoder.write_string(v)
            elif isinstance(v, int):
                encoder.write_integer(v)
            elif isinstance(v, float):
                encoder.write_float(v)
            else:
                raise TypeError(
                    f"Unsupported serialized type {type(v)} with value '{v}'"
                )

        super()._encode_properties(encoder, state)
        if self.CLOSED:
            return

        for iri, value in self.__dict__["_obj_data"].items():
            if iri in self._OBJ_PROPERTIES:
                continue

            with encoder.write_property(iri) as prop_s:
                encode_value(prop_s, value)

    def __setitem__(self, iri, value):
        try:
            super().__setitem__(iri, value)
        except KeyError:
            if self.CLOSED:
                raise

            if not is_IRI(iri):
                raise KeyError(f"Key '{iri}' must be an IRI")
            self.__dict__["_obj_data"][iri] = value

    def __delitem__(self, iri):
        try:
            super().__delitem__(iri)
        except KeyError:
            if self.CLOSED:
                raise

            if not is_IRI(iri):
                raise KeyError(f"Key '{iri}' must be an IRI")
            del self.__dict__["_obj_data"][iri]

    def __getattr__(self, name):
        if name == "TYPE":
            return self.__dict__["_obj_TYPE"][0]
        if name == "COMPACT_TYPE":
            return self.__dict__["_obj_TYPE"][1]
        return super().__getattr__(name)

    def property_keys(self):
        iris = set()
        for pyname, iri, compact in super().property_keys():
            iris.add(iri)
            yield pyname, iri, compact

        if self.CLOSED:
            return

        for iri in self.__dict__["_obj_data"].keys():
            if iri not in iris:
                yield None, iri, None


class SHACLObjectSet(object):
    def __init__(self, objects=[], *, link=False):
        self.objects = set()
        self.missing_ids = set()
        for o in objects:
            self.objects.add(o)
        self.create_index()
        if link:
            self._link()

    def create_index(self):
        """
        (re)Create object index

        Creates or recreates the indices for the object set to enable fast
        lookup. All objects and their children are walked and indexed
        """
        self.obj_by_id = {}
        self.obj_by_type = {}
        for o in self.foreach():
            self.add_index(o)

    def add_index(self, obj):
        """
        Add object to index

        Adds the object to all appropriate indices
        """

        def reg_type(typ, compact, o, exact):
            self.obj_by_type.setdefault(typ, set()).add((exact, o))
            if compact:
                self.obj_by_type.setdefault(compact, set()).add((exact, o))

        if not isinstance(obj, SHACLObject):
            raise TypeError("Object is not of type SHACLObject")

        for typ in SHACLObject.CLASSES.values():
            if isinstance(obj, typ):
                reg_type(
                    typ._OBJ_TYPE, typ._OBJ_COMPACT_TYPE, obj, obj.__class__ is typ
                )

        # This covers custom extensions
        reg_type(obj.TYPE, obj.COMPACT_TYPE, obj, True)

        if not obj._id:
            return

        self.missing_ids.discard(obj._id)

        if obj._id in self.obj_by_id:
            return

        self.obj_by_id[obj._id] = obj

    def add(self, obj):
        """
        Add object to object set

        Adds a SHACLObject to the object set and index it.

        NOTE: Child objects of the attached object are not indexes
        """
        if not isinstance(obj, SHACLObject):
            raise TypeError("Object is not of type SHACLObject")

        if obj not in self.objects:
            self.objects.add(obj)
            self.add_index(obj)
        return obj

    def update(self, *others):
        """
        Update object set adding all objects in each other iterable
        """
        for o in others:
            for obj in o:
                self.add(obj)

    def __contains__(self, item):
        """
        Returns True if the item is in the object set
        """
        return item in self.objects

    def link(self):
        """
        Link object set

        Links the object in the object set by replacing string object
        references with references to the objects themselves. e.g.
        a property that references object "https://foo/bar" by a string
        reference will be replaced with an actual reference to the object in
        the object set with the same ID if it exists in the object set

        If multiple objects with the same ID are found, the duplicates are
        eliminated
        """
        self.create_index()
        return self._link()

    def _link(self):
        global NAMED_INDIVIDUALS

        self.missing_ids = set()
        visited = set()

        new_objects = set()

        for o in self.objects:
            if o._id:
                o = self.find_by_id(o._id, o)
            o.link_helper(self, self.missing_ids, visited)
            new_objects.add(o)

        self.objects = new_objects

        # Remove blank nodes
        obj_by_id = {}
        for _id, obj in self.obj_by_id.items():
            if _id.startswith("_:"):
                del obj._id
            else:
                obj_by_id[_id] = obj
        self.obj_by_id = obj_by_id

        # Named individuals aren't considered missing
        self.missing_ids -= NAMED_INDIVIDUALS

        return self.missing_ids

    def find_by_id(self, _id, default=None):
        """
        Find object by ID

        Returns objects that match the specified ID, or default if there is no
        object with the specified ID
        """
        if _id not in self.obj_by_id:
            return default
        return self.obj_by_id[_id]

    def foreach(self):
        """
        Iterate over every object in the object set, and all child objects
        """
        visited = set()
        for o in self.objects:
            if o not in visited:
                yield o
                visited.add(o)

            for child in o.iter_objects(recursive=True, visited=visited):
                yield child

    def foreach_type(self, typ, *, match_subclass=True):
        """
        Iterate over each object of a specified type (or subclass there of)

        If match_subclass is True, and class derived from typ will also match
        (similar to isinstance()). If False, only exact matches will be
        returned
        """
        if not isinstance(typ, str):
            if not issubclass(typ, SHACLObject):
                raise TypeError(f"Type must be derived from SHACLObject, got {typ}")
            typ = typ._OBJ_TYPE

        if typ not in self.obj_by_type:
            return

        for exact, o in self.obj_by_type[typ]:
            if match_subclass or exact:
                yield o

    def merge(self, *objectsets):
        """
        Merge object sets

        Returns a new object set that is the combination of this object set and
        all provided arguments
        """
        new_objects = set()
        new_objects |= self.objects
        for d in objectsets:
            new_objects |= d.objects

        return SHACLObjectSet(new_objects, link=True)

    def encode(self, encoder, force_list=False):
        """
        Serialize a list of objects to a serialization encoder

        If force_list is true, a list will always be written using the encoder.
        """
        ref_counts = {}
        state = EncodeState()

        def walk_callback(value, path):
            nonlocal state
            nonlocal ref_counts

            if not isinstance(value, SHACLObject):
                return True

            # Remove blank node ID for re-assignment
            if value._id and value._id.startswith("_:"):
                del value._id

            if value._id:
                state.add_refed(value)

            # If the object is referenced more than once, add it to the set of
            # referenced objects
            ref_counts.setdefault(value, 0)
            ref_counts[value] += 1
            if ref_counts[value] > 1:
                state.add_refed(value)
                return False

            return True

        for o in self.objects:
            if o._id:
                state.add_refed(o)
            o.walk(walk_callback)

        use_list = force_list or len(self.objects) > 1

        if use_list:
            # If we are making a list add all the objects referred to by reference
            # to the list
            objects = list(self.objects | state.ref_objects)
        else:
            objects = list(self.objects)

        objects.sort()

        if use_list:
            # Ensure top level objects are only written in the top level graph
            # node, and referenced by ID everywhere else. This is done by setting
            # the flag that indicates this object has been written for all the top
            # level objects, then clearing it right before serializing the object.
            #
            # In this way, if an object is referenced before it is supposed to be
            # serialized into the @graph, it will serialize as a string instead of
            # the actual object
            for o in objects:
                state.written_objects.add(o)

            with encoder.write_list() as list_s:
                for o in objects:
                    # Allow this specific object to be written now
                    state.written_objects.remove(o)
                    with list_s.write_list_item() as item_s:
                        o.encode(item_s, state)

        else:
            objects[0].encode(encoder, state)

    def decode(self, decoder):
        self.create_index()

        for obj_d in decoder.read_list():
            o = SHACLObject.decode(obj_d, objectset=self)
            self.objects.add(o)

        self._link()


class EncodeState(object):
    def __init__(self):
        self.ref_objects = set()
        self.written_objects = set()
        self.blank_objects = {}

    def get_object_id(self, o):
        if o._id:
            return o._id

        if o not in self.blank_objects:
            _id = f"_:{o.__class__.__name__}{len(self.blank_objects)}"
            self.blank_objects[o] = _id

        return self.blank_objects[o]

    def is_refed(self, o):
        return o in self.ref_objects

    def add_refed(self, o):
        self.ref_objects.add(o)

    def is_written(self, o):
        return o in self.written_objects

    def add_written(self, o):
        self.written_objects.add(o)


class Decoder(ABC):
    @abstractmethod
    def read_value(self):
        """
        Consume next item

        Consumes the next item of any type
        """
        pass

    @abstractmethod
    def read_string(self):
        """
        Consume the next item as a string.

        Returns the string value of the next item, or `None` if the next item
        is not a string
        """
        pass

    @abstractmethod
    def read_datetime(self):
        """
        Consumes the next item as a date & time string

        Returns the string value of the next item, if it is a ISO datetime, or
        `None` if the next item is not a ISO datetime string.

        Note that validation of the string is done by the caller, so a minimal
        implementation can just check if the next item is a string without
        worrying about the format
        """
        pass

    @abstractmethod
    def read_integer(self):
        """
        Consumes the next item as an integer

        Returns the integer value of the next item, or `None` if the next item
        is not an integer
        """
        pass

    @abstractmethod
    def read_iri(self):
        """
        Consumes the next item as an IRI string

        Returns the string value of the next item an IRI, or `None` if the next
        item is not an IRI.

        The returned string should be either a fully-qualified IRI, or a blank
        node ID
        """
        pass

    @abstractmethod
    def read_enum(self, e):
        """
        Consumes the next item as an Enum value string

        Returns the fully qualified IRI of the next enum item, or `None` if the
        next item is not an enum value.

        The callee is responsible for validating that the returned IRI is
        actually a member of the specified Enum, so the `Decoder` does not need
        to check that, but can if it wishes
        """
        pass

    @abstractmethod
    def read_bool(self):
        """
        Consume the next item as a boolean value

        Returns the boolean value of the next item, or `None` if the next item
        is not a boolean
        """
        pass

    @abstractmethod
    def read_float(self):
        """
        Consume the next item as a float value

        Returns the float value of the next item, or `None` if the next item is
        not a float
        """
        pass

    @abstractmethod
    def read_list(self):
        """
        Consume the next item as a list generator

        This should generate a `Decoder` object for each item in the list. The
        generated `Decoder` can be used to read the corresponding item from the
        list
        """
        pass

    @abstractmethod
    def read_object(self):
        """
        Consume next item as an object

        A context manager that "enters" the next item as a object and yields a
        `Decoder` that can read properties from it. If the next item is not an
        object, yields `None`

        Properties will be read out of the object using `read_property` and
        `read_object_id`
        """
        pass

    @abstractmethod
    @contextmanager
    def read_property(self, key):
        """
        Read property from object

        A context manager that yields a `Decoder` that can be used to read the
        value of the property with the given key in current object, or `None`
        if the property does not exist in the current object.
        """
        pass

    @abstractmethod
    def object_keys(self):
        """
        Read property keys from an object

        Iterates over all the serialized keys for the current object
        """
        pass

    @abstractmethod
    def read_object_id(self, alias=None):
        """
        Read current object ID property

        Returns the ID of the current object if one is defined, or `None` if
        the current object has no ID.

        The ID must be a fully qualified IRI or a blank node

        If `alias` is provided, is is a hint as to another name by which the ID
        might be found, if the `Decoder` supports aliases for an ID
        """
        pass


class JSONLDDecoder(Decoder):
    def __init__(self, data, root=False):
        self.data = data
        self.root = root

    def read_value(self):
        if isinstance(self.data, str):
            try:
                return float(self.data)
            except ValueError:
                pass
        return self.data

    def read_string(self):
        if isinstance(self.data, str):
            return self.data
        return None

    def read_datetime(self):
        return self.read_string()

    def read_integer(self):
        if isinstance(self.data, int):
            return self.data
        return None

    def read_bool(self):
        if isinstance(self.data, bool):
            return self.data
        return None

    def read_float(self):
        if isinstance(self.data, (int, float, str)):
            return float(self.data)
        return None

    def read_iri(self):
        if isinstance(self.data, str):
            return self.data
        return None

    def read_enum(self, e):
        if isinstance(self.data, str):
            return self.data
        return None

    def read_list(self):
        if isinstance(self.data, (list, tuple, set)):
            for v in self.data:
                yield self.__class__(v)
        else:
            yield self

    def __get_value(self, *keys):
        for k in keys:
            if k and k in self.data:
                return self.data[k]
        return None

    @contextmanager
    def read_property(self, key):
        v = self.__get_value(key)
        if v is not None:
            yield self.__class__(v)
        else:
            yield None

    def object_keys(self):
        for key in self.data.keys():
            if key in ("@type", "@type"):
                continue
            if self.root and key == "@context":
                continue
            yield key

    def read_object(self):
        typ = self.__get_value("@type", "@type")
        if typ is not None:
            return typ, self

        return None, self

    def read_object_id(self, alias=None):
        return self.__get_value(alias, "@id")


class JSONLDDeserializer(object):
    def deserialize_data(self, data, objectset: SHACLObjectSet):
        if "@graph" in data:
            h = JSONLDDecoder(data["@graph"], True)
        else:
            h = JSONLDDecoder(data, True)

        objectset.decode(h)

    def read(self, f, objectset: SHACLObjectSet):
        data = json.load(f)
        self.deserialize_data(data, objectset)


class Encoder(ABC):
    @abstractmethod
    def write_string(self, v):
        """
        Write a string value

        Encodes the value as a string in the output
        """
        pass

    @abstractmethod
    def write_datetime(self, v):
        """
        Write a date & time string

        Encodes the value as an ISO datetime string

        Note: The provided string is already correctly encoded as an ISO datetime
        """
        pass

    @abstractmethod
    def write_integer(self, v):
        """
        Write an integer value

        Encodes the value as an integer in the output
        """
        pass

    @abstractmethod
    def write_iri(self, v, compact=None):
        """
        Write IRI

        Encodes the string as an IRI. Note that the string will be either a
        fully qualified IRI or a blank node ID. If `compact` is provided and
        the serialization supports compacted IRIs, it should be preferred to
        the full IRI
        """
        pass

    @abstractmethod
    def write_enum(self, v, e, compact=None):
        """
        Write enum value IRI

        Encodes the string enum value IRI. Note that the string will be a fully
        qualified IRI. If `compact` is provided and the serialization supports
        compacted IRIs, it should be preferred to the full IRI.
        """
        pass

    @abstractmethod
    def write_bool(self, v):
        """
        Write boolean

        Encodes the value as a boolean in the output
        """
        pass

    @abstractmethod
    def write_float(self, v):
        """
        Write float

        Encodes the value as a floating point number in the output
        """
        pass

    @abstractmethod
    @contextmanager
    def write_object(self, o, _id, needs_id):
        """
        Write object

        A context manager that yields an `Encoder` that can be used to encode
        the given object properties.

        The provided ID will always be a valid ID (even if o._id is `None`), in
        case the `Encoder` _must_ have an ID. `needs_id` is a hint to indicate
        to the `Encoder` if an ID must be written or not (if that is even an
        option). If it is `True`, the `Encoder` must encode an ID for the
        object. If `False`, the encoder is not required to encode an ID and may
        omit it.

        The ID will be either a fully qualified IRI, or a blank node IRI.

        Properties will be written the object using `write_property`
        """
        pass

    @abstractmethod
    @contextmanager
    def write_property(self, iri, compact=None):
        """
        Write object property

        A context manager that yields an `Encoder` that can be used to encode
        the value for the property with the given IRI in the current object

        Note that the IRI will be fully qualified. If `compact` is provided and
        the serialization supports compacted IRIs, it should be preferred to
        the full IRI.
        """
        pass

    @abstractmethod
    @contextmanager
    def write_list(self):
        """
        Write list

        A context manager that yields an `Encoder` that can be used to encode a
        list.

        Each item of the list will be added using `write_list_item`
        """
        pass

    @abstractmethod
    @contextmanager
    def write_list_item(self):
        """
        Write list item

        A context manager that yields an `Encoder` that can be used to encode
        the value for a list item
        """
        pass


class JSONLDEncoder(Encoder):
    def __init__(self, data=None):
        self.data = data

    def write_string(self, v):
        self.data = v

    def write_datetime(self, v):
        self.data = v

    def write_integer(self, v):
        self.data = v

    def write_iri(self, v, compact=None):
        self.write_string(compact or v)

    def write_enum(self, v, e, compact=None):
        self.write_string(compact or v)

    def write_bool(self, v):
        self.data = v

    def write_float(self, v):
        self.data = str(v)

    @contextmanager
    def write_property(self, iri, compact=None):
        s = self.__class__(None)
        yield s
        if s.data is not None:
            self.data[compact or iri] = s.data

    @contextmanager
    def write_object(self, o, _id, needs_id):
        self.data = {
            "@type": o.COMPACT_TYPE or o.TYPE,
        }
        if needs_id:
            self.data[o.ID_ALIAS or "@id"] = _id
        yield self

    @contextmanager
    def write_list(self):
        self.data = []
        yield self
        if not self.data:
            self.data = None

    @contextmanager
    def write_list_item(self):
        s = self.__class__(None)
        yield s
        if s.data is not None:
            self.data.append(s.data)


class JSONLDSerializer(object):
    def __init__(self, **args):
        self.args = args

    def serialize_data(
        self,
        objectset: SHACLObjectSet,
        force_at_graph=False,
    ):
        h = JSONLDEncoder()
        objectset.encode(h, force_at_graph)
        data = {}
        if len(CONTEXT_URLS) == 1:
            data["@context"] = CONTEXT_URLS[0]
        elif CONTEXT_URLS:
            data["@context"] = CONTEXT_URLS

        if isinstance(h.data, list):
            data["@graph"] = h.data
        else:
            for k, v in h.data.items():
                data[k] = v

        return data

    def write(
        self,
        objectset: SHACLObjectSet,
        f,
        force_at_graph=False,
        **kwargs,
    ):
        """
        Write a SHACLObjectSet to a JSON LD file

        If force_at_graph is True, a @graph node will always be written
        """
        data = self.serialize_data(objectset, force_at_graph)

        args = {**self.args, **kwargs}

        sha1 = hashlib.sha1()
        for chunk in json.JSONEncoder(**args).iterencode(data):
            chunk = chunk.encode("utf-8")
            f.write(chunk)
            sha1.update(chunk)

        return sha1.hexdigest()


class JSONLDInlineEncoder(Encoder):
    def __init__(self, f, sha1):
        self.f = f
        self.comma = False
        self.sha1 = sha1

    def write(self, s):
        s = s.encode("utf-8")
        self.f.write(s)
        self.sha1.update(s)

    def _write_comma(self):
        if self.comma:
            self.write(",")
            self.comma = False

    def write_string(self, v):
        self.write(json.dumps(v))

    def write_datetime(self, v):
        self.write_string(v)

    def write_integer(self, v):
        self.write(f"{v}")

    def write_iri(self, v, compact=None):
        self.write_string(compact or v)

    def write_enum(self, v, e, compact=None):
        self.write_iri(v, compact)

    def write_bool(self, v):
        if v:
            self.write("true")
        else:
            self.write("false")

    def write_float(self, v):
        self.write(json.dumps(str(v)))

    @contextmanager
    def write_property(self, iri, compact=None):
        self._write_comma()
        self.write_string(compact or iri)
        self.write(":")
        yield self
        self.comma = True

    @contextmanager
    def write_object(self, o, _id, needs_id):
        self._write_comma()

        self.write("{")
        self.write_string("@type")
        self.write(":")
        self.write_string(o.COMPACT_TYPE or o.TYPE)
        self.comma = True

        if needs_id:
            self._write_comma()
            self.write_string(o.ID_ALIAS or "@id")
            self.write(":")
            self.write_string(_id)
            self.comma = True

        self.comma = True
        yield self

        self.write("}")
        self.comma = True

    @contextmanager
    def write_list(self):
        self._write_comma()
        self.write("[")
        yield self.__class__(self.f, self.sha1)
        self.write("]")
        self.comma = True

    @contextmanager
    def write_list_item(self):
        self._write_comma()
        yield self.__class__(self.f, self.sha1)
        self.comma = True


class JSONLDInlineSerializer(object):
    def write(
        self,
        objectset: SHACLObjectSet,
        f,
        force_at_graph=False,
    ):
        """
        Write a SHACLObjectSet to a JSON LD file

        Note: force_at_graph is included for compatibility, but ignored. This
        serializer always writes out a graph
        """
        sha1 = hashlib.sha1()
        h = JSONLDInlineEncoder(f, sha1)
        h.write('{"@context":')
        if len(CONTEXT_URLS) == 1:
            h.write(f'"{CONTEXT_URLS[0]}"')
        elif CONTEXT_URLS:
            h.write('["')
            h.write('","'.join(CONTEXT_URLS))
            h.write('"]')
        h.write(",")

        h.write('"@graph":')

        objectset.encode(h, True)
        h.write("}")
        return sha1.hexdigest()


def print_tree(objects, all_fields=False):
    """
    Print object tree
    """
    seen = set()

    def callback(value, path):
        nonlocal seen

        s = ("  " * (len(path) - 1)) + f"{path[-1]}"
        if isinstance(value, SHACLObject):
            s += f" {value} ({id(value)})"
            is_empty = False
        elif isinstance(value, ListProxy):
            is_empty = len(value) == 0
            if is_empty:
                s += " []"
        else:
            s += f" {value!r}"
            is_empty = value is None

        if all_fields or not is_empty:
            print(s)

        if isinstance(value, SHACLObject):
            if value in seen:
                return False
            seen.add(value)
            return True

        return True

    for o in objects:
        o.walk(callback)


# fmt: off
"""Format Guard"""


CONTEXT_URLS = [
]

_NI_ENCODE_CONTEXT = {
}

_NI_DECODE_CONTEXT = {
}


# CLASSES
# An Abstract class
@register("http://example.org/abstract-class", abstract=True)
class http_example_org_abstract_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# An Abstract class using the SPDX type
@register("http://example.org/abstract-spdx-class", abstract=True)
class http_example_org_abstract_spdx_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A concrete class
@register("http://example.org/concrete-class", abstract=False)
class http_example_org_concrete_class(http_example_org_abstract_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A concrete class
@register("http://example.org/concrete-spdx-class", abstract=False)
class http_example_org_concrete_spdx_class(http_example_org_abstract_spdx_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# An enumerated type
@register("http://example.org/enumType", abstract=False)
class http_example_org_enumType(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
        "foo": "http://example.org/enumType/foo",
        "bar": "http://example.org/enumType/bar",
        "nolabel": "http://example.org/enumType/nolabel",
    }
    # The foo value of enumType
    foo = "http://example.org/enumType/foo"
    # The bar value of enumType
    bar = "http://example.org/enumType/bar"
    # This value has no label
    nolabel = "http://example.org/enumType/nolabel"


# An extensible abstract class
@register("http://example.org/extensible-abstract-class", abstract=True)
class http_example_org_extensible_abstract_class(SHACLExtensibleObject, SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A class with an ID alias
@register("http://example.org/id-prop-class", abstract=False)
class http_example_org_id_prop_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    ID_ALIAS = "testid"
    NAMED_INDIVIDUALS = {
    }


# A class that inherits its idPropertyName from the parent
@register("http://example.org/inherited-id-prop-class", abstract=False)
class http_example_org_inherited_id_prop_class(http_example_org_id_prop_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    ID_ALIAS = "testid"
    NAMED_INDIVIDUALS = {
    }


# A class to test links
@register("http://example.org/link-class", abstract=False)
class http_example_org_link_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A link to an extensible-class
        cls._add_property(
            "extensible",
            ObjectProp(http_example_org_extensible_class, False),
            iri="http://example.org/link-class-extensible",
        )
        # A link-class list property
        cls._add_property(
            "link_list_prop",
            ListProp(ObjectProp(http_example_org_link_class, False)),
            iri="http://example.org/link-class-link-list-prop",
        )
        # A link-class property
        cls._add_property(
            "link_prop",
            ObjectProp(http_example_org_link_class, False),
            iri="http://example.org/link-class-link-prop",
        )
        # A link-class property with no sh:class
        cls._add_property(
            "link_prop_no_class",
            ObjectProp(http_example_org_link_class, False),
            iri="http://example.org/link-class-link-prop-no-class",
        )


# A class derived from link-class
@register("http://example.org/link-derived-class", abstract=False)
class http_example_org_link_derived_class(http_example_org_link_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A class that must be a blank node
@register("http://example.org/node-kind-blank", abstract=False)
class http_example_org_node_kind_blank(http_example_org_link_class):
    NODE_KIND = NodeKind.BlankNode
    NAMED_INDIVIDUALS = {
    }


# A class that must be an IRI
@register("http://example.org/node-kind-iri", abstract=False)
class http_example_org_node_kind_iri(http_example_org_link_class):
    NODE_KIND = NodeKind.IRI
    NAMED_INDIVIDUALS = {
    }


# A class that can be either a blank node or an IRI
@register("http://example.org/node-kind-iri-or-blank", abstract=False)
class http_example_org_node_kind_iri_or_blank(http_example_org_link_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A class that is not a nodeshape
@register("http://example.org/non-shape-class", abstract=False)
class http_example_org_non_shape_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# The parent class
@register("http://example.org/parent-class", abstract=False)
class http_example_org_parent_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A class with a mandatory abstract class
@register("http://example.org/required-abstract", abstract=False)
class http_example_org_required_abstract(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A required abstract class property
        cls._add_property(
            "abstract_class_prop",
            ObjectProp(http_example_org_abstract_class, True),
            iri="http://example.org/required-abstract/abstract-class-prop",
            min_count=1,
        )


# Another class
@register("http://example.org/test-another-class", abstract=False)
class http_example_org_test_another_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# The test class
@register("http://example.org/test-class", abstract=False)
class http_example_org_test_class(http_example_org_parent_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
        "named": "http://example.org/test-class/named",
    }
    named = "http://example.org/test-class/named"

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A property that conflicts with an existing SHACLObject property
        cls._add_property(
            "encode",
            StringProp(),
            iri="http://example.org/encode",
        )
        # A property that is a keyword
        cls._add_property(
            "import_",
            StringProp(),
            iri="http://example.org/import",
        )
        # a URI
        cls._add_property(
            "anyuri_prop",
            AnyURIProp(),
            iri="http://example.org/test-class/anyuri-prop",
        )
        # a boolean property
        cls._add_property(
            "boolean_prop",
            BooleanProp(),
            iri="http://example.org/test-class/boolean-prop",
        )
        # A test-class list property
        cls._add_property(
            "class_list_prop",
            ListProp(ObjectProp(http_example_org_test_class, False)),
            iri="http://example.org/test-class/class-list-prop",
        )
        # A test-class property
        cls._add_property(
            "class_prop",
            ObjectProp(http_example_org_test_class, False),
            iri="http://example.org/test-class/class-prop",
        )
        # A test-class property with no sh:class
        cls._add_property(
            "class_prop_no_class",
            ObjectProp(http_example_org_test_class, False),
            iri="http://example.org/test-class/class-prop-no-class",
        )
        # A datetime list property
        cls._add_property(
            "datetime_list_prop",
            ListProp(DateTimeProp()),
            iri="http://example.org/test-class/datetime-list-prop",
        )
        # A scalar datetime property
        cls._add_property(
            "datetime_scalar_prop",
            DateTimeProp(),
            iri="http://example.org/test-class/datetime-scalar-prop",
        )
        # A scalar dateTimeStamp property
        cls._add_property(
            "datetimestamp_scalar_prop",
            DateTimeStampProp(),
            iri="http://example.org/test-class/datetimestamp-scalar-prop",
        )
        # A enum list property
        cls._add_property(
            "enum_list_prop",
            ListProp(EnumProp([
                    ("http://example.org/enumType/bar", "http://example.org/enumType/bar"),
                    ("http://example.org/enumType/foo", "http://example.org/enumType/foo"),
                    ("http://example.org/enumType/nolabel", "http://example.org/enumType/nolabel"),
                    ("http://example.org/enumType/non-named-individual", "http://example.org/enumType/non-named-individual"),
                ])),
            iri="http://example.org/test-class/enum-list-prop",
        )
        # A enum property
        cls._add_property(
            "enum_prop",
            EnumProp([
                    ("http://example.org/enumType/bar", "http://example.org/enumType/bar"),
                    ("http://example.org/enumType/foo", "http://example.org/enumType/foo"),
                    ("http://example.org/enumType/nolabel", "http://example.org/enumType/nolabel"),
                    ("http://example.org/enumType/non-named-individual", "http://example.org/enumType/non-named-individual"),
                ]),
            iri="http://example.org/test-class/enum-prop",
        )
        # A enum property with no sh:class
        cls._add_property(
            "enum_prop_no_class",
            EnumProp([
                    ("http://example.org/enumType/bar", "http://example.org/enumType/bar"),
                    ("http://example.org/enumType/foo", "http://example.org/enumType/foo"),
                    ("http://example.org/enumType/nolabel", "http://example.org/enumType/nolabel"),
                    ("http://example.org/enumType/non-named-individual", "http://example.org/enumType/non-named-individual"),
                ]),
            iri="http://example.org/test-class/enum-prop-no-class",
        )
        # a float property
        cls._add_property(
            "float_prop",
            FloatProp(),
            iri="http://example.org/test-class/float-prop",
        )
        # a non-negative integer
        cls._add_property(
            "integer_prop",
            IntegerProp(),
            iri="http://example.org/test-class/integer-prop",
        )
        # A named property
        cls._add_property(
            "named_property",
            StringProp(),
            iri="http://example.org/test-class/named-property",
        )
        # A class with no shape
        cls._add_property(
            "non_shape",
            ObjectProp(http_example_org_non_shape_class, False),
            iri="http://example.org/test-class/non-shape",
        )
        # a non-negative integer
        cls._add_property(
            "nonnegative_integer_prop",
            NonNegativeIntegerProp(),
            iri="http://example.org/test-class/nonnegative-integer-prop",
        )
        # A positive integer
        cls._add_property(
            "positive_integer_prop",
            PositiveIntegerProp(),
            iri="http://example.org/test-class/positive-integer-prop",
        )
        # A regex validated string
        cls._add_property(
            "regex",
            StringProp(pattern=r"^foo\d",),
            iri="http://example.org/test-class/regex",
        )
        # A regex dateTime
        cls._add_property(
            "regex_datetime",
            DateTimeProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d\+01:00$",),
            iri="http://example.org/test-class/regex-datetime",
        )
        # A regex dateTimeStamp
        cls._add_property(
            "regex_datetimestamp",
            DateTimeStampProp(pattern=r"^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$",),
            iri="http://example.org/test-class/regex-datetimestamp",
        )
        # A regex validated string list
        cls._add_property(
            "regex_list",
            ListProp(StringProp(pattern=r"^foo\d",)),
            iri="http://example.org/test-class/regex-list",
        )
        # A string list property with no sh:datatype
        cls._add_property(
            "string_list_no_datatype",
            ListProp(StringProp()),
            iri="http://example.org/test-class/string-list-no-datatype",
        )
        # A string list property
        cls._add_property(
            "string_list_prop",
            ListProp(StringProp()),
            iri="http://example.org/test-class/string-list-prop",
        )
        # A scalar string propery
        cls._add_property(
            "string_scalar_prop",
            StringProp(),
            iri="http://example.org/test-class/string-scalar-prop",
        )


@register("http://example.org/test-class-required", abstract=False)
class http_example_org_test_class_required(http_example_org_test_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A required string list property
        cls._add_property(
            "required_string_list_prop",
            ListProp(StringProp()),
            iri="http://example.org/test-class/required-string-list-prop",
            max_count=2,
            min_count=1,
        )
        # A required scalar string property
        cls._add_property(
            "required_string_scalar_prop",
            StringProp(),
            iri="http://example.org/test-class/required-string-scalar-prop",
            min_count=1,
        )


# A class derived from test-class
@register("http://example.org/test-derived-class", abstract=False)
class http_example_org_test_derived_class(http_example_org_test_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A string property in a derived class
        cls._add_property(
            "string_prop",
            StringProp(),
            iri="http://example.org/test-derived-class/string-prop",
        )


# A class that uses an abstract extensible class
@register("http://example.org/uses-extensible-abstract-class", abstract=False)
class http_example_org_uses_extensible_abstract_class(SHACLObject):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # A property that references and abstract extensible class
        cls._add_property(
            "prop",
            ObjectProp(http_example_org_extensible_abstract_class, True),
            iri="http://example.org/uses-extensible-abstract-class/prop",
            min_count=1,
        )


# Derived class that sorts before the parent to test ordering
@register("http://example.org/aaa-derived-class", abstract=False)
class http_example_org_aaa_derived_class(http_example_org_parent_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }


# A class that derives its nodeKind from parent
@register("http://example.org/derived-node-kind-iri", abstract=False)
class http_example_org_derived_node_kind_iri(http_example_org_node_kind_iri):
    NODE_KIND = NodeKind.IRI
    NAMED_INDIVIDUALS = {
    }


# An extensible class
@register("http://example.org/extensible-class", abstract=False)
class http_example_org_extensible_class(SHACLExtensibleObject, http_example_org_link_class):
    NODE_KIND = NodeKind.BlankNodeOrIRI
    NAMED_INDIVIDUALS = {
    }

    @classmethod
    def _register_props(cls):
        super()._register_props()
        # An extensible property
        cls._add_property(
            "property",
            StringProp(),
            iri="http://example.org/extensible-class/property",
        )
        # A required extensible property
        cls._add_property(
            "required",
            StringProp(),
            iri="http://example.org/extensible-class/required",
            min_count=1,
        )


"""Format Guard"""
# fmt: on


def main():
    import argparse
    from pathlib import Path

    parser = argparse.ArgumentParser(description="Python SHACL model test")
    parser.add_argument("infile", type=Path, help="Input file")
    parser.add_argument("--print", action="store_true", help="Print object tree")
    parser.add_argument("--outfile", type=Path, help="Output file")

    args = parser.parse_args()

    objectset = SHACLObjectSet()
    with args.infile.open("r") as f:
        d = JSONLDDeserializer()
        d.read(f, objectset)

    if args.print:
        print_tree(objectset.objects)

    if args.outfile:
        with args.outfile.open("wb") as f:
            s = JSONLDSerializer()
            s.write(objectset, f)

    return 0


if __name__ == "__main__":
    sys.exit(main())
